private free priv.
free c.
private fun getSharedKey/1.
fun enc/2.
reduc dec(k, enc(k, m)) = m.
fun hash/1.
fun twoHash/2.
data Ready/0.

let Verifier =
in(c, commitHash);
phase 1;
new challenge;
out(priv, challenge);
in(priv, response);
phase 2;
in(c, unwrapper);
let message = dec(getSharedKey(idV), unwrapper) in
if commitHash = hash(message) then
if response = twoHash(challenge, message) then
event Verified(idV).

query ev:Verified(id).

(* New local process declarations *)

let Prover_L0 =
new message;
out(c, hash(message));
phase 1;
in(priv, challenge);
out(priv, twoHash(challenge, message));
phase 2;
out(c, (message, enc(getSharedKey(idP), message))).

(* New remote process declarations *)

let DishonestProver_R0 =
out(c, (idP, getSharedKey(idP))).

process
( new idTest;
    (let idV = idTest in Verifier)|
    (new id2; let idP = id2 in !(Prover_L0))|
    (let idP = idTest in DishonestProver_R0)
)|(
    (!in(c, m);
    phase 1;
    out(priv, m)
    )|
    (!phase 1;
    in(priv, m);
    phase 2;
    out(c, m)
    )
)
