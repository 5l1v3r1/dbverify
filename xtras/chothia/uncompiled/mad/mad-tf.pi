(* Example protocol *)
free c.

private fun getSharedKey/1.

fun commit/2.
fun mac/2.

fun xor/2.
reduc unpackXor(xor(a,b),a) = b
  otherwise unpackXor(xor(a,b),b) = a.

let Verifier =
  in(c, idV);
  in(c, commitment);
  startTimer;
  new b;
  out(c, b);
  in(c, xorP);
  stopTimer;
  in(c, (s', macP));
  let s = unpackXor(xorP, b) in
  if macP = mac(getSharedKey(idV), (b, s)) then
  if commitment = commit(s,s') then
  event Verified(idV).

let Prover =
  out(c, idP);
  new s;
  new s';
  out(c, commit(s,s'));
  in(c, b);
  out(c, xor(b, s));
  out(c, (s', mac(getSharedKey(idP), (b,s)))).

let DishonestProver =
  out(c, (idP, getSharedKey(idP))).

let DishonestTerroristProver =
  (in(c, message);
  let macMessage = mac(getSharedKey(idP), message) in
  out(c, macMessage))
  | out(c, idP).

(* Check whether prover can be successfully verified for identity id *)
query ev:Verified(id).

(* Check regular use *)
(*
query ev:Verified(a) ==> ev:StartProof(a).

process
  [ !Verifier | !(new id; let idP = id in !(event StartProof(idP); Prover)) ]
*)

(* Check for mafia fraud/relay security *)
(*
process
  [ !Verifier ] | [ !(new id; let idP = id in !Prover) ]
*)

(* Check for uncompromised distance bounding security *)
(*
process
  [ !Verifier | (new id2; let idP = id2 in DishonestProver) ]
| [ !(new id; let idP = id in !Prover) | (new id2; let idP = id2 in DishonestProver) ]
*)

(* Check for terrorist fraud security *)

process
  [ !Verifier ]
| [ !(new id; let idP = id in !DishonestTerroristProver) ]


(* Check for distance fraud security (no local attacker) *)
(*
process
  [ !Verifier ]
| [ !(new id; let idP = id in !DishonestProver) ]
*)
