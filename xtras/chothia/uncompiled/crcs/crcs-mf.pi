(* CRCS *)
free c.

private fun getPrivateKey/1.
fun getPublicKey/1.

fun encAsym/2.
reduc decAsym(getPrivateKey(i), encAsym(getPublicKey(i), m)) = m.

fun sign/2.
reduc checksign(getPublicKey(y),sign(getPrivateKey(y),x)) = x.

fun hash/1.
fun CRCS/2.

let Verifier =
  in(c, idV);
  in(c, commitment);
  startTimer;
  new nV;
  out(c, nV);
  in(c, crcsResult);
  stopTimer;
  in(c, signature);
  let (nP, =nV) = checksign(getPublicKey(idV), signature) in
  if crcsResult = CRCS(nP, nV) then
  if commitment = hash(nP) then
  event Verified(idV).

let Prover =
  out(c, idP);
  new nP;
  out(c, sign(getPrivateKey(idP), hash(nP)));
  in(c, nV);
  out(c, CRCS(nP, nV));
  out(c, sign(getPrivateKey(idP), (nP, nV))).

let DishonestProver =
  out(c, (idP, getPrivateKey(idP))).

let DishonestTerroristProver =
  (in(c, message);
  let signature = sign(getPrivateKey(idP), message) in
  out(c, signature))
  | out(c, idP).

(* Check whether prover can be successfully verified for identity id *)
query ev:Verified(id).

(* Check regular use *)
(*
query ev:Verified(a) ==> ev:StartProof(a).

process
  [ !Verifier | !(new id; let idP = id in !(event StartProof(idP); Prover)) ]
*)

(* Check for mafia fraud/relay security *)

process
  [ !Verifier ] | [ !(new id; let idP = id in !Prover) ]


(* Check for uncompromised distance bounding security *)
(*
process
  [ !Verifier | (new id2; let idP = id2 in DishonestProver) ]
| [ !(new id; let idP = id in !Prover) | (new id2; let idP = id2 in DishonestProver) ]
*)

(* Check for terrorist fraud security *)
(*
process
  [ !Verifier ]
| [ !(new id; let idP = id in !DishonestTerroristProver) ]
*)

(* Check for distance fraud security (no local attacker) *)
(*
process
  [ !Verifier ]
| [ !(new id; let idP = id in !DishonestProver) ]
*)
