free c.
private fun getSharedKey/1.
fun enc/2.
reduc dec(k, enc(k, m)) = m.
fun hash/1.
fun threeHash/3.
data Ready/0.
let Verifier =
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
phase 1;
new challenge;
out(c, challenge);
in(c, response);
phase 2;
if response = threeHash(challenge, message, idV) then
event Verified(idV).
let Prover =
out(c, idP);
new message;
out(c, enc(getSharedKey(idP), message));
in(c, challenge);
out(c, threeHash(challenge, message, idP)).
let DishonestProver =
out(c, (idP, getSharedKey(idP))).
let DishonestTerroristProver =
(in(c, encryptedMessage);
let message = dec(getSharedKey(idP), encryptedMessage) in
out(c, message))|((in(c, message);
let encryptedMessage = enc(getSharedKey(idP), message) in
out(c, encryptedMessage))|(in(c, message);
(out(c, hash(message)))|(in(c, (x, y, z));
(out(c, threeHash(x, y, z)))|(out(c, idP))))).
query ev:Verified(id).


(* New local process declarations *)

let Verifier_L10 =
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L9 =
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
phase 2;
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L8 =
in(c, idV);
phase 2;
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L7 =
phase 2;
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L6 =
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L5 =
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
phase 1;
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L4 =
in(c, idV);
phase 1;
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L3 =
in(c, idV);
phase 1;
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
phase 2;
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L2 =
phase 1;
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L1 =
phase 1;
in(c, idV);
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
phase 2;
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

let Verifier_L0 =
phase 1;
in(c, idV);
phase 2;
in(c, preCommit);
let message = dec(getSharedKey(idV), preCommit) in
new challenge;
out(c, challenge);
in(c, response);
if response = threeHash(challenge, message, idV) then
0.

(* New remote process declarations *)

let Prover_R1 =
out(c, idP);
new message;
out(c, enc(getSharedKey(idP), message));
in(c, challenge);
out(c, threeHash(challenge, message, idP)).

let Prover_R0 =
out(c, idP);
new message;
out(c, enc(getSharedKey(idP), message));
phase 2;
in(c, challenge);
out(c, threeHash(challenge, message, idP)).

process
(!(Verifier_L0)|((Verifier_L1)|((Verifier_L2)|((Verifier_L3)|((Verifier_L4)|((Verifier_L5)|((Verifier_L6)|((Verifier_L7)|((Verifier_L8)|((Verifier_L9)|((Verifier_L10)|(Verifier))))))))))))|(!new id;
let idP = id in
!(Prover_R0)|(Prover_R1))
