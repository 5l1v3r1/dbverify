theory lookup begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, f/2, fst/1, g/3, pair/2, pk/1, sdec/2, senc/2,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Ver1:
   [ Fr( ~n ) ] --[ Start( ~n ) ]-> [ Out( ~n ), VerifSt1( $V, ~n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov1:
   [ Fr( ~m ), !Shk( $V, $P, k ), In( n ) ]
  --[ Start( ~m ), Action( $P ) ]->
   [ Send( $P, ~m ), ProvSt1( $P, k, ~m, n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver2:
   [ VerifSt1( V, n ), Fr( ~ch ), In( m ) ]
  --[ Send( V, ~ch ) ]->
   [ VerifSt2( V, n, m, ~ch ), Out( ~ch ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProvSt1( P, k, ~m, n ), In( ch ) ]
  --[ Action( P ), End( ~m ) ]->
   [ Send( P, f(ch, g(k, n, ~m)) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver3:
   [ VerifSt2( V, n, m, ch ), !Shk( V, $P, k ), Recv( V, f(ch, g(k, n, m)) )
   ]
  --[ DBSec( V, $P, ch, f(ch, g(k, n, m)) ), End( n ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma complete_trace_exists:
  exists-trace
  "∃ V P m n k ch #t1 #t2 #t3 #t4 #t5 #t6.
    (((((((((((Start( n ) @ #t1) ∧ (Start( m ) @ #t2)) ∧
             (Action( P ) @ #t2)) ∧
            (Send( V, ch ) @ #t3)) ∧
           (Action( P ) @ #t4)) ∧
          (Recv( V, f(ch, g(k, n, m)) ) @ #t5)) ∧
         (DBSec( V, P, ch, f(ch, g(k, n, m)) ) @ #t6)) ∧
        (#t1 < #t2)) ∧
       (#t2 < #t3)) ∧
      (#t3 < #t4)) ∧
     (#t4 < #t5)) ∧
    (#t5 < #t6)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P m n k ch #t1 #t2 #t3 #t4 #t5 #t6.
  (Start( n ) @ #t1) ∧
  (Start( m ) @ #t2) ∧
  (Action( P ) @ #t2) ∧
  (Send( V, ch ) @ #t3) ∧
  (Action( P ) @ #t4) ∧
  (Recv( V, f(ch, g(k, n, m)) ) @ #t5) ∧
  (DBSec( V, P, ch, f(ch, g(k, n, m)) ) @ #t6)
 ∧
  (#t1 < #t2) ∧ (#t2 < #t3) ∧ (#t3 < #t4) ∧ (#t4 < #t5) ∧ (#t5 < #t6)"
*/
simplify
solve( VerifSt1( $Y, n ) ▶₀ #t3 )
  case Ver1
  solve( Send( $X, f(~ch, g(k, n.1, m.1)) ) ▶₀ #t5 )
    case DBAdv_case_1
    solve( VerifSt2( $Y, n.1, m.1, ~ch ) ▶₀ #t6 )
      case Ver2
      solve( !Shk( $Y, $P, k ) ▶₁ #t6 )
        case ShkGen
        solve( Recv( $Y, f(~ch, g(~k, ~n, m)) ) ▶₂ #t6 )
          case DBNet_case_1
          solve( Start( ~n ) @ #t1 )
            case Ver1
            solve( Start( ~m ) @ #t2 )
              case Prov1
              solve( Action( $P ) @ #t2 )
                case Prov1
                solve( Action( $P ) @ #t4 )
                  case DBAdv
                  solve( !KeyComp( $P ) ▶₁ #t4 )
                    case LtkReveal
                    solve( !KU( ~m ) @ #vk )
                      case DBNet
                      solve( !KU( ~ch ) @ #vk.2 )
                        case Ver2
                        solve( !KU( ~n ) @ #vk.3 )
                          case Ver1
                          solve( !KU( f(~ch, g(~k, ~n, ~m)) ) @ #vk.3 )
                            case DBNet
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Shk( $V, $P, k ) ▶₁ #i )
      case ShkGen
      solve( Start( ~m ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~n ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Shk( $V, $P, k ) ▶₁ #i )
      case ShkGen
      solve( Start( ~m ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~n ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov2
  solve( ProvSt1( P, k, ~m, n ) ▶₀ #j )
    case Prov1
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifSt2( V, x, m, ch ) ▶₀ #j )
    case Ver2
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifSt2( V, n, m, chal ) ▶₀ #l )
  case Ver2
  solve( !Shk( $V, $P, k ) ▶₁ #l )
    case ShkGen
    solve( Recv( $V, f(~ch, g(~k, ~n, m)) ) ▶₂ #l )
      case DBNet_case_1
      by contradiction /* from formulas */
    next
      case DBNet_case_2
      by contradiction /* from formulas */
    next
      case DBNet_case_3
      by contradiction /* from formulas */
    next
      case DBNet_case_4
      by contradiction /* from formulas */
    qed
  qed
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifSt2( V, n, m, chal ) ▶₀ #l )
  case Ver2
  solve( !Shk( $V, $P, k ) ▶₁ #l )
    case ShkGen
    solve( Recv( $V, f(~ch, g(~k, ~n, m)) ) ▶₂ #l )
      case DBNet_case_1
      solve( !KU( ~ch ) @ #vk.1 )
        case Ver2
        by contradiction /* cyclic */
      qed
    next
      case DBNet_case_2
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            solve( !KU( ~ch ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case DBNet_case_3
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            solve( !KU( ~ch ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case DBNet_case_4
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            solve( !KU( ~ch ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifSt2( V, n, m, chal ) ▶₀ #l )
  case Ver2
  solve( !Shk( $V, $P, k ) ▶₁ #l )
    case ShkGen
    solve( Recv( $V, f(~ch, g(~k, ~n, m)) ) ▶₂ #l )
      case DBNet_case_1
      solve( !KU( ~ch ) @ #vk.1 )
        case Ver2
        by contradiction /* cyclic */
      qed
    next
      case DBNet_case_2
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case DBNet_case_3
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case DBNet_case_4
      solve( !KU( f(~ch, g(~k, ~n, m)) ) @ #vk.1 )
        case DBNet
        solve( !KU( ~ch ) @ #vk.2 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( g(~k, ~n, m) ) @ #vk.3 )
          case c_g
          solve( !KU( ~k ) @ #vk.4 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifSt2( V, n, m, chal ) ▶₀ #l )
  case Ver2
  solve( !Shk( $V, $P, k ) ▶₁ #l )
    case ShkGen
    solve( Recv( $V, f(~ch, g(~k, ~n, m)) ) ▶₂ #l )
      case DBNet_case_1
      solve( !KeyComp( $P ) @ #j )
        case LtkReveal
        solve( !Ltk( $P, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( ~ch ) @ #vk.1 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $P, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( ~ch ) @ #vk.1 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $P, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( ~ch ) @ #vk.1 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case DBNet_case_2
      solve( !KeyComp( $P ) @ #j )
        case LtkReveal
        solve( !Ltk( $P, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $P, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $P, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case DBNet_case_3
      solve( !KeyComp( $P ) @ #j )
        case LtkReveal
        solve( !Ltk( $P, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $P, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $P, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case DBNet_case_4
      solve( !KeyComp( $P ) @ #j )
        case LtkReveal
        solve( !Ltk( $P, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $P, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $P, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~ch, g(~k.1, ~n, m)) ) @ #vk.1 )
            case DBNet
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~ch ) @ #vk.2 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: lookup.spthy

  complete_trace_exists (exists-trace): verified (16 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (6 steps)
  no_claim_before_fastphase (all-traces): verified (8 steps)
  dbsec (all-traces): verified (30 steps)
  dbsec_on_honest_prover (all-traces): verified (27 steps)
  dbsec_on_compromised_prover (all-traces): verified (71 steps)

==============================================================================

real	0m2.018s
user	0m2.926s
sys	0m0.427s
