theory meadows2 begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/2, pair/2, pk/1, sdec/2, senc/2,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Verifier1:
   [ Fr( ~nv ) ]
  --[ Start( ~nv ) ]->
   [ Out( <$V, 'hello'> ), VerifierState1( $V, ~nv ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover1:
   [ Fr( ~np ), In( <V, 'hello'> ) ]
  --[ Start( ~np ), Action( $P ) ]->
   [ ProverState1( V, $P, ~np ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier2:
   [ VerifierState1( V, nv ) ]
  --[ Send( V, nv ) ]->
   [ Out( nv ), VerifierState2( V, nv ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover2:
   [ ProverState1( V, P, np ), In( nv ) ]
  --[ Action( P ) ]->
   [ Send( P, <nv, h(np, P)> ), ProverState2( V, P, np, nv ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier3:
   [ VerifierState2( V, nv ), Recv( V, <nv, msg> ) ]
  -->
   [ VerifierState3( V, nv, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover3:
   [ ProverState2( V, P, np, nv ), !Shk( V, P, k ) ]
  --[ Action( P ), End( np ) ]->
   [ Send( P, <<P, 'locP', np, nv>, h(k, <P, 'locP', np, nv>)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier4:
   [
   VerifierState3( V, nv, h(np, P) ),
   In( <<P, locP, np, nv>, h(k, <P, locP, np, nv>)> ), !Shk( V, P, k )
   ]
  --[ DBSec( V, P, nv, <nv, h(np, P)> ), End( nv ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma complete_trace_exists:
  exists-trace
  "∃ V P nv np #t1 #t2 #t3 #t4 #t5 #t6 #t7.
    (((((((((((((Start( nv ) @ #t1) ∧ (Start( np ) @ #t2)) ∧
               (Action( P ) @ #t2)) ∧
              (Send( V, nv ) @ #t3)) ∧
             (Action( P ) @ #t4)) ∧
            (Recv( V, <nv, h(np, P)> ) @ #t5)) ∧
           (Action( P ) @ #t6)) ∧
          (DBSec( V, P, nv, <nv, h(np, P)> ) @ #t7)) ∧
         (#t1 < #t2)) ∧
        (#t2 < #t3)) ∧
       (#t3 < #t4)) ∧
      (#t4 < #t5)) ∧
     (#t5 < #t6)) ∧
    (#t6 < #t7)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P nv np #t1 #t2 #t3 #t4 #t5 #t6 #t7.
  (Start( nv ) @ #t1) ∧
  (Start( np ) @ #t2) ∧
  (Action( P ) @ #t2) ∧
  (Send( V, nv ) @ #t3) ∧
  (Action( P ) @ #t4) ∧
  (Recv( V, <nv, h(np, P)> ) @ #t5) ∧
  (Action( P ) @ #t6) ∧
  (DBSec( V, P, nv, <nv, h(np, P)> ) @ #t7)
 ∧
  (#t1 < #t2) ∧
  (#t2 < #t3) ∧
  (#t3 < #t4) ∧
  (#t4 < #t5) ∧
  (#t5 < #t6) ∧
  (#t6 < #t7)"
*/
simplify
solve( VerifierState1( $Y, nv ) ▶₀ #t3 )
  case Verifier1
  solve( Send( $X, <~nv, h(np, P)> ) ▶₀ #t5 )
    case DBAdv_case_1
    solve( VerifierState3( $Y, ~nv, h(np, P) ) ▶₀ #t7 )
      case Verifier3_case_1
      solve( !Shk( $Y, $X.1, k ) ▶₂ #t7 )
        case ShkGen
        solve( Start( ~nv ) @ #t1 )
          case Verifier1
          solve( Start( ~np ) @ #t2 )
            case Prover1
            solve( Action( $X ) @ #t2 )
              case Prover1
              solve( Action( $X ) @ #t4 )
                case DBAdv
                solve( !KeyComp( $X ) ▶₁ #t4 )
                  case LtkReveal
                  solve( Action( $X ) @ #t6 )
                    case Prover1
                    solve( !KU( ~np ) @ #vk.6 )
                      case DBNet
                      solve( !KU( h(~k, <$X.1, locP, ~np, ~nv>) ) @ #vk.9 )
                        case DBNet
                        solve( !KU( ~nv ) @ #vk.8 )
                          case Verifier2
                          solve( !KU( h(~np, $X.1) ) @ #vk.10 )
                            case DBNet
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prover1
    solve( Start( ~np ) @ #j )
      case Prover1
      by contradiction /* cyclic */
    qed
  next
    case Verifier1
    solve( Start( ~nv ) @ #j )
      case Verifier1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prover1
    solve( Start( ~np ) @ #j )
      case Prover1
      by contradiction /* cyclic */
    qed
  next
    case Verifier1
    solve( Start( ~nv ) @ #j )
      case Verifier1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prover3
  solve( ProverState2( V, P, x, nv ) ▶₀ #j )
    case Prover2
    by contradiction /* from formulas */
  qed
next
  case Verifier4
  solve( VerifierState3( V, x, h(np, P) ) ▶₀ #j )
    case Verifier3_case_1
    by contradiction /* from formulas */
  next
    case Verifier3_case_2
    by contradiction /* from formulas */
  next
    case Verifier3_case_3
    by contradiction /* from formulas */
  next
    case Verifier3_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState3( V, chal, h(np, P) ) ▶₀ #l )
  case Verifier3_case_1
  by contradiction /* from formulas */
next
  case Verifier3_case_2
  by contradiction /* from formulas */
next
  case Verifier3_case_3
  by contradiction /* from formulas */
next
  case Verifier3_case_4
  by contradiction /* from formulas */
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState3( V, chal, h(np, P) ) ▶₀ #l )
  case Verifier3_case_1
  solve( !Shk( $Y, $X, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( ~nv ) @ #vk.7 )
      case Verifier2
      by contradiction /* cyclic */
    qed
  qed
next
  case Verifier3_case_2
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( ~nv ) @ #vk.9 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verifier3_case_3
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( ~nv ) @ #vk.9 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verifier3_case_4
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( ~nv ) @ #vk.9 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState3( V, chal, h(np, P) ) ▶₀ #l )
  case Verifier3_case_1
  solve( !Shk( $Y, $X, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( ~nv ) @ #vk.7 )
      case Verifier2
      by contradiction /* cyclic */
    qed
  qed
next
  case Verifier3_case_2
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verifier3_case_3
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verifier3_case_4
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KU( h(~k, <$Y.1, locP, np, ~nv>) ) @ #vk.9 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( !KU( ~nv ) @ #vk.8 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( !KU( ~nv ) @ #vk.8 )
            case Verifier2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( h(~np, $Y.1) ) @ #vk.10 )
              case DBNet
              by contradiction /* cyclic */
            next
              case c_h
              solve( !KU( ~np ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_h
      solve( !KU( ~k ) @ #vk.11 )
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState3( V, chal, h(np, P) ) ▶₀ #l )
  case Verifier3_case_1
  solve( !Shk( $Y, $X, k ) ▶₂ #l )
    case ShkGen
    solve( !KeyComp( $X ) @ #j )
      case LtkReveal
      solve( !Ltk( $X, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealX
      solve( !Shk( $X, $Y, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealY
      solve( !Shk( $X, $X.1, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verifier3_case_2
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KeyComp( $Y.1 ) @ #j )
      case LtkReveal
      solve( !Ltk( $Y, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealX
      solve( !Shk( $Y, $Y.1, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealY
      solve( !Shk( $X, $Y, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verifier3_case_3
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KeyComp( $Y.1 ) @ #j )
      case LtkReveal
      solve( !Ltk( $Y, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealX
      solve( !Shk( $Y, $Y.1, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealY
      solve( !Shk( $X, $Y, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verifier3_case_4
  solve( !Shk( $Y, P, k ) ▶₂ #l )
    case ShkGen
    solve( !KeyComp( $Y.1 ) @ #j )
      case LtkReveal
      solve( !Ltk( $Y, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealX
      solve( !Shk( $Y, $Y.1, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    next
      case ShkRevealY
      solve( !Shk( $X, $Y, k ) ▶₀ #j )
        case ShkGen
        solve( !KU( ~nv ) @ #vk.7 )
          case Verifier2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: meadows2.spthy

  complete_trace_exists (exists-trace): verified (16 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (9 steps)
  no_claim_before_fastphase (all-traces): verified (6 steps)
  dbsec (all-traces): verified (68 steps)
  dbsec_on_honest_prover (all-traces): verified (65 steps)
  dbsec_on_compromised_prover (all-traces): verified (46 steps)

==============================================================================

real	0m4.992s
user	0m9.603s
sys	0m1.409s
