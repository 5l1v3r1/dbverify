/* Implementation of PaySafe protocol*/

theory paysafe

begin

builtins : symmetric-encryption, asymmetric-encryption, signing, multiset 

functions: 	MAC/4,
						AIP/0,
						AFL/0,
						GPO/0

// -------------------- Protocol Rules -------------------- //
rule Card1:	
		[ Fr(~nc), Fr(~ATC) ]
	--[ Start(~nc),
			Action($C) ]->
		[ CardSt1($C, $R, ~ATC, ~nc) ]

rule Reader1:		//fast phase starts
		[ Fr(~UN),
			Fr(~amount) ]
	--[ Start(~UN),
			Send($R, <GPO, ~UN, ~amount>) ]->
		[ Out(<GPO, ~UN, ~amount>),
			ReaderSt1($R, ~UN, ~amount) ]

rule Card2:
		[ CardSt1(C, R, ATC, nc),
			In(<GPO, UN, amount>) ]
	--[ Action(C) ]->
		[ Send(C, <AIP, AFL, ATC, nc>),
			CardSt2(C, R, nc, ATC, UN, amount) ]

rule Reader2:		//fast phase ends
		[ ReaderSt1(R, UN, amount),
			Recv(R, <AIP, AFL, ATC, nc>) ]
	-->
		[ ReaderSt2(R, $C, UN, amount, ATC, nc) ]

rule Card3:
		let KS = senc(ATC, KM)
				AC = MAC(KS, amount, ATC, UN)
				SDAD = sign(<nc, UN, AC>, ltkC) 
		in
		[ CardSt2(C, R, nc, ATC, UN, amount),
			!Ltk(C, ltkC),
			!Shk(R, C, KM) ]
	--[ Action(C),
			End(nc) ]->
		[ Send(C, <SDAD, AC>) ]

rule Reader3:
		let KS = senc(ATC, KM)
				AC = MAC(KS, amount, ATC, UN)
				SDAD_content = <nc, UN, AC>
				verify_sig = verify(SDAD, SDAD_content, pkC)
		in 
		[ ReaderSt2(R, C, UN, amount, ATC, nc),
			In(<SDAD, AC>), 
			!Pk(C, pkC),
			!Shk(R, C, KM) ]
	--[ Eq(verify_sig, true),
			DBSec(R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc>),
			End(UN) ]->
		[ ]

// -------------------- Reachability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex R C nc UN amount ATC #t1 #t2 #t3 #t4 #t5 #t6.

		//initial phase
		Start(nc)@t1 &
		Action(C)@t1 &

		//fast phase
		Start(UN)@t2 &
		Send(R, <GPO, UN, amount>)@t2 &
		Action(C)@t3 &
		Recv(R, <AIP, AFL, ATC, nc>)@t4 &

		//verification phase
		Action(C)@t5 &
		DBSec(R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc>)@t6 &

		t1<t2 & t2<t3 & t3<t4 & t4<t5 & t5<t6
	"
// -------------------- Restrictions --------------------------- //
restriction equals:
	"
	All a b #i. Eq(a,b)@i ==> a=b
	"

//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ----------- Key Generation and Key Compromise -------- //
rule LtkGen:
	[ Fr(~k) ]--[ Once($X) ]->[	!Ltk($X, ~k), !Pk($X, pk(~k)), Out(pk(~k)) ]

rule ShkGen:
	[ Fr(~k) ]--[ Once(<$X, $Y>) ]->[ !Shk($X, $Y, ~k) ]

rule LtkReveal:
	[ !Ltk($X, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealX:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealY:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($Y) ]->[ Out(k), !KeyComp($Y) ]

// -------------- DB Network and Adversary  -------------//
rule DBAdv:
	[ In(m), !KeyComp($X) ]--[ Action($X) ]->[ Send($X, m) ]

rule DBNet:
	[ Send($X, m) ]--[ Action($Y), Recv($Y, m) ]->[ Recv($Y, m), Out(m) ]

// --------------- Sanity check & Restrictions ------------- //

// Each run id is unique
lemma unique_runid:
	"
	All x #i #j. (Start(x)@i & Start(x)@j) ==> #i=#j
	"

// Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x)@j ==> Ex #i. Start(x)@i & (#i=#j|i<j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. (Once(x)@i & Once(x)@j) ==> #i=#j
	"

/*
// Runs can always be completed
restriction completion:
	"
	All run #i. Start(run)@i ==> Ex #j. End(run)@j
	"
*/


// For each DBSec claim there was a fast phase before it
// *	Should this lemma fail, then the results for 
//		the security lemmas might be wrong
lemma no_claim_before_fastphase:
	"
	All V P chal resp #l. DBSec(V, P, chal, resp)@l ==>
		(Ex #i #j. Send(V, chal)@i & Recv(V, resp)@j & i<l & j<l)	|
		(Ex #j. !KeyComp(V)@j)		
	"


// -------------------- Security Lemmas ------------------------ //

// For each trace with a DBSec claim, it is the case
// that either the verifier is compromised, or the prover is not and he
// was active during the fast phase, or the prover is compromised and
// then there was a compromised prover active during the fast phase
lemma dbsec:
	"
	All V P chal resp #l. 
		DBSec(V, P, chal, resp)@l ==>
			(	//EITHER P is active in fast phase
				Ex #i #j #k.
					Send(V, chal)@i &
					Action(P)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) | 
			(	//OR (P is compromised AND there's a compromised 
				//agent active in fast phase)
				Ex P2 #p #p2 #i #j #k.
					!KeyComp(P)@p &
					!KeyComp(P2)@p2 &
					Send(V, chal)@i &
					Action(P2)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is not compromised
// *	If this lemma fails then there's a mafia fraud
lemma dbsec_on_honest_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & not (Ex #j. !KeyComp(P)@j)) ==>
			(Ex #i #j #k.
				Send(V, chal)@i &
				Action(P)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is compromised
// *	If this lemma fails then there's a distance fraud,
//		or a distance hijacking, or both
lemma dbsec_on_compromised_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & Ex #j. !KeyComp(P)@j) ==>
			(Ex P2 #p2 #i #j #k.
				!KeyComp(P2)@p2 &
				Send(V, chal)@i &
				Action(P2)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j) 
	"
end
