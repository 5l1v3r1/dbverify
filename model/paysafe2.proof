theory paysafe2 begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: AFL/0, AIP/0, GPO/0, MAC/4, adec/2, aenc/2, fst/1, pair/2,
           pk/1, sdec/2, senc/2, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

rule (modulo E) Card1:
   [ Fr( ~nc ), Fr( ~ATC ) ]
  --[ Start( ~nc ), Action( $C ) ]->
   [ CardSt1( $C, $R, ~ATC, ~nc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader1:
   [ Fr( ~UN ), Fr( ~amount ) ]
  --[ Start( ~UN ), Send( $R, <GPO, ~UN, ~amount> ) ]->
   [ Out( <GPO, ~UN, ~amount> ), ReaderSt1( $R, ~UN, ~amount ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card2:
   [ CardSt1( C, R, ATC, nc ), In( <GPO, UN, amount> ) ]
  --[ Action( C ) ]->
   [
   Send( C, <AIP, AFL, ATC, nc, UN> ), CardSt2( C, R, nc, ATC, UN, amount )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader2:
   [ ReaderSt1( R, UN, amount ), Recv( R, <AIP, AFL, ATC, nc, UN> ) ]
  -->
   [ ReaderSt2( R, $C, UN, amount, ATC, nc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card3:
   [ CardSt2( C, R, nc, ATC, UN, amount ), !Ltk( C, ltkC ), !Shk( R, C, KM )
   ]
  --[ Action( C ), End( nc ) ]->
   [
   Send( C,
         <sign(<nc, UN, MAC(senc(ATC, KM), amount, ATC, UN)>, ltkC), 
          MAC(senc(ATC, KM), amount, ATC, UN)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader3:
   [
   ReaderSt2( R, C, UN, amount, ATC, nc ),
   In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( C, pkC ),
   !Shk( R, C, KM )
   ]
  --[
  Eq( verify(SDAD, <nc, UN, MAC(senc(ATC, KM), amount, ATC, UN)>, pkC),
      true
  ),
  DBSec( R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc, UN> ), End( UN )
  ]->
   [ ]

  /*
  rule (modulo AC) Reader3:
     [
     ReaderSt2( R, C, UN, amount, ATC, nc ),
     In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( C, pkC ),
     !Shk( R, C, KM )
     ]
    --[
    Eq( z, true ), DBSec( R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc, UN> ),
    End( UN )
    ]->
     [ ]
    variants (modulo AC)
    1. ATC   = ATC.11
       KM    = KM.11
       SDAD  = SDAD.11
       UN    = UN.11
       amount
             = amount.11
       nc    = nc.11
       pkC   = pkC.11
       z     = verify(SDAD.11,
                      <nc.11, UN.11, MAC(senc(ATC.11, KM.11), amount.11, ATC.11, UN.11)>,
                      pkC.11)
    
    2. ATC   = x.11
       KM    = x.15
       SDAD  = sign(<x.12, x.13, MAC(senc(x.11, x.15), x.16, x.11, x.13)>, x.14)
       UN    = x.13
       amount
             = x.16
       nc    = x.12
       pkC   = pk(x.14)
       z     = true
  */

lemma complete_trace_exists:
  exists-trace
  "∃ R C nc UN amount ATC #t1 #t2 #t3 #t4 #t5 #t6.
    ((((((((((((Start( nc ) @ #t1) ∧ (Action( C ) @ #t1)) ∧
              (Start( UN ) @ #t2)) ∧
             (Send( R, <GPO, UN, amount> ) @ #t2)) ∧
            (Action( C ) @ #t3)) ∧
           (Recv( R, <AIP, AFL, ATC, nc, UN> ) @ #t4)) ∧
          (Action( C ) @ #t5)) ∧
         (DBSec( R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc, UN> ) @ #t6)) ∧
        (#t1 < #t2)) ∧
       (#t2 < #t3)) ∧
      (#t3 < #t4)) ∧
     (#t4 < #t5)) ∧
    (#t5 < #t6)"
/*
guarded formula characterizing all satisfying traces:
"∃ R C nc UN amount ATC #t1 #t2 #t3 #t4 #t5 #t6.
  (Start( nc ) @ #t1) ∧
  (Action( C ) @ #t1) ∧
  (Start( UN ) @ #t2) ∧
  (Send( R, <GPO, UN, amount> ) @ #t2) ∧
  (Action( C ) @ #t3) ∧
  (Recv( R, <AIP, AFL, ATC, nc, UN> ) @ #t4) ∧
  (Action( C ) @ #t5) ∧
  (DBSec( R, C, <GPO, UN, amount>, <AIP, AFL, ATC, nc, UN> ) @ #t6)
 ∧
  (#t1 < #t2) ∧ (#t2 < #t3) ∧ (#t3 < #t4) ∧ (#t4 < #t5) ∧ (#t5 < #t6)"
*/
simplify
solve( Send( $X, <AIP, AFL, ATC, nc, ~UN> ) ▶₀ #t4 )
  case Card2
  solve( ReaderSt2( $R, C, ~UN, ~amount, ~ATC, ~nc ) ▶₀ #t6 )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₂ #t6 )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #t6 )
        case ShkGen
        solve( Start( ~nc ) @ #t1 )
          case Card1
          solve( Action( $C ) @ #t1 )
            case Card1
            solve( Start( ~UN ) @ #t2 )
              case Reader1
              solve( Action( $C ) @ #t3 )
                case Card1
                solve( Action( $C ) @ #t5 )
                  case Card1
                  solve( !KU( sign(<~nc, ~UN, MAC(senc(~ATC, ~k), ~amount, ~ATC, ~UN)>,
                                   ~k.1)
                         ) @ #vk.1 )
                    case DBNet
                    solve( !KU( ~UN ) @ #vk.6 )
                      case Reader1
                      solve( !KU( ~amount ) @ #vk.7 )
                        case Reader1
                        solve( !KU( MAC(senc(~ATC, ~k), ~amount, ~ATC, ~UN) ) @ #vk.6 )
                          case DBNet
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Card1
    solve( Start( ~nc ) @ #j )
      case Card1
      by contradiction /* cyclic */
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Card1
    solve( Start( ~nc ) @ #j )
      case Card1
      by contradiction /* cyclic */
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Card3
  solve( CardSt2( C, R, x, ATC, UN, amount ) ▶₀ #j )
    case Card2
    by contradiction /* from formulas */
  qed
next
  case Reader3
  solve( ReaderSt2( R, C, x, amount, ATC, nc ) ▶₀ #j )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( ReaderSt2( V, P, UN, amount, ATC, nc ) ▶₀ #l )
  case Reader2_case_1
  by contradiction /* from formulas */
next
  case Reader2_case_2
  by contradiction /* from formulas */
next
  case Reader2_case_3
  by contradiction /* from formulas */
next
  case Reader2_case_4
  by contradiction /* from formulas */
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( ReaderSt2( V, P, UN, amount, ATC, nc ) ▶₀ #l )
  case Reader2_case_1
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KU( sign(<~nc, ~UN, MAC(senc(~ATC, ~k), ~amount, ~ATC, ~UN)>,
                       ~k.1)
             ) @ #vk.1 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.10 )
          case LtkReveal
          solve( !KU( MAC(senc(~ATC, ~k), ~amount, ~ATC, ~UN) ) @ #vk.3 )
            case c_MAC
            solve( !KU( senc(~ATC, ~k) ) @ #vk.12 )
              case c_senc
              solve( !KU( ~k ) @ #vk.15 )
                case ShkRevealY
                solve( !KU( ~UN ) @ #vk.11 )
                  case Reader1
                  solve( !KU( ~nc ) @ #vk.13 )
                    case DBNet
                    solve( !KU( ~amount ) @ #vk.14 )
                      case Reader1
                      solve( !KU( ~ATC ) @ #vk.15 )
                        case DBNet
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( ReaderSt2( V, P, UN, amount, ATC, nc ) ▶₀ #l )
  case Reader2_case_1
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KU( sign(<~nc, ~UN, MAC(senc(~ATC, ~k), ~amount, ~ATC, ~UN)>,
                       ~k.1)
             ) @ #vk.1 )
        case DBNet
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_1
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.10 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Reader2_case_2
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
             ) @ #vk.1 )
        case DBNet
        solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
          case case_1
          solve( !KU( ~UN ) @ #vk.11 )
            case Reader1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.11 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
              case case_1
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.14 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Reader2_case_3
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
             ) @ #vk.1 )
        case DBNet
        solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
          case case_1
          solve( !KU( ~UN ) @ #vk.11 )
            case Reader1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.11 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
              case case_1
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.14 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Reader2_case_4
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
             ) @ #vk.1 )
        case DBNet
        solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
          case case_1
          solve( !KU( ~UN ) @ #vk.11 )
            case Reader1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.11 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
              case case_1
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~ATC ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.14 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( ReaderSt2( V, P, UN, amount, ATC, nc ) ▶₀ #l )
  case Reader2_case_1
  solve( !Pk( $C, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !Shk( $R, $C, KM ) ▶₃ #l )
      case ShkGen
      solve( !KeyComp( $C ) @ #j )
        case LtkReveal
        solve( !Ltk( $C, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( sign(<~nc, ~UN, MAC(senc(~ATC, ~k.1), ~amount, ~ATC, ~UN)>,
                           ~k)
                 ) @ #vk.1 )
            case c_sign
            solve( !KU( MAC(senc(~ATC, ~k.1), ~amount, ~ATC, ~UN) ) @ #vk.2 )
              case c_MAC
              solve( !KU( senc(~ATC, ~k.1) ) @ #vk.12 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.15 )
                  case ShkRevealY
                  solve( !KU( ~UN ) @ #vk.10 )
                    case Reader1
                    solve( !KU( ~k ) @ #vk.12 )
                      case LtkReveal
                      solve( !KU( ~nc ) @ #vk.13 )
                        case DBNet
                        solve( !KU( ~amount ) @ #vk.14 )
                          case Reader1
                          solve( !KU( ~ATC ) @ #vk.15 )
                            case DBNet
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: paysafe2.spthy

  complete_trace_exists (exists-trace): verified (15 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (9 steps)
  no_claim_before_fastphase (all-traces): verified (6 steps)
  dbsec (all-traces): falsified - found trace (14 steps)
  dbsec_on_honest_prover (all-traces): verified (60 steps)
  dbsec_on_compromised_prover (all-traces): falsified - found trace (16 steps)

==============================================================================

real	0m5.720s
user	0m10.619s
sys	0m1.719s
