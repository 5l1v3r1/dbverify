theory crcs2 begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, f/2, fst/1, h/1, pair/2, pk/1, sign/2, snd/1,
           true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

rule (modulo E) Prov1:
   [ Fr( ~m ), !Ltk( P, ltk ) ]
  --[ Start( ~m ), Action( P ) ]->
   [ Send( P, <h(~m), sign(h(~m), ltk)> ), ProverState1( P, ~m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver1:
   [ Fr( ~n ), In( comm ) ]
  --[ Start( ~n ), Send( $V, ~n ) ]->
   [ Out( ~n ), VerifierState1( $V, ~n, comm ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProverState1( P, m ), In( n ) ]
  --[ Action( P ) ]->
   [ Send( P, f(n, m) ), ProverState2( P, m, n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver2:
   [ VerifierState1( V, n, comm ), Recv( V, resp ) ]
  -->
   [ VerifierState2( V, n, comm, resp ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov3:
   [ ProverState2( P, m, n ), !Ltk( P, ltk ) ]
  --[ Action( P ), End( m ) ]->
   [ Send( P, <<$V, m, n>, sign(<$V, m, n>, ltk)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver3:
   [
   VerifierState2( V, n, <h(m), initial_sig>, f(n, m) ),
   In( <<V, m, n>, final_sig> ), !Pk( P, pkP )
   ]
  --[
  Eq( verify(initial_sig, h(m), pkP), true ),
  Eq( verify(final_sig, <V, m, n>, pkP), true ), DBSec( V, P, n, f(n, m) ),
  End( n )
  ]->
   [ ]

  /*
  rule (modulo AC) Ver3:
     [
     VerifierState2( V, n, <h(m), initial_sig>, f(n, m) ),
     In( <<V, m, n>, final_sig> ), !Pk( P, pkP )
     ]
    --[ Eq( z, true ), Eq( z.1, true ), DBSec( V, P, n, f(n, m) ), End( n )
    ]->
     [ ]
    variants (modulo AC)
    1. V     = V.10
       final_sig
             = final_sig.10
       initial_sig
             = initial_sig.10
       m     = m.10
       n     = n.10
       pkP   = pkP.10
       z     = verify(initial_sig.10, h(m.10), pkP.10)
       z.1   = verify(final_sig.10, <V.10, m.10, n.10>, pkP.10)
    
    2. V     = x.10
       final_sig
             = sign(<x.10, x.11, x.13>, x.12)
       initial_sig
             = initial_sig.14
       m     = x.11
       n     = x.13
       pkP   = pk(x.12)
       z     = verify(initial_sig.14, h(x.11), pk(x.12))
       z.1   = true
    
    3. V     = x.10
       final_sig
             = sign(<x.10, x.11, x.13>, x.12)
       initial_sig
             = sign(h(x.11), x.12)
       m     = x.11
       n     = x.13
       pkP   = pk(x.12)
       z     = true
       z.1   = true
    
    4. V     = V.12
       final_sig
             = final_sig.12
       initial_sig
             = sign(h(x.10), x.11)
       m     = x.10
       n     = n.12
       pkP   = pk(x.11)
       z     = true
       z.1   = verify(final_sig.12, <V.12, x.10, n.12>, pk(x.11))
  */

lemma complete_trace_exists:
  exists-trace
  "∃ V P m n #t1 #t2 #t3 #t4 #t5 #t6.
    ((((((((((((Start( m ) @ #t1) ∧ (Action( P ) @ #t1)) ∧
              (Start( n ) @ #t2)) ∧
             (Send( V, n ) @ #t2)) ∧
            (Action( P ) @ #t3)) ∧
           (Recv( V, f(n, m) ) @ #t4)) ∧
          (Action( P ) @ #t5)) ∧
         (DBSec( V, P, n, f(n, m) ) @ #t6)) ∧
        (#t1 < #t2)) ∧
       (#t2 < #t3)) ∧
      (#t3 < #t4)) ∧
     (#t4 < #t5)) ∧
    (#t5 < #t6)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P m n #t1 #t2 #t3 #t4 #t5 #t6.
  (Start( m ) @ #t1) ∧
  (Action( P ) @ #t1) ∧
  (Start( n ) @ #t2) ∧
  (Send( V, n ) @ #t2) ∧
  (Action( P ) @ #t3) ∧
  (Recv( V, f(n, m) ) @ #t4) ∧
  (Action( P ) @ #t5) ∧
  (DBSec( V, P, n, f(n, m) ) @ #t6)
 ∧
  (#t1 < #t2) ∧ (#t2 < #t3) ∧ (#t3 < #t4) ∧ (#t4 < #t5) ∧ (#t5 < #t6)"
*/
simplify
solve( Send( $X, f(~n, m) ) ▶₀ #t4 )
  case DBAdv_case_1
  solve( VerifierState2( $V, ~n, <h(m), sign(h(m), x)>, f(~n, m) ) ▶₀ #t6 )
    case Ver2_case_1
    solve( !Pk( P, pk(x) ) ▶₂ #t6 )
      case LtkGen
      solve( Start( ~m ) @ #t1 )
        case Prov1
        solve( Action( $X.2 ) @ #t1 )
          case Prov1
          solve( Start( ~n ) @ #t2 )
            case Ver1
            solve( Action( $X ) @ #t3 )
              case DBAdv
              solve( !KeyComp( $X ) ▶₁ #t3 )
                case LtkReveal
                solve( Action( $X ) @ #t5 )
                  case DBAdv
                  solve( !KeyComp( $X ) ▶₁ #t5 )
                    case LtkReveal
                    solve( !KU( ~m ) @ #vk.5 )
                      case DBNet
                      solve( !KU( sign(<$V, ~m, ~n>, ~k) ) @ #vk.7 )
                        case DBNet
                        solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
                          case DBNet
                          solve( !KU( ~n ) @ #vk.8 )
                            case Ver1
                            solve( !KU( f(~n, ~m) ) @ #vk.9 )
                              case DBNet
                              solve( !KU( h(~m) ) @ #vk.10 )
                                case DBNet
                                SOLVED // trace found
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Ltk( P, ltk ) ▶₁ #i )
      case LtkGen
      solve( Start( ~m ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~n ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Ltk( P, ltk ) ▶₁ #i )
      case LtkGen
      solve( Start( ~m ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~n ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov3
  solve( ProverState2( P, x, n ) ▶₀ #j )
    case Prov2
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifierState2( V, x, <h(m), sign(h(m), x.1)>, f(x, m) ) ▶₀ #j )
    case Ver2_case_1
    by contradiction /* from formulas */
  next
    case Ver2_case_2
    by contradiction /* from formulas */
  next
    case Ver2_case_3
    by contradiction /* from formulas */
  next
    case Ver2_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, <h(m), sign(h(m), x)>, f(chal, m)
       ) ▶₀ #l )
  case Ver2_case_1
  by contradiction /* from formulas */
next
  case Ver2_case_2
  by contradiction /* from formulas */
next
  case Ver2_case_3
  by contradiction /* from formulas */
next
  case Ver2_case_4
  by contradiction /* from formulas */
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, <h(m), sign(h(m), x)>, f(chal, m)
       ) ▶₀ #l )
  case Ver2_case_1
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( ~m ) @ #vk.4 )
      case DBNet
      solve( !KU( sign(<$V, ~m, ~n>, ~k) ) @ #vk.6 )
        case c_sign
        solve( !KU( ~k ) @ #vk.10 )
          case LtkReveal
          solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
            case c_sign
            solve( !KU( h(~m) ) @ #vk.10 )
              case DBNet
              solve( !KU( ~n ) @ #vk.10 )
                case Ver1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, <h(m), sign(h(m), x)>, f(chal, m)
       ) ▶₀ #l )
  case Ver2_case_1
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( ~m ) @ #vk.4 )
      case DBNet
      solve( !KU( sign(<$V, ~m, ~n>, ~k) ) @ #vk.6 )
        case DBNet
        solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
          case case_1
          solve( !KU( ~n ) @ #vk.6 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( ~n ) @ #vk.6 )
            case Ver1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k ) @ #vk.10 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( sign(<$V, m, ~n>, ~k) ) @ #vk.6 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( ~n ) @ #vk.6 )
          case Ver1
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( ~n ) @ #vk.6 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~m ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~n ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~k ) @ #vk.11 )
        case LtkReveal
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( sign(<$V, m, ~n>, ~k) ) @ #vk.6 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( ~n ) @ #vk.6 )
          case Ver1
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( ~n ) @ #vk.6 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~m ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~n ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~k ) @ #vk.11 )
        case LtkReveal
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( sign(<$V, m, ~n>, ~k) ) @ #vk.6 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( ~n ) @ #vk.6 )
          case Ver1
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( ~n ) @ #vk.6 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~m ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( !KU( sign(h(~m), ~k) ) @ #vk.10 )
              case DBNet
              solve( !KU( f(~n, ~m) ) @ #vk.9 )
                case DBNet
                by contradiction /* cyclic */
              next
                case c_f
                solve( !KU( ~n ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k ) @ #vk.11 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~k ) @ #vk.11 )
        case LtkReveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, <h(m), sign(h(m), x)>, f(chal, m)
       ) ▶₀ #l )
  case Ver2_case_1
  solve( !Pk( P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KeyComp( $X ) @ #j )
      case LtkReveal
      solve( !Ltk( $X, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( ~m ) @ #vk.4 )
          case DBNet
          solve( !KU( sign(<$V, ~m, ~n>, ~k) ) @ #vk.6 )
            case c_sign
            solve( !KU( sign(h(~m), ~k) ) @ #vk.9 )
              case c_sign
              solve( !KU( h(~m) ) @ #vk.9 )
                case DBNet
                solve( !KU( ~n ) @ #vk.9 )
                  case Ver1
                  solve( !KU( ~k ) @ #vk.10 )
                    case LtkReveal
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: crcs2.spthy

  complete_trace_exists (exists-trace): verified (18 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (9 steps)
  no_claim_before_fastphase (all-traces): verified (6 steps)
  dbsec (all-traces): falsified - found trace (10 steps)
  dbsec_on_honest_prover (all-traces): verified (87 steps)
  dbsec_on_compromised_prover (all-traces): falsified - found trace (12 steps)

==============================================================================

real	8m28.921s
user	16m50.705s
sys	2m35.534s
