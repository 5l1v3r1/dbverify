maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.

theory tread_aenc begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, f/2, fst/1, pair/2, pk/1, sdec/2, senc/2,
           sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

rule (modulo E) Prover1:
   [ Fr( ~a ), Fr( ~b ), !Ltk( $P, ltkP ), !Pk( $V, pkV ) ]
  --[ Start( ~a ), Action( $P ) ]->
   [
   Send( $P, <aenc(<<<~a, ~b>, $P>, sign(<<~a, ~b>, $P>, ltkP)>, pkV), $P>
   ),
   ProverState1( $V, $P, ~a, ~b )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier1:
   [ Fr( ~m ), In( <encrypted, $P> ), !Pk( $P, pkP ), !Ltk( $V, ltkV ) ]
  --[
  Start( ~m ), Eq( snd(fst(adec(encrypted, ltkV))), $P ),
  Eq( verify(snd(adec(encrypted, ltkV)), fst(adec(encrypted, ltkV)), pkP),
      true
  )
  ]->
   [
   Out( ~m ),
   VerifierState1( $V, $P, ~m, fst(fst(fst(adec(encrypted, ltkV)))),
                   snd(fst(fst(adec(encrypted, ltkV))))
   )
   ]

  /*
  rule (modulo AC) Verifier1:
     [ Fr( ~m ), In( <encrypted, $P> ), !Pk( $P, pkP ), !Ltk( $V, ltkV ) ]
    --[ Start( ~m ), Eq( z.2, $P ), Eq( z.3, true ) ]->
     [ Out( ~m ), VerifierState1( $V, $P, ~m, z, z.1 ) ]
    variants (modulo AC)
    1. encrypted
             = encrypted.11
       ltkV  = ltkV.11
       pkP   = pkP.11
       z     = fst(fst(fst(adec(encrypted.11, ltkV.11))))
       z.1   = snd(fst(fst(adec(encrypted.11, ltkV.11))))
       z.2   = snd(fst(adec(encrypted.11, ltkV.11)))
       z.3   = verify(snd(adec(encrypted.11, ltkV.11)),
                      fst(adec(encrypted.11, ltkV.11)), pkP.11)
    
    2. encrypted
             = aenc(x.11, pk(x.12))
       ltkV  = x.12
       pkP   = pkP.13
       z     = fst(fst(fst(x.11)))
       z.1   = snd(fst(fst(x.11)))
       z.2   = snd(fst(x.11))
       z.3   = verify(snd(x.11), fst(x.11), pkP.13)
    
    3. encrypted
             = aenc(<x.11, x.13>, pk(x.12))
       ltkV  = x.12
       pkP   = pkP.14
       z     = fst(fst(x.11))
       z.1   = snd(fst(x.11))
       z.2   = snd(x.11)
       z.3   = verify(x.13, x.11, pkP.14)
    
    4. encrypted
             = aenc(<x.11, sign(x.11, x.13)>, pk(x.12))
       ltkV  = x.12
       pkP   = pk(x.13)
       z     = fst(fst(x.11))
       z.1   = snd(fst(x.11))
       z.2   = snd(x.11)
       z.3   = true
    
    5. encrypted
             = aenc(<<x.11, x.14>, x.13>, pk(x.12))
       ltkV  = x.12
       pkP   = pkP.15
       z     = fst(x.11)
       z.1   = snd(x.11)
       z.2   = x.14
       z.3   = verify(x.13, <x.11, x.14>, pkP.15)
    
    6. encrypted
             = aenc(<<x.11, x.14>, sign(<x.11, x.14>, x.13)>, pk(x.12))
       ltkV  = x.12
       pkP   = pk(x.13)
       z     = fst(x.11)
       z.1   = snd(x.11)
       z.2   = x.14
       z.3   = true
    
    7. encrypted
             = aenc(<<<x.11, x.15>, x.14>, x.13>, pk(x.12))
       ltkV  = x.12
       pkP   = pkP.16
       z     = x.11
       z.1   = x.15
       z.2   = x.14
       z.3   = verify(x.13, <<x.11, x.15>, x.14>, pkP.16)
    
    8. encrypted
             = aenc(<<<x.11, x.15>, x.14>, sign(<<x.11, x.15>, x.14>, x.13)>,
                    pk(x.12))
       ltkV  = x.12
       pkP   = pk(x.13)
       z     = x.11
       z.1   = x.15
       z.2   = x.14
       z.3   = true
  */

rule (modulo E) Prover2:
   [ ProverState1( V, P, a, b ), In( m ) ]
  --[ Action( P ) ]->
   [ ProverState2( V, P, a, b, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier2:
   [ VerifierState1( V, P, m, a, b ), Fr( ~c ) ]
  --[ Send( V, ~c ) ]->
   [ Out( ~c ), VerifierState2( V, P, m, a, b, ~c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover3:
   [ ProverState2( V, P, a, b, m ), In( c ) ]
  --[ Action( P ), End( a ) ]->
   [ Send( P, f(c, <a, (b⊕m)>) ) ]

  /*
  rule (modulo AC) Prover3:
     [ ProverState2( V, P, a, b, m ), In( c ) ]
    --[ Action( P ), End( a ) ]->
     [ Send( P, f(c, <a, z>) ) ]
    variants (modulo AC)
    1. b     = b.8
       m     = m.8
       z     = (b.8⊕m.8)
    
    2. b     = b.8
       m     = zero
       z     = b.8
    
    3. b     = x.8
       m     = x.8
       z     = zero
    
    4. b     = x.8
       m     = (x.8⊕x.9)
       z     = x.9
    
    5. b     = zero
       m     = m.8
       z     = m.8
    
    6. b     = (x.8⊕x.9)
       m     = x.8
       z     = x.9
    
    7. b     = (x.8⊕x.9)
       m     = (x.9⊕x.10)
       z     = (x.8⊕x.10)
  */

rule (modulo E) Verifier3:
   [ VerifierState2( V, P, m, a, b, c ), Recv( V, f(c, <a, (b⊕m)>) ) ]
  --[ DBSec( V, P, c, f(c, <a, (b⊕m)>) ), End( m ) ]->
   [ ]

  /*
  rule (modulo AC) Verifier3:
     [ VerifierState2( V, P, m, a, b, c ), Recv( V, f(c, <a, z>) ) ]
    --[ DBSec( V, P, c, f(c, <a, z>) ), End( m ) ]->
     [ ]
    variants (modulo AC)
    1. b     = b.8
       m     = m.8
       z     = (b.8⊕m.8)
    
    2. b     = b.8
       m     = zero
       z     = b.8
    
    3. b     = x.8
       m     = x.8
       z     = zero
    
    4. b     = x.8
       m     = (x.8⊕x.9)
       z     = x.9
    
    5. b     = zero
       m     = m.8
       z     = m.8
    
    6. b     = (x.8⊕x.9)
       m     = x.8
       z     = x.9
    
    7. b     = (x.8⊕x.9)
       m     = (x.9⊕x.10)
       z     = (x.8⊕x.10)
  */

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

lemma complete_trace_exists:
  exists-trace
  "∃ V P a bXORm c m #t1 #t2 #t3 #t4 #t5 #t6 #t7.
    (((((((((((((Start( a ) @ #t1) ∧ (Action( P ) @ #t1)) ∧
               (Start( m ) @ #t2)) ∧
              (Action( P ) @ #t3)) ∧
             (Send( V, c ) @ #t4)) ∧
            (Action( P ) @ #t5)) ∧
           (Recv( V, f(c, <a, bXORm>) ) @ #t6)) ∧
          (DBSec( V, P, c, f(c, <a, bXORm>) ) @ #t7)) ∧
         (#t1 < #t2)) ∧
        (#t2 < #t3)) ∧
       (#t3 < #t4)) ∧
      (#t4 < #t5)) ∧
     (#t5 < #t6)) ∧
    (#t6 < #t7)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P a bXORm c m #t1 #t2 #t3 #t4 #t5 #t6 #t7.
  (Start( a ) @ #t1) ∧
  (Action( P ) @ #t1) ∧
  (Start( m ) @ #t2) ∧
  (Action( P ) @ #t3) ∧
  (Send( V, c ) @ #t4) ∧
  (Action( P ) @ #t5) ∧
  (Recv( V, f(c, <a, bXORm>) ) @ #t6) ∧
  (DBSec( V, P, c, f(c, <a, bXORm>) ) @ #t7)
 ∧
  (#t1 < #t2) ∧
  (#t2 < #t3) ∧
  (#t3 < #t4) ∧
  (#t4 < #t5) ∧
  (#t5 < #t6) ∧
  (#t6 < #t7)"
*/
simplify
solve( VerifierState1( $Y, P, m, a, b ) ▶₀ #t4 )
  case Verifier1
  solve( Send( $X, f(~c, <a.1, bXORm>) ) ▶₀ #t6 )
    case DBAdv_case_1
    solve( VerifierState2( $Y, P.1, m.1, a.1, b.1, ~c ) ▶₀ #t7 )
      case Verifier2
      solve( Recv( $Y, f(~c, <a, bXORm>) ) ▶₁ #t7 )
        case DBNet_case_1
        solve( Start( ~a ) @ #t1 )
          case Prover1
          solve( Action( $P ) @ #t1 )
            case Prover1
            solve( Start( m.2 ) @ #t2 )
              case Prover1
              solve( !Ltk( $P.1, ltkP ) ▶₂ #t2 )
                case LtkGen
                solve( !Pk( $V.1, pkV ) ▶₃ #t2 )
                  case LtkGen
                  solve( Action( $P ) @ #t3 )
                    case DBAdv
                    solve( !KeyComp( $P ) ▶₁ #t3 )
                      case LtkReveal
                      solve( Action( $P ) @ #t5 )
                        case DBAdv
                        solve( !KeyComp( $P ) ▶₁ #t5 )
                          case LtkReveal
                          solve( !KU( aenc(<<<~a, b.2>, $P>, sign(<<~a, b.2>, $P>, ~k)>, pk(~k.4))
                                 ) @ #vk.1 )
                            case DBNet
                            solve( splitEqs(2) )
                              case split
                              solve( !KU( ~c ) @ #vk.4 )
                                case Verifier2
                                solve( !KU( ~m.1 ) @ #vk.5 )
                                  case Verifier1
                                  solve( !KU( f(~c, <~a, (~b⊕~m.1)>) ) @ #vk.5 )
                                    case DBNet
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Ltk( $P, ltkP ) ▶₂ #i )
      case LtkGen
      solve( !Pk( $V, pkV ) ▶₃ #i )
        case LtkGen
        solve( Start( ~a ) @ #j )
          case Prover1
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verifier1
    solve( !Pk( $P, pk(x.1) ) ▶₂ #i )
      case LtkGen
      solve( !Ltk( $V, ltkV ) ▶₃ #i )
        case LtkGen
        solve( Start( ~m ) @ #j )
          case Verifier1
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Ltk( $P, ltkP ) ▶₂ #i )
      case LtkGen
      solve( !Pk( $V, pkV ) ▶₃ #i )
        case LtkGen
        solve( Start( ~a ) @ #j )
          case Prover1
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verifier1
    solve( !Pk( $P, pk(x.1) ) ▶₂ #i )
      case LtkGen
      solve( !Ltk( $V, ltkV ) ▶₃ #i )
        case LtkGen
        solve( Start( ~m ) @ #j )
          case Verifier1
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prover3
  solve( ProverState2( V, P, x, b, m ) ▶₀ #j )
    case Prover2
    by contradiction /* from formulas */
  qed
next
  case Verifier3
  solve( VerifierState2( V, P, x, a, b, c ) ▶₀ #j )
    case Verifier2
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, P, m, a, b, chal ) ▶₀ #l )
  case Verifier2
  solve( Recv( $V, f(~c, <a, z>) ) ▶₁ #l )
    case DBNet_case_1
    by contradiction /* from formulas */
  next
    case DBNet_case_2
    by contradiction /* from formulas */
  next
    case DBNet_case_3
    by contradiction /* from formulas */
  next
    case DBNet_case_4
    by contradiction /* from formulas */
  qed
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, P, m, a, b, chal ) ▶₀ #l )
  case Verifier2
  solve( Recv( $V, f(~c, <a, z>) ) ▶₁ #l )
    case DBNet_case_1
    solve( !KU( aenc(<<<~a, b>, $P>, sign(<<~a, b>, $P>, ~k)>, pk(~k.1))
           ) @ #vk.1 )
      case c_aenc
      solve( !KU( ~a ) @ #vk.9 )
        case DBNet
        solve( !KU( ~k.3 ) @ #vk.12 )
          case LtkReveal
          solve( !KU( sign(<<~a, b>, $P>, ~k) ) @ #vk.12 )
            case c_sign
            solve( !KU( ~k ) @ #vk.13 )
              case LtkReveal
              solve( splitEqs(0) )
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~c ) @ #vk.10 )
                    case Verifier2
                    solve( !KU( ~m ) @ #vk.11 )
                      case Verifier1
                      solve( !KU( ~b ) @ #vk.13 )
                        case DBNet
                        solve( !KU( pk(~k.1) ) @ #vk.13 )
                          case LtkGen
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, P, m, a, b, chal ) ▶₀ #l )
  case Verifier2
  solve( Recv( $V, f(~c, <a, z>) ) ▶₁ #l )
    case DBNet_case_2
    solve( splitEqs(1) )
      case split_case_1
      solve( !KU( aenc(<<<a, b>, $P>, sign(<<a, b>, $P>, ~k)>, pk(~k.1))
             ) @ #vk.1 )
        case c_aenc
        solve( !KU( sign(<<a, b>, $P>, ~k) ) @ #vk.10 )
          case DBNet
          solve( !KU( ~k.3 ) @ #vk.11 )
            case LtkReveal
            solve( splitEqs(0) )
              case split
              solve( !KU( f(~c, <~a, (~b⊕~m)>) ) @ #vk.7 )
                case c_f
                solve( !KU( (~b⊕~m) ) @ #vk.14 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.11 )
                    case DBNet
                    solve( !KU( ~b ) @ #vk.13 )
                      case DBNet
                      solve( !KU( ~c ) @ #vk.14 )
                        case Verifier2
                        solve( !KU( ~m ) @ #vk.15 )
                          case Verifier1
                          solve( !KU( pk(~k.1) ) @ #vk.15 )
                            case LtkGen
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, P, m, a, b, chal ) ▶₀ #l )
  case Verifier2
  solve( Recv( $V, f(~c, <a, z>) ) ▶₁ #l )
    case DBNet_case_1
    solve( !KeyComp( $P ) @ #j )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( aenc(<<<~a, b>, $P>, sign(<<~a, b>, $P>, ~k)>, pk(~k.1))
               ) @ #vk.1 )
          case c_aenc
          solve( !KU( ~a ) @ #vk.9 )
            case DBNet
            solve( !KU( ~k.3 ) @ #vk.12 )
              case LtkReveal
              solve( !KU( sign(<<~a, b>, $P>, ~k) ) @ #vk.12 )
                case c_sign
                solve( splitEqs(0) )
                  case split_case_2
                  solve( splitEqs(2) )
                    case split_case_1
                    solve( !KU( ~c ) @ #vk.9 )
                      case Verifier2
                      solve( !KU( ~k ) @ #vk.13 )
                        case LtkReveal
                        solve( !KU( ~m ) @ #vk.11 )
                          case Verifier1
                          solve( !KU( ~b ) @ #vk.13 )
                            case DBNet
                            solve( !KU( pk(~k.1) ) @ #vk.13 )
                              case LtkGen
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: tread_aenc.spthy

  complete_trace_exists (exists-trace): verified (20 steps)
  unique_runid (all-traces): verified (20 steps)
  end_after_start (all-traces): verified (6 steps)
  no_claim_before_fastphase (all-traces): verified (7 steps)
  dbsec (all-traces): falsified - found trace (15 steps)
  dbsec_on_honest_prover (all-traces): falsified - found trace (16 steps)
  dbsec_on_compromised_prover (all-traces): falsified - found trace (17 steps)

==============================================================================
