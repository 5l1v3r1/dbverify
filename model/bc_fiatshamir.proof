theory bc_fiatshamir begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, check/2, fst/1, mul/2, pair/2, pk/1, pow/2,
           sdec/2, senc/2, snd/1, sq/1, true/0
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check(sq(mul(pow(x, y), r)), mul(pow(pk(x), y), sq(r))) = true,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Prov1:
   [ Fr( ~r ), Fr( ~ck ), Fr( ~b ) ]
  --[ Start( ~b ), Action( $P ) ]->
   [ Send( $P, <sq(~r), senc(~b, ~ck)> ), ProverState1( $P, ~r, ~b, ~ck ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver1:
   [ In( <r_squared, sealed_commit> ), Fr( ~a ) ]
  --[ Start( ~a ), Send( $V, ~a ) ]->
   [ Out( ~a ), VerifierState1( $V, r_squared, sealed_commit, ~a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProverState1( P, r, b, ck ), In( a ) ]
  --[ Action( P ) ]->
   [ Send( P, b ), ProverState2( P, r, b, ck, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver2:
   [ VerifierState1( V, r_squared, sealed_commit, a ), Recv( V, b ) ]
  -->
   [ VerifierState2( V, r_squared, sealed_commit, a, b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov3:
   [ ProverState2( P, r, b, ck, a ), !Ltk( P, x ) ]
  --[ Action( P ), End( b ) ]->
   [ Send( P, <ck, mul(pow(x, (a⊕b)), r)> ) ]

  /*
  rule (modulo AC) Prov3:
     [ ProverState2( P, r, b, ck, a ), !Ltk( P, x ) ]
    --[ Action( P ), End( b ) ]->
     [ Send( P, <ck, mul(pow(x, z), r)> ) ]
    variants (modulo AC)
    1. a     = a.8
       b     = b.8
       z     = (a.8⊕b.8)
    
    2. a     = a.8
       b     = zero
       z     = a.8
    
    3. a     = x.8
       b     = x.8
       z     = zero
    
    4. a     = x.8
       b     = (x.8⊕x.9)
       z     = x.9
    
    5. a     = zero
       b     = b.8
       z     = b.8
    
    6. a     = (x.8⊕x.9)
       b     = x.8
       z     = x.9
    
    7. a     = (x.8⊕x.9)
       b     = (x.9⊕x.10)
       z     = (x.8⊕x.10)
  */

rule (modulo E) Ver3:
   [
   In( <ck, s> ), VerifierState2( V, r_squared, senc(b, ck), a, b ),
   !Pk( $P, pkP )
   ]
  --[
  Eq( check(sq(s), mul(pow(pkP, (a⊕b)), r_squared)), true ),
  DBSec( V, $P, a, b ), End( a )
  ]->
   [ ]

  /*
  rule (modulo AC) Ver3:
     [
     In( <ck, s> ), VerifierState2( V, r_squared, senc(b, ck), a, b ),
     !Pk( $P, pkP )
     ]
    --[ Eq( z, true ), DBSec( V, $P, a, b ), End( a ) ]->
     [ ]
    variants (modulo AC)
     1. a     = a.10
        b     = b.10
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, (a.10⊕b.10)), r_squared.10))
    
     2. a     = a.10
        b     = zero
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, a.10), r_squared.10))
    
     3. a     = x.10
        b     = x.10
        pkP   = pkP.11
        r_squared
              = r_squared.11
        s     = s.11
        z     = check(sq(s.11), mul(pow(pkP.11, zero), r_squared.11))
    
     4. a     = x.10
        b     = x.10
        pkP   = pk(x.11)
        r_squared
              = sq(x.12)
        s     = mul(pow(x.11, zero), x.12)
        z     = true
    
     5. a     = x.10
        b     = x.13
        pkP   = pk(x.11)
        r_squared
              = sq(x.12)
        s     = mul(pow(x.11, (x.10⊕x.13)), x.12)
        z     = true
    
     6. a     = x.10
        b     = zero
        pkP   = pk(x.11)
        r_squared
              = sq(x.12)
        s     = mul(pow(x.11, x.10), x.12)
        z     = true
    
     7. a     = x.10
        b     = (x.10⊕x.11)
        pkP   = pkP.12
        r_squared
              = r_squared.12
        s     = s.12
        z     = check(sq(s.12), mul(pow(pkP.12, x.11), r_squared.12))
    
     8. a     = x.10
        b     = (x.10⊕x.13)
        pkP   = pk(x.11)
        r_squared
              = sq(x.12)
        s     = mul(pow(x.11, x.13), x.12)
        z     = true
    
     9. a     = zero
        b     = b.10
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, b.10), r_squared.10))
    
    10. a     = zero
        b     = x.12
        pkP   = pk(x.10)
        r_squared
              = sq(x.11)
        s     = mul(pow(x.10, x.12), x.11)
        z     = true
    
    11. a     = (x.10⊕x.11)
        b     = x.10
        pkP   = pkP.12
        r_squared
              = r_squared.12
        s     = s.12
        z     = check(sq(s.12), mul(pow(pkP.12, x.11), r_squared.12))
    
    12. a     = (x.10⊕x.11)
        b     = (x.11⊕x.12)
        pkP   = pkP.13
        r_squared
              = r_squared.13
        s     = s.13
        z     = check(sq(s.13), mul(pow(pkP.13, (x.10⊕x.12)), r_squared.13))
    
    13. a     = (x.12⊕x.13)
        b     = x.12
        pkP   = pk(x.10)
        r_squared
              = sq(x.11)
        s     = mul(pow(x.10, x.13), x.11)
        z     = true
    
    14. a     = (x.12⊕x.13)
        b     = (x.12⊕x.14)
        pkP   = pk(x.10)
        r_squared
              = sq(x.11)
        s     = mul(pow(x.10, (x.13⊕x.14)), x.11)
        z     = true
  */

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

lemma complete_trace_exists:
  exists-trace
  "∃ V P a b #t1 #t2 #t3 #t4 #t5 #t6.
    ((((((((((((((Start( b ) @ #t1) ∧ (Action( P ) @ #t1)) ∧
                (Start( a ) @ #t2)) ∧
               (Send( V, a ) @ #t2)) ∧
              (Action( P ) @ #t3)) ∧
             (Recv( V, b ) @ #t4)) ∧
            (Action( P ) @ #t5)) ∧
           (End( b ) @ #t5)) ∧
          (DBSec( V, P, a, b ) @ #t6)) ∧
         (End( a ) @ #t6)) ∧
        (#t1 < #t2)) ∧
       (#t2 < #t3)) ∧
      (#t3 < #t4)) ∧
     (#t4 < #t5)) ∧
    (#t5 < #t6)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P a b #t1 #t2 #t3 #t4 #t5 #t6.
  (Start( b ) @ #t1) ∧
  (Action( P ) @ #t1) ∧
  (Start( a ) @ #t2) ∧
  (Send( V, a ) @ #t2) ∧
  (Action( P ) @ #t3) ∧
  (Recv( V, b ) @ #t4) ∧
  (Action( P ) @ #t5) ∧
  (End( b ) @ #t5) ∧
  (DBSec( V, P, a, b ) @ #t6) ∧
  (End( a ) @ #t6)
 ∧
  (#t1 < #t2) ∧ (#t2 < #t3) ∧ (#t3 < #t4) ∧ (#t4 < #t5) ∧ (#t5 < #t6)"
*/
simplify
solve( Send( $X, b ) ▶₀ #t4 )
  case DBAdv_case_1
  solve( VerifierState2( $V, sq(x.2), senc(b, ck), ~a, b ) ▶₁ #t6 )
    case Ver2_case_2
    solve( !Pk( $P, pk(x.1) ) ▶₂ #t6 )
      case LtkGen
      solve( Start( ~b ) @ #t1 )
        case Prov1
        solve( Action( $P ) @ #t1 )
          case Prov1
          solve( Start( ~a ) @ #t2 )
            case Ver1
            solve( Action( $P ) @ #t3 )
              case DBAdv
              solve( !KeyComp( $P ) ▶₁ #t3 )
                case LtkReveal
                solve( Action( $P ) @ #t5 )
                  case Prov3
                  solve( ProverState2( $P, r.1, b.1, ck.2, a.1 ) ▶₀ #t5 )
                    case Prov2
                    solve( !Ltk( $P, x.1 ) ▶₁ #t5 )
                      case LtkGen
                      solve( End( ~b ) @ #t5 )
                        case Prov3
                        solve( End( ~a ) @ #t6 )
                          case Ver3
                          solve( splitEqs(2) )
                            case split
                            solve( !KU( mul(pow(~k, (~a⊕~b)), x) ) @ #vk.5 )
                              case DBNet
                              solve( splitEqs(7) )
                                case split_case_1
                                solve( !KU( sq(~r) ) @ #vk.3 )
                                  case DBNet
                                  solve( !KU( senc(~b, ck.1) ) @ #vk.4 )
                                    case DBNet
                                    solve( !KU( ~b ) @ #vk.6 )
                                      case DBNet_case_2
                                      solve( !KU( ~a ) @ #vk.7 )
                                        case Ver1
                                        solve( !KU( ~ck ) @ #vk.7 )
                                          case DBNet
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~b ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~a ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~b ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~a ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov3
  solve( ProverState2( P, r, x, ck, a ) ▶₀ #j )
    case Prov2
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifierState2( V, sq(x.2), senc(b, ck), x.3, b ) ▶₁ #j )
    case Ver2_case_1
    by contradiction /* from formulas */
  next
    case Ver2_case_2
    by contradiction /* from formulas */
  next
    case Ver2_case_3
    by contradiction /* from formulas */
  next
    case Ver2_case_4
    by contradiction /* from formulas */
  next
    case Ver2_case_5
    by contradiction /* from formulas */
  next
    case Ver2_case_6
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, ck), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  by contradiction /* from formulas */
next
  case Ver2_case_2
  by contradiction /* from formulas */
next
  case Ver2_case_3
  by contradiction /* from formulas */
next
  case Ver2_case_4
  by contradiction /* from formulas */
next
  case Ver2_case_5
  by contradiction /* from formulas */
next
  case Ver2_case_6
  by contradiction /* from formulas */
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, ck), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)), x) ) @ #vk.2 )
      case c_mul
      solve( !KU( pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)) ) @ #vk.6 )
        case c_pow
        solve( !KU( ~k ) @ #vk.8 )
          case LtkReveal
          solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.7 )
            case c_senc
            solve( !KU( (~a⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.9 )
              case c_xor
              solve( !KU( sq(x) ) @ #vk.8 )
                case c_sq
                solve( !KU( ~a ) @ #vk.13 )
                  case Ver1
                  solve( !KU( sq(~r) ) @ #vk.12 )
                    case DBNet
                    solve( !KU( senc(~b, ~ck.1) ) @ #vk.13 )
                      case DBNet
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, ck), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)), x) ) @ #vk.2 )
      case DBNet
      solve( (¬(#vr.1 < #vr.6))  ∥ (¬(#vr.6 < #vr.2)) )
        case case_1
        solve( splitEqs(1) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBNet
            solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( ~b.1 ) @ #vk.11 )
                  case DBNet_case_1
                  solve( !KU( ~ck.2 ) @ #vk.12 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.11 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                  case c_xor
                  solve( !KU( ~b.1 ) @ #vk.11 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.12 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.12 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.3 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.12 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.7 )
          qed
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_1
          solve( splitEqs(1) )
            case split
            solve( !KU( sq(~r.1) ) @ #vk.4 )
              case DBNet
              solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( ~b.1 ) @ #vk.11 )
                    case DBNet_case_1
                    solve( !KU( ~ck.2 ) @ #vk.12 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.11 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                    case c_xor
                    solve( !KU( ~b.1 ) @ #vk.11 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.12 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.12 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.12 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r.1 ) @ #vk.7 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( splitEqs(1) )
              case split
              solve( !KU( sq(~r.1) ) @ #vk.4 )
                case DBNet
                solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( ~b.1 ) @ #vk.11 )
                      case DBNet_case_1
                      solve( !KU( ~ck.2 ) @ #vk.12 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.10 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.12 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.13 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.12 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.11 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.13 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.12 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.12 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_sq
                by solve( !KU( ~r.1 ) @ #vk.7 )
              qed
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( sq(~r.1) ) @ #vk.4 )
                case DBNet
                solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( ~b.1 ) @ #vk.11 )
                      case DBNet_case_1
                      solve( !KU( ~ck.2 ) @ #vk.12 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.10 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.12 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.13 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.12 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.11 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.13 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.12 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.17, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~ck.1)>) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.12 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.12 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_sq
                by solve( !KU( ~r.1 ) @ #vk.7 )
              qed
            qed
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)) ) @ #vk.6 )
        case c_pow
        solve( !KU( ~k ) @ #vk.8 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split
      solve( !KU( mul(pow(~k, (~a⊕~b)), x) ) @ #vk.2 )
        case DBNet
        solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
          case case_1
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( ~a ) @ #vk.6 )
              case Ver1
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( !KU( senc(~b, ck) ) @ #vk.5 )
                case DBNet
                solve( !KU( ~ck ) @ #vk.5 )
                  case DBNet
                  solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~a ) @ #vk.11 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.19 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~b.1 ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.19 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~b.1 ) @ #vk.10 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.13 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.10 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~b.1 ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.11 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.13 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( ~a ) @ #vk.6 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case split_case_2
              solve( !KU( sq(~r) ) @ #vk.4 )
                case DBNet
                solve( !KU( senc(~b, ck) ) @ #vk.5 )
                  case DBNet
                  solve( !KU( ~ck ) @ #vk.5 )
                    case DBNet
                    solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.10 )
                          case DBNet_case_1
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.19 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~b.1 ) @ #vk.8 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.19 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~a ) @ #vk.11 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.13 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~b.1 ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.11 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.13 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_sq
                by solve( !KU( ~r ) @ #vk.8 )
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
              case case_1
              solve( splitEqs(2) )
                case split_case_1
                by contradiction /* cyclic */
              next
                case split_case_2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBNet
                  solve( !KU( senc(~b, ck) ) @ #vk.5 )
                    case DBNet
                    solve( !KU( ~ck ) @ #vk.5 )
                      case DBNet
                      solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBNet_case_1
                            solve( !KU( ~ck.1 ) @ #vk.12 )
                              case DBNet
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBNet_case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                            case DBNet
                            solve( Send( $X.1, t ) ▶₀ #vr.19 )
                              case DBAdv_case_1
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_2
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( (~b⊕~b.1) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBNet_case_1
                            solve( !KU( ~ck.1 ) @ #vk.12 )
                              case DBNet
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBNet_case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.5 )
                            case DBNet
                            solve( Send( $X.1, t ) ▶₀ #vr.19 )
                              case DBAdv_case_1
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_2
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( ~b.1 ) @ #vk.8 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.10 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.19 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.10 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.12 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( (~b⊕~b.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.11 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.12 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~b.1 ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.13 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case case_2
              solve( splitEqs(2) )
                case split_case_1
                by contradiction /* cyclic */
              next
                case split_case_2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBNet
                  solve( !KU( senc(~b, ck) ) @ #vk.5 )
                    case DBNet
                    solve( !KU( ~ck ) @ #vk.5 )
                      case DBNet
                      solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBNet_case_1
                            solve( !KU( ~ck.1 ) @ #vk.12 )
                              case DBNet
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBNet_case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                            case DBNet
                            solve( Send( $X.1, t ) ▶₀ #vr.19 )
                              case DBAdv_case_1
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_2
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( (~b⊕~b.1) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBNet_case_1
                            solve( !KU( ~ck.1 ) @ #vk.12 )
                              case DBNet
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBNet_case_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.5 )
                            case DBNet
                            solve( Send( $X.1, t ) ▶₀ #vr.19 )
                              case DBAdv_case_1
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_2
                              by contradiction /* cyclic */
                            next
                              case DBAdv_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( ~b.1 ) @ #vk.8 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.10 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.19 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.19 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.10 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.12 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( (~b⊕~b.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.11 )
                          case DBNet_case_1
                          solve( !KU( ~ck.1 ) @ #vk.12 )
                            case DBNet
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBNet_case_2
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~b.1 ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.13 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            qed
          qed
        qed
      next
        case c_mul
        solve( !KU( pow(~k, (~a⊕~b)) ) @ #vk.7 )
          case c_pow
          solve( !KU( ~k ) @ #vk.9 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, (~a⊕<~ck.1, mul(pow(~k.1, z), ~r)>)), x)
           ) @ #vk.2 )
      case DBNet
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( splitEqs(2) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBNet
            solve( !KU( senc(<~ck.1, mul(pow(~k.1, z), ~r)>, ck) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.12 )
                  case DBNet_case_1
                  solve( !KU( ~ck.2 ) @ #vk.13 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.12 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.11 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.12 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.13 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.8 )
          qed
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
          case case_1
          solve( splitEqs(2) )
            case split
            solve( !KU( sq(~r.1) ) @ #vk.4 )
              case DBNet
              solve( !KU( senc(<~ck.1, mul(pow(~k.1, z), ~r)>, ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( ~b ) @ #vk.12 )
                    case DBNet_case_1
                    solve( !KU( ~ck.2 ) @ #vk.13 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.12 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( (~a⊕~b) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.12 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.13 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r.1 ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.2)) )
            case case_1
            solve( splitEqs(2) )
              case split
              solve( !KU( sq(~r.1) ) @ #vk.4 )
                case DBNet
                solve( !KU( senc(<~ck.1, mul(pow(~k.1, z), ~r)>, ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.12 )
                      case DBNet_case_1
                      solve( !KU( ~ck.2 ) @ #vk.13 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.11 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.13 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.14 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.11 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.12 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.14 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_sq
                by solve( !KU( ~r.1 ) @ #vk.8 )
              qed
            qed
          next
            case case_2
            solve( splitEqs(2) )
              case split
              solve( !KU( sq(~r.1) ) @ #vk.4 )
                case DBNet
                solve( !KU( senc(<~ck.1, mul(pow(~k.1, z), ~r)>, ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.12 )
                      case DBNet_case_1
                      solve( !KU( ~ck.2 ) @ #vk.13 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) @ #vk.11 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.13 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.14 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.11 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.12 )
                        case DBNet_case_1
                        solve( !KU( ~ck.2 ) @ #vk.14 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕<~ck.1, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_sq
                by solve( !KU( ~r.1 ) @ #vk.8 )
              qed
            qed
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k, (~a⊕<~ck.1, mul(pow(~k.1, z), ~r)>)) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, x), x.1) ) @ #vk.2 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBNet
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBNet_case_1
              solve( !KU( ~ck.1 ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case DBNet_case_2
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBNet_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.10 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( sq(~r) ) @ #vk.4 )
            case DBNet
            solve( splitEqs(0) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.7 )
                case DBNet_case_1
                solve( !KU( ~ck.1 ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_2
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.6 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (~a⊕x) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.10 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( (~a⊕~b) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( splitEqs(1) )
                case split
                solve( !KU( (~a⊕~b) ) @ #vk.7 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_4
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~a.1 ) @ #vk.8 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r ) @ #vk.8 )
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.8 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.8 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~a ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    by contradiction /* cyclic */
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_5
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, x), x.1) ) @ #vk.2 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBNet
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBNet_case_1
              solve( !KU( ~ck.1 ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case DBNet_case_2
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBNet_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.10 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( sq(~r) ) @ #vk.4 )
            case DBNet
            solve( splitEqs(0) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.7 )
                case DBNet_case_1
                solve( !KU( ~ck.1 ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_2
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.6 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (~a⊕x) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.10 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( (~a⊕~b) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( splitEqs(1) )
                case split
                solve( !KU( (~a⊕~b) ) @ #vk.7 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_4
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.4, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~a.1 ) @ #vk.8 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r ) @ #vk.8 )
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.8 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.8 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~a ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    by contradiction /* cyclic */
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.1, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.3, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_6
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k, x), x.1) ) @ #vk.2 )
      case DBNet
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBNet
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBNet_case_1
              solve( !KU( ~ck.1 ) @ #vk.8 )
                case DBNet
                by contradiction /* cyclic */
              qed
            next
              case DBNet_case_2
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBNet_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.10 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.2, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBNet
                  solve( Send( $X.2, t ) ▶₀ #vr.14 )
                    case DBAdv_case_1
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_2
                    by contradiction /* cyclic */
                  next
                    case DBAdv_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBNet_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
          case case_1
          solve( !KU( sq(~r) ) @ #vk.4 )
            case DBNet
            solve( splitEqs(0) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.7 )
                case DBNet_case_1
                solve( !KU( ~ck.1 ) @ #vk.8 )
                  case DBNet
                  by contradiction /* cyclic */
                qed
              next
                case DBNet_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_2
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.6 )
                  case DBNet_case_1
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  solve( !KU( ~a ) @ #vk.7 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (~a⊕x) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.2, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.10 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( (~a⊕~b) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( splitEqs(1) )
                case split
                solve( !KU( (~a⊕~b) ) @ #vk.7 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBNet_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                    case DBNet
                    solve( Send( $X.2, t ) ▶₀ #vr.14 )
                      case DBAdv_case_1
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_2
                      by contradiction /* cyclic */
                    next
                      case DBAdv_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                      qed
                    qed
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_4
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕~b) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~a⊕x) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                  case c_senc
                  solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                          case DBNet
                          solve( Send( $X.2, t ) ▶₀ #vr.15 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.3, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~a.1 ) @ #vk.8 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r ) @ #vk.8 )
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBNet_case_1
                  solve( !KU( ~ck.1 ) @ #vk.8 )
                    case DBNet
                    by contradiction /* cyclic */
                  qed
                next
                  case DBNet_case_2
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    solve( !KU( ~ck.1 ) @ #vk.8 )
                      case DBNet
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.10 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBNet
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( ~a ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBNet_case_1
                    by contradiction /* cyclic */
                  next
                    case DBNet_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        solve( !KU( ~ck.1 ) @ #vk.11 )
                          case DBNet
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(1) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBNet_case_1
                      solve( !KU( ~ck.1 ) @ #vk.10 )
                        case DBNet
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBNet_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBNet
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case DBAdv_case_1
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_2
                        by contradiction /* cyclic */
                      next
                        case DBAdv_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(1) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), ck) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBNet
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBAdv_case_1
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_2
                            by contradiction /* cyclic */
                          next
                            case DBAdv_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBNet_case_1
                        by contradiction /* cyclic */
                      next
                        case DBNet_case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBNet
                        solve( Send( $X.2, t ) ▶₀ #vr.14 )
                          case DBAdv_case_1
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_2
                          by contradiction /* cyclic */
                        next
                          case DBAdv_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.14 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, ck), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KeyComp( $P ) @ #j )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #j )
        case LtkGen
        solve( !KU( mul(pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)), x) ) @ #vk.2 )
          case c_mul
          solve( !KU( pow(~k, (~a⊕<sq(~r), senc(~b, ~ck.1)>)) ) @ #vk.6 )
            case c_pow
            solve( !KU( senc(<sq(~r), senc(~b, ~ck.1)>, ck) ) @ #vk.6 )
              case c_senc
              solve( !KU( (~a⊕<sq(~r), senc(~b, ~ck.1)>) ) @ #vk.9 )
                case c_xor
                solve( !KU( sq(x) ) @ #vk.7 )
                  case c_sq
                  solve( !KU( ~k ) @ #vk.9 )
                    case LtkReveal
                    solve( !KU( ~a ) @ #vk.13 )
                      case Ver1
                      solve( !KU( sq(~r) ) @ #vk.12 )
                        case DBNet
                        solve( !KU( senc(~b, ~ck.1) ) @ #vk.13 )
                          case DBNet
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: bc_fiatshamir.spthy

  complete_trace_exists (exists-trace): verified (23 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (11 steps)
  no_claim_before_fastphase (all-traces): verified (8 steps)
  dbsec (all-traces): falsified - found trace (13 steps)
  dbsec_on_honest_prover (all-traces): verified (3943 steps)
  dbsec_on_compromised_prover (all-traces): falsified - found trace (15 steps)

==============================================================================

real	1m46.338s
user	3m22.047s
sys	0m25.800s
