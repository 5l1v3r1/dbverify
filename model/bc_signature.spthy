/* Implementation of Brands and Chaum's protocol (Signature version)*/
/* By Jorge Toro Pozo */

theory bc_signature

begin

functions: 	f/2, XOR/2

builtins: 	asymmetric-encryption, symmetric-encryption, signing

// -------------------- Protocol Rules -------------------- //
rule Prov1:				//prover sends a commit
		let commit = senc(~m, ~ck)
		in
		[ Fr(~m), Fr(~ck) ]
	--[ Start(~m),
			Action($P) ]->
		[ Send($P, commit),
			ProverState1($P, ~m, ~ck) ]

rule Ver1:				//verifier receives a commit
									//then sends a challenge
		[ Fr(~n), In(comm) ]
	--[ Start(~n), 
			Send($V, ~n) ]->
		[ Out(~n), 
			VerifierState1($V, ~n, comm) ]

rule Prov2:				//prover receives a challenge
									//then sends the response
		let rp = XOR(n, m)
		in
		[ ProverState1(P, m, ck), In(n) ]
	--[ Action(P) ]->
		[ Send(P, rp), 
			ProverState2(P, m, ck, n) ]

rule Ver2:				//verifier receives the response
						//cannot verify it just yet
		[ VerifierState1(V, n, comm),
			Recv(V, rp) ]
	-->
		[ VerifierState2(V, n, comm, rp) ]

rule Prov3:				//prover sends final auth message
		let signature = sign(f(n,m), k)
			msg = <ck, signature>
		in
		[ ProverState2(P, m, ck, n),
			!Ltk(P, k) ]
	--[ Action(P),
			End(m) ]->
		[ Send(P, msg) ]

rule Ver3:				//verifier receives the final message
						//checks signature and declares dbsec
		let msg = <ck, signature>
			m = sdec(comm, ck)
			verif_sig = verify(signature, f(n,m), pkP) 
		in
		[ VerifierState2(V, n, comm, XOR(n,m)),
			In(msg),
			!Pk($P, pkP) ]
	--[ Eq(verif_sig, true),
			DBSec(V, $P, n, XOR(n,m)),
			End(n) ]->
		[ ]

// -------------------- Restrictions --------------------------- //
restriction equals:
	"
	All a b #i. Eq(a,b) @ i ==> a = b
	"

// -------------------- Reachability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P m n #t1 #t2 #t3 #t4 #t5 #t6.

		//initial phase
		Start(m) @ t1 &
		Action(P) @ t1 &

		//fast phase
		Start(n) @ t2 &
		Send(V, n) @ t2 &
		Action(P) @ t3 &
		Recv(V, XOR(n, m)) @ t4 &

		//verification phase
		Action(P) @ t5 &
		DBSec(V, P, n, XOR(n,m)) @ t6 &
		
		//check order
		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6
	"

//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ------------- Key Generation Rules -------------------- //
rule AsymKey:
	[ Fr(~k) ]--[ Once($A) ]->[ !Ltk($A, ~k), !Pk($A, pk(~k)), Out(pk(~k)) ]

rule SymKey:
	[ Fr(~k) ]--[ Once(<$A, $B>) ]->[ !Shk($A, $B, ~k) ]


// ------------------ Corruption Rules -----------//
rule LtkReveal:
	[ !Ltk($A, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealA:
	[ !Shk($A, $B, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealB:
	[ !Shk($A, $B, k) ]--[ Corrupt($B) ]->[ !CorruptAgnt($B), Out(k) ]

// ---------- Adversary and Network Rules ------------------//
rule Adv:
	[ In(m), !CorruptAgnt($A) ]--[ Action($A) ]->[ Send($A, m) ]

rule Net:
	[ Send($A, m) ]--[ Recv($B, m) ]->[ Recv($B, m), Out(m) ]

// -------------------- Sanity Check ------------------ //

//Each run id is unique
lemma unique_runid:
	"
	All x #i #j. ( Start(x) @ i & Start(x) @ j ) ==> #i = #j
	"

//Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x) @ j ==> Ex #i. Start(x) @ i & (#i = #j | i < j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. ( Once (x) @ i & Once (x) @ j ) ==> #i = #j
	"

// -------------------- Security Lemmas ------------------------ //

lemma dbsec:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
	(	//EITHER V is corrupt 	
		Ex #i. Corrupt(V) @ i & i < l
	) | 
	(	//OR P is active in fast phase
		Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	) | 
	(	//OR (P is corrupt AND there's a corrupt 
		//agent active in fast phase)
		Ex A #a #p #i #j #k.
			Corrupt(A) @ a & a < l &
			Corrupt(P) @ p & p < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	)
	"

lemma dbsec_on_honest_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		(Ex #i. Corrupt(P) @ i & i < l) |
		(Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"

lemma dbsec_on_corrupt_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		not (Ex #i. Corrupt(P) @ i & i < l) |
		(Ex A #a #i #j #k.
			Corrupt(A) @ a & a < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"
end
