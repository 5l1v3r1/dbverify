/* Implementation of TREAD (asymmetric encryption version) protocol*/
/* By Jorge Toro */

theory tread_aenc

begin

builtins: 	asymmetric-encryption, symmetric-encryption, signing

functions: f/2, xor/2

equations: xor(xor(x,y), y) = x

// -------------------- Protocol Rules -------------------- //
rule Prover1:
		let u = < <~a, ~b>, $P >
				w = <u, sign(u, ltkP)>
				msg = < aenc(w, pkV), $P >
		in	
		[ Fr(~a),
			Fr(~b),
			!Ltk($P, ltkP),
			!Pk($V, pkV) ]
	--[ Start(~a),
			Action($P) ]->
		[ Send($P, msg),
			ProverState1($V, $P, ~a, ~b) ]

rule Verifier1:
		let w = adec(encrypted, ltkV)
				u = fst(w)
				signed = snd(w)
				verify_sig = verify(signed, u, pkP) 
				a = fst(fst(u))
				b = snd(fst(u))
		in
		[ Fr(~m),
			In(< encrypted, $P >),
			!Pk($P, pkP),
			!Ltk($V, ltkV) ]
	--[ Start(~m),
			Eq(snd(u), $P),
			Eq(verify_sig, true) ]->
		[ Out(~m),
			VerifierState1($V, $P, ~m, a, b) ]

rule Prover2:
		[ ProverState1(V, P, a, b),
			In(m) ]
	--[ Action(P) ]->
		[ ProverState2(V, P, a, b, m) ]

rule Verifier2: 	//verifier sends challenge
		[ VerifierState1(V, P, m, a, b),
			Fr(~c) ]
	--[ Send(V, ~c) ]->
		[ Out(~c),
			VerifierState2(V, P, m, a, b, ~c) ]

rule Prover3:			//prover sends response
		[ ProverState2(V, P, a, b, m),
			In(c) ]
	--[ Action(P),
			End(a) ]->
		[ Send(P, f(c, <a, xor(b,m)> ) ) ]

rule Verifier3:		//fast phase ends
		let rp = f(c, <a, xor(b,m)> )
		in
		[ VerifierState2(V, P, m, a, b, c),
			Recv(V, rp) ]
	--[ DBSec(V, P, c, rp),
			End(m) ]->
		[ ]

// -------------------- Restrictions --------------------------- //
restriction equals:
		"
		All a b #i. Eq(a,b) @ i ==> a = b
		"

// -------------------- Sanity Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P a b c m #t1 #t2 #t3 #t4 #t5 #t6 #t7.
		
		//initial phase
		Start(a) @ t1 &
		Action(P) @ t1 &
		Start(m) @ t2 &
		Action(P) @ t3 &

		//fast phase
		Send(V, c) @ t4 &
		Action(P) @ t5 &
		Recv(V, f(c, <a, xor(b,m)>) ) @ t6 &

		//verification phase
		DBSec(V, P, c, f(c, <a, xor(b,m)>) ) @ t7 &
		
		//check order
		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6 & t6 < t7
	"
//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ------------- Key Generation Rules -------------------- //
rule AsymKey:
	[ Fr(~k) ]--[ Once($A) ]->[ !Ltk($A, ~k), !Pk($A, pk(~k)), Out(pk(~k)) ]

rule SymKey:
	[ Fr(~k) ]--[ Once(<$A, $B>) ]->[ !Shk($A, $B, ~k) ]


// ------------------ Corruption Rules -----------//
rule LtkReveal:
	[ !Ltk($A, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealA:
	[ !Shk($A, $B, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealB:
	[ !Shk($A, $B, k) ]--[ Corrupt($B) ]->[ !CorruptAgnt($B), Out(k) ]

// ---------- Adversary and Network Rules ------------------//
rule Adv:
	[ In(m), !CorruptAgnt($A) ]--[ Action($A) ]->[ Send($A, m) ]

rule Net:
	[ Send($A, m) ]--[ Recv($B, m) ]->[ Recv($B, m), Out(m) ]

// -------------------- Sanity Check ------------------ //

//Each run id is unique
lemma unique_runid:
	"
	All x #i #j. ( Start(x) @ i & Start(x) @ j ) ==> #i = #j
	"

//Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x) @ j ==> Ex #i. Start(x) @ i & (#i = #j | i < j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. ( Once (x) @ i & Once (x) @ j ) ==> #i = #j
	"

// -------------------- Security Lemmas ------------------------ //

lemma dbsec:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
	(	//EITHER V is corrupt 	
		Ex #i. Corrupt(V) @ i & i < l
	) | 
	(	//OR P is active in fast phase
		Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	) | 
	(	//OR (P is corrupt AND there's a corrupt 
		//agent active in fast phase)
		Ex A #a #p #i #j #k.
			Corrupt(A) @ a & a < l &
			Corrupt(P) @ p & p < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	)
	"

lemma dbsec_on_honest_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		(Ex #i. Corrupt(P) @ i & i < l) |
		(Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"

lemma dbsec_on_corrupt_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		not (Ex #i. Corrupt(P) @ i & i < l) |
		(Ex A #a #i #j #k.
			Corrupt(A) @ a & a < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"
end
