/* Implementation of Swiss-Knife protocol*/
/* By Jorge Toro */

/*
This protocol considers asymetric encryption,
as a secret long-term key x of the prover is
used. Afterwards, the verifier has to look-up
a mathcing pair (P, x) from their database. We
model this by using a symmetric encryption
scheme, hence x is the shared key. 
*/


theory swiss

begin

builtins: 	symmetric-encryption, asymmetric-encryption

functions: 	f/2, g/2, XOR/2

// -------------------- Protocol Rules -------------------- //
rule Verif1:
	  [ Fr(~n) ]
	--[ Start(~n) ]->
	  [ VerifState1(~n),
			Out(~n) ]

rule Prover1:
	  [ In(n), Fr(~m) ]
	--[ Start(~m),
			Action($P) ]->
	  [ Send($P, ~m),
			ProverState1($P, n, ~m) ]

rule Verif2:		//fast phase starts
	  [ VerifState1(n),
			In(m), Fr(~c) ]
	--[ Test(n,m,~c,'1'), Send($V, ~c) ]->
	  [ VerifState2($V, n, m, ~c),
			Out(~c) ]

rule Prover2:
	  let z0 = f(x, <'hello', m>)
	  		z1 = XOR(z0, x)
	  		resp = g(c, <z0, z1>)
	  in
	  [ ProverState1(P, n, m),
			In(c),
			!Shk($V, P, x) ]
	--[ Test(n,m,c,'2'), Action(P) ]->
	  [ Send(P, resp ),
			ProverState2($V, P, n, m, c) ]

rule Verif3:			//fast phase ends
	  let z0 = f(x, <'hello', m>)
	  		z1 = XOR(z0, x)
	  		resp = g(c, <z0, z1>)
	  in
	  [ VerifState2(V, n, m, c),
			!Shk(V, $P, x),
			Recv(V, resp) ]
	--[ Test(n,m,c,'3') ]->
	  [ VerifState3(V, $P, n, m, c, resp) ]

rule Prover3:
	  [ ProverState2(V, P, n, m, c),
			!Shk(V, P, x) ]
	--[ Test(n,m,c,'4'), Action(P) ]->
	  [ Send(P, <f(x, <c, P, n, m>), c> ),
			ProverState3(V, P, n, m, c) ]

rule Verif4:
	  [ VerifState3(V, P, n, m, c, resp),
			In( <f(x, <c, P, n, m>), c> ),
			!Shk(V, P, x) ]
	--[ Test(n,m,c,'5'), DBSec(V, P, c, resp),
			End(n) ]->
	  [ Out( f(x, m) ) ]

rule Prover4:
	  [ ProverState3(V, P, n, m, c),
			!Shk(V, P, x),
			In(f(x, m)) ]
	--[ Test(n,m,c,'6'), Action(P),
			End(m) ]->
	  [ ]

// -------------------- Sanity Check Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
		Ex n m c #t1 #t2 #t3 #t4 #t5 #t6. 
			Test(n,m,c,'1')@t1 &
			Test(n,m,c,'2')@t2 &
			Test(n,m,c,'3')@t3 &
			Test(n,m,c,'4')@t4 &
			Test(n,m,c,'5')@t5 &
			Test(n,m,c,'6')@t6 &
			t1<t2 & t2<t3 & t3<t4 & t4<t5 & t5<t6
	"

//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ----------- Key Generation and Key Compromise -------- //
rule LtkGen:
	[ Fr(~k) ]--[ Once($X) ]->[	!Ltk($X, ~k), !Pk($X, pk(~k)), Out(pk(~k)) ]

rule ShkGen:
	[ Fr(~k) ]--[ Once(<$X, $Y>) ]->[ !Shk($X, $Y, ~k) ]

rule LtkReveal:
	[ !Ltk($X, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealX:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealY:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($Y) ]->[ Out(k), !KeyComp($Y) ]

// -------------- DB Network and Adversary  -------------//
rule DBAdv:
	[ In(m), !KeyComp($X) ]--[ Action($X) ]->[ Send($X, m) ]

rule DBNet:
	[ Send($X, m) ]--[ Action($Y), Recv($Y, m) ]->[ Recv($Y, m), Out(m) ]

// --------------- Sanity check & Restrictions ------------- //

// Each run id is unique
lemma unique_runid:
	"
	All x #i #j. (Start(x)@i & Start(x)@j) ==> #i=#j
	"

// Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x)@j ==> Ex #i. Start(x)@i & (#i=#j|i<j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. (Once(x)@i & Once(x)@j) ==> #i=#j
	"

/*
// Runs can always be completed
restriction completion:
	"
	All run #i. Start(run)@i ==> Ex #j. End(run)@j
	"
*/


// For each DBSec claim there was a fast phase before it
// *	Should this lemma fail, then the results for 
//		the security lemmas might be wrong
lemma no_claim_before_fastphase:
	"
	All V P chal resp #l. DBSec(V, P, chal, resp)@l ==>
		(Ex #i #j. Send(V, chal)@i & Recv(V, resp)@j & i<l & j<l)	|
		(Ex #j. !KeyComp(V)@j)		
	"


// -------------------- Security Lemmas ------------------------ //

// For each trace with a DBSec claim, it is the case
// that either the verifier is compromised, or the prover is not and he
// was active during the fast phase, or the prover is compromised and
// then there was a compromised prover active during the fast phase
lemma dbsec:
	"
	All V P chal resp #l. 
		DBSec(V, P, chal, resp)@l ==>
			(	//EITHER P is active in fast phase
				Ex #i #j #k.
					Send(V, chal)@i &
					Action(P)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) | 
			(	//OR (P is compromised AND there's a compromised 
				//agent active in fast phase)
				Ex P2 #p #p2 #i #j #k.
					!KeyComp(P)@p &
					!KeyComp(P2)@p2 &
					Send(V, chal)@i &
					Action(P2)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is not compromised
// *	If this lemma fails then there's a mafia fraud
lemma dbsec_on_honest_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & not (Ex #j. !KeyComp(P)@j)) ==>
			(Ex #i #j #k.
				Send(V, chal)@i &
				Action(P)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is compromised
// *	If this lemma fails then there's a distance fraud,
//		or a distance hijacking, or both
lemma dbsec_on_compromised_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & Ex #j. !KeyComp(P)@j) ==>
			(Ex P2 #p2 #i #j #k.
				!KeyComp(P2)@p2 &
				Send(V, chal)@i &
				Action(P2)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j) 
	"
end
