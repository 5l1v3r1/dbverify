maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.

theory swiss begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, f/2, fst/1, g/2, pair/2, pk/1, sdec/2, senc/2,
           snd/1, xor/2
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Verif1:
   [ Fr( ~n ) ] --[ Start( ~n ) ]-> [ VerifState1( ~n ), Out( ~n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover1:
   [ In( n ), Fr( ~m ), !Shk( $V, $P, x ) ]
  --[ Start( ~m ), Action( $P ) ]->
   [ Send( $P, ~m ), ProverState1( $V, $P, n, ~m, f(x, <'hello', ~m>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verif2:
   [ VerifState1( n ), In( m ), Fr( ~c ) ]
  --[ Send( $V, ~c ) ]->
   [ VerifState2( $V, n, m, ~c ), Out( ~c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover2:
   [ ProverState1( V, P, n, m, a ), In( c ), !Shk( V, P, x ) ]
  --[ Action( P ) ]->
   [ Send( P, g(c, <a, xor(a, x)>) ), ProverState2( V, P, n, m, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verif3:
   [
   VerifState2( V, n, m, c ), !Shk( V, $P, x ),
   Recv( V, g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>) )
   ]
  -->
   [
   VerifState3( V, $P, n, m, c,
                g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover3:
   [ ProverState2( V, P, n, m, c ), !Shk( V, P, x ) ]
  --[ Action( P ) ]->
   [ Send( P, <f(x, <c, P, n, m>), c> ), ProverState3( V, P, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verif4:
   [
   VerifState3( V, P, n, m, c, resp ), In( <f(x, <c, P, n, m>), c> ),
   !Shk( V, P, x )
   ]
  --[ DBSec( V, P, c, resp ), End( n ) ]->
   [ Out( f(x, m) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover4:
   [ ProverState3( V, P, m ), !Shk( V, P, x ), In( f(x, m) ) ]
  --[ Action( P ), End( m ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma complete_trace_exists:
  exists-trace
  "∃ V P n m c x #t1 #t2 #t3 #t4 #t5 #t6 #t7 #t8.
    (((((((((((((((Start( n ) @ #t1) ∧ (Start( m ) @ #t2)) ∧
                 (Action( P ) @ #t2)) ∧
                (Send( V, c ) @ #t3)) ∧
               (Action( P ) @ #t4)) ∧
              (Recv( V, g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>)
               ) @ #t5)) ∧
             (Action( P ) @ #t6)) ∧
            (DBSec( V, P, c, g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>)
             ) @ #t7)) ∧
           (Action( P ) @ #t8)) ∧
          (#t1 < #t2)) ∧
         (#t2 < #t3)) ∧
        (#t3 < #t4)) ∧
       (#t4 < #t5)) ∧
      (#t5 < #t6)) ∧
     (#t6 < #t7)) ∧
    (#t7 < #t8)"
/*
guarded formula characterizing all satisfying traces:
"∃ V P n m c x #t1 #t2 #t3 #t4 #t5 #t6 #t7 #t8.
  (Start( n ) @ #t1) ∧
  (Start( m ) @ #t2) ∧
  (Action( P ) @ #t2) ∧
  (Send( V, c ) @ #t3) ∧
  (Action( P ) @ #t4) ∧
  (Recv( V, g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>)
   ) @ #t5) ∧
  (Action( P ) @ #t6) ∧
  (DBSec( V, P, c, g(c, <f(x, <'hello', m>), xor(f(x, <'hello', m>), x)>)
   ) @ #t7) ∧
  (Action( P ) @ #t8)
 ∧
  (#t1 < #t2) ∧
  (#t2 < #t3) ∧
  (#t3 < #t4) ∧
  (#t4 < #t5) ∧
  (#t5 < #t6) ∧
  (#t6 < #t7) ∧
  (#t7 < #t8)"
*/
simplify
solve( VerifState1( n ) ▶₀ #t3 )
  case Verif1
  solve( Send( $A,
               g(~c, <f(x, <'hello', m.1>), xor(f(x, <'hello', m.1>), x)>)
         ) ▶₀ #t5 )
    case Adv_case_1
    solve( VerifState3( $V, P, n.1, m.2, ~c,
                        g(~c, <f(x, <'hello', m.1>), xor(f(x, <'hello', m.1>), x)>)
           ) ▶₀ #t7 )
      case Verif3_case_1
      solve( !Shk( $V, $P, x ) ▶₂ #t7 )
        case SymKey
        solve( Start( n.2 ) @ #t1 )
          case Prover1
          solve( !Shk( $V, $P, x ) ▶₂ #t1 )
            case SymKey
            solve( Start( ~m.1 ) @ #t2 )
              case Prover1
              solve( Action( $P.1 ) @ #t2 )
                case Prover1
                solve( Action( $P.1 ) @ #t4 )
                  case Adv
                  solve( !CorruptAgnt( $P.1 ) ▶₁ #t4 )
                    case LtkReveal
                    solve( Action( $P.1 ) @ #t6 )
                      case Adv
                      solve( !CorruptAgnt( $P.1 ) ▶₁ #t6 )
                        case LtkReveal
                        solve( Action( $P.1 ) @ #t8 )
                          case Adv
                          solve( !CorruptAgnt( $P.1 ) ▶₁ #t8 )
                            case LtkReveal
                            solve( !KU( ~m.1 ) @ #vk )
                              case Net
                              solve( !KU( f(~k.1, <~c, $P.1, ~n.2, ~m.1>) ) @ #vk.2 )
                                case Net
                                solve( !KU( ~c ) @ #vk.3 )
                                  case Verif2
                                  solve( !KU( ~n.1 ) @ #vk.5 )
                                    case Verif1
                                    solve( !KU( g(~c,
                                                  <f(~k.1, <'hello', ~m.1>), 
                                                   xor(f(~k.1, <'hello', ~m.1>), ~k.1)>)
                                           ) @ #vk.5 )
                                      case Net
                                      SOLVED // trace found
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) AsymKey:
   [ Fr( ~k ) ]
  --[ Once( $A ) ]->
   [ !Ltk( $A, ~k ), !Pk( $A, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SymKey:
   [ Fr( ~k ) ] --[ Once( <$A, $B> ) ]-> [ !Shk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $A, k ) ] --[ Corrupt( $A ) ]-> [ !CorruptAgnt( $A ), Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealA:
   [ !Shk( $A, $B, k ) ]
  --[ Corrupt( $A ) ]->
   [ !CorruptAgnt( $A ), Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealB:
   [ !Shk( $A, $B, k ) ]
  --[ Corrupt( $B ) ]->
   [ !CorruptAgnt( $B ), Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Adv:
   [ In( m ), !CorruptAgnt( $A ) ] --[ Action( $A ) ]-> [ Send( $A, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Net:
   [ Send( $A, m ) ] --[ Recv( $B, m ) ]-> [ Recv( $B, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Shk( $V, $P, x ) ▶₂ #i )
      case SymKey
      solve( Start( ~m ) @ #j )
        case Prover1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Verif1
    solve( Start( ~n ) @ #j )
      case Verif1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Shk( $V, $P, x ) ▶₂ #i )
      case SymKey
      solve( Start( ~m ) @ #j )
        case Prover1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Verif1
    solve( Start( ~n ) @ #j )
      case Verif1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prover4
  solve( ProverState3( V, P, x ) ▶₀ #j )
    case Prover3
    by contradiction /* from formulas */
  qed
next
  case Verif4
  solve( VerifState3( V, P, x, m, c, resp ) ▶₀ #j )
    case Verif3_case_1
    by contradiction /* from formulas */
  next
    case Verif3_case_2
    by contradiction /* from formulas */
  next
    case Verif3_case_3
    by contradiction /* from formulas */
  next
    case Verif3_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma dbsec:
  all-traces
  "∀ V P ch rp #l.
    (DBSec( V, P, ch, rp ) @ #l) ⇒
    (((∃ #i. (Corrupt( V ) @ #i) ∧ (#i < #l)) ∨
      (∃ #i #j #k.
        (((((Send( V, ch ) @ #i) ∧ (Action( P ) @ #j)) ∧ (Recv( V, rp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∧
        (#k < #l))) ∨
     (∃ A #a #p #i #j #k.
       (((((((((Corrupt( A ) @ #a) ∧ (#a < #l)) ∧ (Corrupt( P ) @ #p)) ∧
             (#p < #l)) ∧
            (Send( V, ch ) @ #i)) ∧
           (Action( A ) @ #j)) ∧
          (Recv( V, rp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∧
       (#k < #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ V P ch rp #l.
  (DBSec( V, P, ch, rp ) @ #l)
 ∧
  (∀ #i. (Corrupt( V ) @ #i) ⇒ ¬(#i < #l)) ∧
  (∀ #i #j #k.
    (Send( V, ch ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, rp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)) ∨ (¬(#k < #l)))) ∧
  (∀ A #a #p #i #j #k.
    (Corrupt( A ) @ #a) ∧
    (Corrupt( P ) @ #p) ∧
    (Send( V, ch ) @ #i) ∧
    (Action( A ) @ #j) ∧
    (Recv( V, rp ) @ #k)
   ⇒
    ((¬(#a < #l)) ∨
     (¬(#p < #l)) ∨
     (¬(#i < #j)) ∨
     (¬(#j < #k)) ∨
     (¬(#k < #l))))"
*/
simplify
solve( VerifState3( V, P, n, m, ch, rp ) ▶₀ #l )
  case Verif3_case_1
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( ~m ) @ #vk.3 )
      case Net
      solve( !KU( ~c ) @ #vk.3 )
        case Verif2
        by contradiction /* cyclic */
      qed
    qed
  qed
next
  case Verif3_case_2
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    solve( !KU( ~c ) @ #vk.7 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
               ) @ #vk.8 )
          case Net
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_3
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    solve( !KU( ~c ) @ #vk.7 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
               ) @ #vk.8 )
          case Net
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_4
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    solve( !KU( ~c ) @ #vk.7 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
               ) @ #vk.8 )
          case Net
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P ch rp #l.
    (DBSec( V, P, ch, rp ) @ #l) ⇒
    (((∃ #i. (Corrupt( V ) @ #i) ∧ (#i < #l)) ∨
      (∃ #i. (Corrupt( P ) @ #i) ∧ (#i < #l))) ∨
     (∃ #i #j #k.
       (((((Send( V, ch ) @ #i) ∧ (Action( P ) @ #j)) ∧ (Recv( V, rp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∧
       (#k < #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ V P ch rp #l.
  (DBSec( V, P, ch, rp ) @ #l)
 ∧
  (∀ #i. (Corrupt( V ) @ #i) ⇒ ¬(#i < #l)) ∧
  (∀ #i. (Corrupt( P ) @ #i) ⇒ ¬(#i < #l)) ∧
  (∀ #i #j #k.
    (Send( V, ch ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, rp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)) ∨ (¬(#k < #l))))"
*/
simplify
solve( VerifState3( V, P, n, m, ch, rp ) ▶₀ #l )
  case Verif3_case_1
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( ~m ) @ #vk.3 )
      case Net
      solve( !KU( ~c ) @ #vk.3 )
        case Verif2
        by contradiction /* cyclic */
      qed
    qed
  qed
next
  case Verif3_case_2
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verif3_case_3
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verif3_case_4
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( !KU( f(~k, <~c, $P, ~n, m>) ) @ #vk.1 )
      case Net
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_1
        solve( !KU( ~c ) @ #vk.2 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( (¬(#vr.1 < #vr.11))  ∥ (¬(#vr.11 < #vr.3)) )
          case case_1
          solve( !KU( ~c ) @ #vk.2 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( xor(f(~k, <'hello', ~m>), ~k) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.9 )
                    case ShkRevealA
                    by contradiction /* from formulas */
                  next
                    case ShkRevealB
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( ~m ) @ #vk.3 )
              case Net
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), xor(f(~k, <'hello', ~m>), ~k)>)
                     ) @ #vk.4 )
                case Net
                by contradiction /* cyclic */
              next
                case c_g
                solve( !KU( ~c ) @ #vk.4 )
                  case Verif2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Verif4_case_1
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_2
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case Verif4_case_3
      solve( !KU( g(~c, <f(~k, <'hello', m>), xor(f(~k, <'hello', m>), ~k)>)
             ) @ #vk.6 )
        case Net
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( xor(f(~k, <'hello', m>), ~k) ) @ #vk.16 )
          case c_xor
          solve( !KU( ~k ) @ #vk.17 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_f
      solve( !KU( ~k ) @ #vk.7 )
        case ShkRevealA
        by contradiction /* from formulas */
      next
        case ShkRevealB
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma dbsec_on_corrupt_prover:
  all-traces
  "∀ V P ch rp #l.
    (DBSec( V, P, ch, rp ) @ #l) ⇒
    (((∃ #i. (Corrupt( V ) @ #i) ∧ (#i < #l)) ∨
      (¬(∃ #i. (Corrupt( P ) @ #i) ∧ (#i < #l)))) ∨
     (∃ A #a #i #j #k.
       (((((((Corrupt( A ) @ #a) ∧ (#a < #l)) ∧ (Send( V, ch ) @ #i)) ∧
           (Action( A ) @ #j)) ∧
          (Recv( V, rp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∧
       (#k < #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ V P ch rp #l.
  (DBSec( V, P, ch, rp ) @ #l)
 ∧
  (∀ #i. (Corrupt( V ) @ #i) ⇒ ¬(#i < #l)) ∧
  (∃ #i. (Corrupt( P ) @ #i) ∧ #i < #l) ∧
  (∀ A #a #i #j #k.
    (Corrupt( A ) @ #a) ∧
    (Send( V, ch ) @ #i) ∧
    (Action( A ) @ #j) ∧
    (Recv( V, rp ) @ #k)
   ⇒
    ((¬(#a < #l)) ∨ (¬(#i < #j)) ∨ (¬(#j < #k)) ∨ (¬(#k < #l))))"
*/
simplify
solve( VerifState3( V, P, n, m, ch, rp ) ▶₀ #l )
  case Verif3_case_1
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( Corrupt( $P ) @ #i )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #i )
        case AsymKey
        solve( !KU( ~m ) @ #vk.3 )
          case Net
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case ShkRevealA
      solve( !Shk( $P, $B, k ) ▶₀ #i )
        case SymKey
        solve( !KU( ~m ) @ #vk.3 )
          case Net
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case ShkRevealB
      solve( !Shk( $A, $P, k ) ▶₀ #i )
        case SymKey
        solve( !KU( ~m ) @ #vk.3 )
          case Net
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_2
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( Corrupt( $P ) @ #i )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #i )
        case AsymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealA
      solve( !Shk( $P, $B, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealB
      solve( !Shk( $A, $P, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_3
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( Corrupt( $P ) @ #i )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #i )
        case AsymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealA
      solve( !Shk( $P, $B, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealB
      solve( !Shk( $A, $P, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_4
  solve( !Shk( $V, $P, x ) ▶₂ #l )
    case SymKey
    solve( Corrupt( $P ) @ #i )
      case LtkReveal
      solve( !Ltk( $P, k ) ▶₀ #i )
        case AsymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealA
      solve( !Shk( $P, $B, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case ShkRevealB
      solve( !Shk( $A, $P, k ) ▶₀ #i )
        case SymKey
        solve( !KU( f(~k.1, <~c, $P, ~n, m>) ) @ #vk.1 )
          case Net
          solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.3)) )
            case case_1
            solve( !KU( ~c ) @ #vk.2 )
              case Verif2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.12))  ∥ (¬(#vr.12 < #vr.3)) )
              case case_1
              solve( !KU( ~c ) @ #vk.2 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.3)) )
                case case_1
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( ~m ) @ #vk.3 )
                  case Net
                  solve( !KU( g(~c,
                                <f(~k.1, <'hello', ~m>), xor(f(~k.1, <'hello', ~m>), ~k.1)>)
                         ) @ #vk.4 )
                    case Net
                    by contradiction /* cyclic */
                  next
                    case c_g
                    solve( !KU( ~c ) @ #vk.4 )
                      case Verif2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Verif4_case_1
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_2
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case Verif4_case_3
          solve( (¬(#vr.1 < #vr.14))  ∥ (¬(#vr.14 < #vr.3)) )
            case case_1
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.7 )
              case Net
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.3 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_f
          solve( !KU( ~k.1 ) @ #vk.7 )
            case ShkRevealA
            by contradiction /* from formulas */
          next
            case ShkRevealB
            solve( !KU( g(~c,
                          <f(~k.1, <'hello', m>), xor(f(~k.1, <'hello', m>), ~k.1)>)
                   ) @ #vk.8 )
              case Net
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            next
              case c_g
              solve( !KU( ~c ) @ #vk.4 )
                case Verif2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: swiss.spthy

  complete_trace_exists (exists-trace): verified (21 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (9 steps)
  dbsec (all-traces): verified (192 steps)
  dbsec_on_honest_prover (all-traces): verified (141 steps)
  dbsec_on_corrupt_prover (all-traces): verified (553 steps)

==============================================================================
