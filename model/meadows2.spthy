/*
		Implementation of Meadows et al. protocol
		Version: F(...) := <nv, h(np, P)>

		By Jorge Toro 
*/

theory meadows2

begin

builtins : symmetric-encryption, asymmetric-encryption

functions: h/2

// -------------------- Protocol Rules -------------------- //
rule Verifier1:	
		[ Fr(~nv) ]
	--[ Start(~nv) ]->
		[ Out(<$V, 'hello'>),
			VerifierState1($V, ~nv) ]

rule Prover1:
		[ Fr(~np),
			In(<V, 'hello'> ) ]
	--[ Start(~np),
			Action($P) ]->
		[ ProverState1(V, $P, ~np) ]

rule Verifier2:			//fast phase starts
		[ VerifierState1(V, nv) ]
	--[ Send(V, nv) ]->
		[ Out(nv),
			VerifierState2(V, nv) ]

rule Prover2:			
		[ ProverState1(V, P, np),
			In(nv) ]
	--[ Action(P) ]->
		[ Send(P, <nv, h(np, P)>),
			ProverState2(V, P, np, nv) ]

rule Verifier3:			//fast phase ends
		[ VerifierState2(V, nv),
			Recv(V, <nv, msg>) ]
	-->
		[ VerifierState3(V, nv, msg) ]

rule Prover3:
		let s = <P, 'locP', np, nv>
				final_msg = <s, h(k, s)>
		in
		[ ProverState2(V, P, np, nv),
			//Fr(~locP),
			!Shk(V, P, k) ]
	--[ Action(P),
			End(np) ]->
		[ Send(P, final_msg) ]

rule Verifier4:
		let s = <P, locP, np, nv>
				rp = <nv, h(np, P)>	          
		in
		[ VerifierState3(V, nv, h(np, P)),
			In(<s, h(k, s)>),
			!Shk(V, P, k) ]
	--[ DBSec(V, P, nv, rp),
			End(nv) ]->
		[ ]

// -------------------- Reachability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P nv np #t1 #t2 #t3 #t4 #t5 #t6 #t7.
		
		//initial phase
		Start(nv) @ t1 &
		Start(np) @ t2 &
		Action(P) @ t2 &
		
		//fast phase
		Send(V, nv) @ t3 &
		Action(P) @ t4 &
		Recv(V, <nv, h(np, P)>) @ t5 &

		//verification phase
		Action(P) @ t6 &	
		DBSec(V, P, nv, <nv, h(np, P)>) @ t7 &

		//check order
		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6 & t6 < t7
	"

//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ------------- Key Generation Rules -------------------- //
rule AsymKey:
	[ Fr(~k) ]--[ Once($A) ]->[ !Ltk($A, ~k), !Pk($A, pk(~k)), Out(pk(~k)) ]

rule SymKey:
	[ Fr(~k) ]--[ Once(<$A, $B>) ]->[ !Shk($A, $B, ~k) ]


// ------------------ Corruption Rules -----------//
rule LtkReveal:
	[ !Ltk($A, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealA:
	[ !Shk($A, $B, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealB:
	[ !Shk($A, $B, k) ]--[ Corrupt($B) ]->[ !CorruptAgnt($B), Out(k) ]

// ---------- Adversary and Network Rules ------------------//
rule Adv:
	[ In(m), !CorruptAgnt($A) ]--[ Action($A) ]->[ Send($A, m) ]

rule Net:
	[ Send($A, m) ]--[ Recv($B, m) ]->[ Recv($B, m), Out(m) ]

// -------------------- Sanity Check ------------------ //

//Each run id is unique
lemma unique_runid:
	"
	All x #i #j. ( Start(x) @ i & Start(x) @ j ) ==> #i = #j
	"

//Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x) @ j ==> Ex #i. Start(x) @ i & (#i = #j | i < j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. ( Once (x) @ i & Once (x) @ j ) ==> #i = #j
	"

// -------------------- Security Lemmas ------------------------ //

lemma dbsec:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
	(	//EITHER V is corrupt 	
		Ex #i. Corrupt(V) @ i & i < l
	) | 
	(	//OR P is active in fast phase
		Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	) | 
	(	//OR (P is corrupt AND there's a corrupt 
		//agent active in fast phase)
		Ex A #a #p #i #j #k.
			Corrupt(A) @ a & a < l &
			Corrupt(P) @ p & p < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	)
	"

lemma dbsec_on_honest_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		(Ex #i. Corrupt(P) @ i & i < l) |
		(Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"

lemma dbsec_on_corrupt_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		not (Ex #i. Corrupt(P) @ i & i < l) |
		(Ex A #a #i #j #k.
			Corrupt(A) @ a & a < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"
end
