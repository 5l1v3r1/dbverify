/* Implementation of Brands and Chaum's protocol (Fiat-Shamir identification)*/

theory bc_fiatshamir

begin

builtins: 	symmetric-encryption, asymmetric-encryption, xor

functions: 	sq/1, mul/2, pow/2, check/2, true/0

equations: 	check( sq(mul(pow(x, y), r)), mul(pow(pk(x), y), sq(r)) ) = true

// -------------------- Protocol Rules -------------------- //
rule Prov1:
	  let msg = <sq(~r), senc(~b, ~ck)>
	  in
	  [ Fr(~r), Fr(~ck), Fr(~b) ]
	--[ Start(~b),
	    Action($P) ]->
	  [ Send($P, msg),
	    ProverState1($P, ~r, ~b, ~ck) ]

rule Ver1:			//fast phase starts
	  [ In(<r_squared, sealed_commit>),
	    Fr(~a) ]
	--[ Start(~a),
	    Send($V, ~a) ]->
	  [ Out(~a),
	    VerifierState1($V, r_squared, sealed_commit, ~a) ]

rule Prov2:
	  [ ProverState1(P, r, b, ck),
	    In(a) ]
	--[ Action(P) ]->
	  [ Send(P, b),
	    ProverState2(P, r, b, ck, a) ]

rule Ver2:			//fast phase ends
	  [ VerifierState1(V, r_squared, sealed_commit, a),
	    Recv (V, b) ]
	-->
	  [ VerifierState2(V, r_squared, sealed_commit, a, b) ]

rule Prov3:
	  let s = mul(pow(x, a ⊕ b), r)
	  in
	  [ ProverState2(P, r, b, ck, a),
	    !Ltk(P, x) ]
	--[ Action(P),
	    End(b) ]->
	  [ Send(P, <ck,s>) ]

rule Ver3:
	  let left = sq(s)
	      right = mul(pow(pkP, a ⊕ b), r_squared)
	      checkEq = check(left, right)
	  in
	  [ In(<ck, s>),
	    VerifierState2(V, r_squared, senc(b, ck), a, b),
	    !Pk( $P, pkP ) ]
	--[ Eq(checkEq, true),
	    DBSec(V, $P, a, b),
	    End(a) ]->
	  [ ]
// -------------------- Axioms ------------------------------- //
restriction equals:
    "
    All a b #i. Eq(a,b)@i ==> a=b
    "
// -------------------- Sanity Check Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P a b #t1 #t2 #t3 #t4 #t5 #t6.
		//slow phase
		Start(b)@t1 &
		Action(P)@t1 &

		//fast phase
		Start(a)@t2 &
		Send(V, a)@t2 &
		Action(P)@t3 &
		Recv(V, b)@t4 &

		//verification phase
		Action(P)@t5 &
		End(b)@t5 &

		DBSec(V, P, a, b )@t6 &
		End(a)@t6 &

		//order check
		t1<t2 & t2<t3 & t3<t4 & t4<t5 & t5<t6
	"
//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ----------- Key Generation and Key Compromise -------- //
rule LtkGen:
	[ Fr(~k) ]--[ Once($X) ]->[	!Ltk($X, ~k), !Pk($X, pk(~k)), Out(pk(~k)) ]

rule ShkGen:
	[ Fr(~k) ]--[ Once(<$X, $Y>) ]->[ !Shk($X, $Y, ~k) ]

rule LtkReveal:
	[ !Ltk($X, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealX:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealY:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($Y) ]->[ Out(k), !KeyComp($Y) ]

// -------------- DB Network and Adversary  -------------//
rule DBAdv:
	[ In(m), !KeyComp($X) ]--[ Action($X) ]->[ Send($X, m) ]

rule DBNet:
	[ Send($X, m) ]--[ Action($Y), Recv($Y, m) ]->[ Recv($Y, m), Out(m) ]

// --------------- Sanity check & Restrictions ------------- //

// Each run id is unique
lemma unique_runid:
	"
	All x #i #j. (Start(x)@i & Start(x)@j) ==> #i=#j
	"

// Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x)@j ==> Ex #i. Start(x)@i & (#i=#j|i<j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. (Once(x)@i & Once(x)@j) ==> #i=#j
	"

/*
// Runs can always be completed
restriction completion:
	"
	All run #i. Start(run)@i ==> Ex #j. End(run)@j
	"
*/


// For each DBSec claim there was a fast phase before it
// *	Should this lemma fail, then the results for 
//		the security lemmas might be wrong
lemma no_claim_before_fastphase:
	"
	All V P chal resp #l. DBSec(V, P, chal, resp)@l ==>
		(Ex #i #j. Send(V, chal)@i & Recv(V, resp)@j & i<l & j<l)	|
		(Ex #j. !KeyComp(V)@j)		
	"


// -------------------- Security Lemmas ------------------------ //

// For each trace with a DBSec claim, it is the case
// that either the verifier is compromised, or the prover is not and he
// was active during the fast phase, or the prover is compromised and
// then there was a compromised prover active during the fast phase
lemma dbsec:
	"
	All V P chal resp #l. 
		DBSec(V, P, chal, resp)@l ==>
			(	//EITHER P is active in fast phase
				Ex #i #j #k.
					Send(V, chal)@i &
					Action(P)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) | 
			(	//OR (P is compromised AND there's a compromised 
				//agent active in fast phase)
				Ex P2 #p #p2 #i #j #k.
					!KeyComp(P)@p &
					!KeyComp(P2)@p2 &
					Send(V, chal)@i &
					Action(P2)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is not compromised
// *	If this lemma fails then there's a mafia fraud
lemma dbsec_on_honest_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & not (Ex #j. !KeyComp(P)@j)) ==>
			(Ex #i #j #k.
				Send(V, chal)@i &
				Action(P)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is compromised
// *	If this lemma fails then there's a distance fraud,
//		or a distance hijacking, or both
lemma dbsec_on_compromised_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & Ex #j. !KeyComp(P)@j) ==>
			(Ex P2 #p2 #i #j #k.
				!KeyComp(P2)@p2 &
				Send(V, chal)@i &
				Action(P2)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j) 
	"
end
