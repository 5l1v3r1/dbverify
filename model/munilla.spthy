/* Implementation of the Munilla et al.'s protocol */
/* By Jorge Toro */

theory munilla

begin

builtins : asymmetric-encryption

functions: h/3, h1/3, h2/3, h3/3, g/2, f/2

// -------------------- Protocol Rules -------------------- //
rule Reader1:
		[ Fr(~n) ]
	--[ Start(~n) ]->
		[ Out(~n),
			RState1($Reader, ~n) ]

rule Tag1:
		let p = h1(k, n, ~m)
				v0 = h2(k, n, ~m)
				v1 = h3(k, n, ~m)
		in
		[ Fr(~m),
			In(n),
			!Shk($Reader, $Tag, k) ]
	--[ Start(~m),
			Action($Tag) ]->
		[ Send($Tag, ~m),
			TState1($Reader, $Tag, ~m, p, v0, v1)]

rule Reader2:		//start fast phase
		let p = h1(k, n, m)
				v0 = h2(k, n, m)
				v1 = h3(k, n, m)
				s = g(p, ~c)
		in
		[ RState1(Reader, n),
			Fr(~c),
			In(m),
			!Shk(Reader, $Tag, k) ]
	--[ Send(Reader, s) ]->
		[ RState2(Reader, $Tag, n, m, p, v0, v1, ~c),
			Out(s) ]

rule Tag2:
		[ TState1(Reader, Tag, m, p, v0, v1),
			In(s) ]
	--[ Action(Tag) ]->
		[ Send(Tag, f(s, <v0, v1>) ),
			TState2(Reader, Tag, m, p, v0, v1) ]

rule Reader3:			//end fast phase
		let s = g(p, c)
		in
		[ RState2(Reader, Tag, n, m, p, v0, v1, c),
			Recv (Reader, f(s, <v0, v1>) ) ]
	-->
		[ RState3(Reader, Tag, n, m, p, v0, v1, c) ]

rule Tag3:
		[ TState2(Reader, Tag, m, p, v0, v1),
			!Shk(Reader, Tag, k) ]
	--[ Action(Tag),
			End(m) ]->
		[ Send(Tag, h(k, v0, v1)) ]

rule Reader4:
		let s = g(p, c)
		in
		[ RState3(Reader, Tag, n, m, p, v0, v1, c),
			In( h(k, v0, v1)),
			!Shk(Reader, Tag, k) ]
	--[ DBSec(Reader, Tag, s, f(s, <v0, v1>)),
			End(n) ]->
		[ ]

// -------------------- Reachability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex Reader Tag k n m c #t1 #t2 #t3 #t4 #t5 #t6 #t7.
		
		//initial phase
		Start(n) @ t1 &
		Start(m) @ t2 &
		Action(Tag) @ t2 &

		//fast phase
		Send(Reader, g(h1(k, n, m), c) ) @ t3 &
		Action(Tag) @ t4 &
		Recv(Reader, f(g(h1(k, n, m), c), <h2(k, n, m), h3(k, n, m)> )) @ t5 & 
		
		//verification
		Action(Tag) @ t6 &
		DBSec(Reader, Tag, g(h1(k, n, m), c), 
			f(g(h1(k, n, m), c), <h2(k, n, m), h3(k, n, m)> ) ) @ t7 &

		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6 & t6 < t7
	"
//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ------------- Key Generation Rules -------------------- //
rule AsymKey:
	[ Fr(~k) ]--[ Once($A) ]->[ !Ltk($A, ~k), !Pk($A, pk(~k)), Out(pk(~k)) ]

rule SymKey:
	[ Fr(~k) ]--[ Once(<$A, $B>) ]->[ !Shk($A, $B, ~k) ]


// ------------------ Corruption Rules -----------//
rule LtkReveal:
	[ !Ltk($A, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealA:
	[ !Shk($A, $B, k) ]--[ Corrupt($A) ]->[ !CorruptAgnt($A), Out(k) ]

rule ShkRevealB:
	[ !Shk($A, $B, k) ]--[ Corrupt($B) ]->[ !CorruptAgnt($B), Out(k) ]

// ---------- Adversary and Network Rules ------------------//
rule Adv:
	[ In(m), !CorruptAgnt($A) ]--[ Action($A) ]->[ Send($A, m) ]

rule Net:
	[ Send($A, m) ]--[ Recv($B, m) ]->[ Recv($B, m), Out(m) ]

// -------------------- Sanity Check ------------------ //

//Each run id is unique
lemma unique_runid:
	"
	All x #i #j. ( Start(x) @ i & Start(x) @ j ) ==> #i = #j
	"

//Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x) @ j ==> Ex #i. Start(x) @ i & (#i = #j | i < j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. ( Once (x) @ i & Once (x) @ j ) ==> #i = #j
	"

// -------------------- Security Lemmas ------------------------ //

lemma dbsec:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
	(	//EITHER V is corrupt 	
		Ex #i. Corrupt(V) @ i & i < l
	) | 
	(	//OR P is active in fast phase
		Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	) | 
	(	//OR (P is corrupt AND there's a corrupt 
		//agent active in fast phase)
		Ex A #a #p #i #j #k.
			Corrupt(A) @ a & a < l &
			Corrupt(P) @ p & p < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l
	)
	"

lemma dbsec_on_honest_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		(Ex #i. Corrupt(P) @ i & i < l) |
		(Ex #i #j #k.
			Send(V, ch) @ i &
			Action(P) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"

lemma dbsec_on_corrupt_prover:
	"
	All V P ch rp #l. DBSec(V, P, ch, rp) @ l ==>
		(Ex #i. Corrupt(V) @ i & i < l) |
		not (Ex #i. Corrupt(P) @ i & i < l) |
		(Ex A #a #i #j #k.
			Corrupt(A) @ a & a < l &
			Send(V, ch) @ i &
			Action(A) @ j &
			Recv(V, rp) @ k &
			i < j & j < k & k < l)
	"
end
