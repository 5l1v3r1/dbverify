theory reid begin

// Function signature and definition of the equational theory E

functions: KDF/2, adec/2, aenc/2, f/2, fst/1, pair/2, pk/1, sdec/2,
           senc/2, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Ver1:
   [ Fr( ~rB ) ]
  --[ Start( ~rB ) ]->
   [ Out( <$B, ~rB> ), VerifyState1( $B, ~rB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov1:
   [ Fr( ~rA ), In( <B, rB> ), !Shk( $A, B, s ) ]
  --[ Start( ~rA ), Action( $A ) ]->
   [
   Send( $A, <$A, ~rA> ),
   ProverState1( $A, B, ~rA, senc(s, KDF(s, <$A, B, ~rA, rB>)),
                 KDF(s, <$A, B, ~rA, rB>)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver2:
   [ VerifyState1( B, rB ), Fr( ~alpha ), In( <A, rA> ) ]
  --[ Send( B, ~alpha ) ]->
   [ VerifyState2( A, B, rA, rB, ~alpha ), Out( ~alpha ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProverState1( A, B, rA, c, k ), In( alpha ) ]
  --[ Action( A ), End( rA ) ]->
   [ Send( A, f(alpha, <c, k>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver3:
   [
   VerifyState2( A, B, rA, rB, alpha ),
   Recv( B,
         f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
   ),
   !Shk( A, B, s )
   ]
  --[
  DBSec( B, A, alpha,
         f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
  ),
  End( rB )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma complete_trace_exists:
  exists-trace
  "∃ A B s rA rB alpha #t1 #t2 #t3 #t4 #t5 #t6.
    (((((((((((Start( rB ) @ #t1) ∧ (Start( rA ) @ #t2)) ∧
             (Action( A ) @ #t2)) ∧
            (Send( B, alpha ) @ #t3)) ∧
           (Action( A ) @ #t4)) ∧
          (Recv( B,
                 f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
           ) @ #t5)) ∧
         (DBSec( B, A, alpha,
                 f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
          ) @ #t6)) ∧
        (#t1 < #t2)) ∧
       (#t2 < #t3)) ∧
      (#t3 < #t4)) ∧
     (#t4 < #t5)) ∧
    (#t5 < #t6)"
/*
guarded formula characterizing all satisfying traces:
"∃ A B s rA rB alpha #t1 #t2 #t3 #t4 #t5 #t6.
  (Start( rB ) @ #t1) ∧
  (Start( rA ) @ #t2) ∧
  (Action( A ) @ #t2) ∧
  (Send( B, alpha ) @ #t3) ∧
  (Action( A ) @ #t4) ∧
  (Recv( B,
         f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
   ) @ #t5) ∧
  (DBSec( B, A, alpha,
          f(alpha, <senc(s, KDF(s, <A, B, rA, rB>)), KDF(s, <A, B, rA, rB>)>)
   ) @ #t6)
 ∧
  (#t1 < #t2) ∧ (#t2 < #t3) ∧ (#t3 < #t4) ∧ (#t4 < #t5) ∧ (#t5 < #t6)"
*/
simplify
solve( VerifyState1( $Y, rB ) ▶₀ #t3 )
  case Ver1
  solve( Send( $X,
               f(~alpha,
                 <senc(s, KDF(s, <A.1, $Y, rA.1, rB.1>)), KDF(s, <A.1, $Y, rA.1, rB.1>)>)
         ) ▶₀ #t5 )
    case DBAdv_case_1
    solve( VerifyState2( A.1, $Y, rA.1, rB.1, ~alpha ) ▶₀ #t6 )
      case Ver2
      solve( Recv( $Y,
                   f(~alpha, <senc(s, KDF(s, <A, $Y, rA, ~rB>)), KDF(s, <A, $Y, rA, ~rB>)>)
             ) ▶₁ #t6 )
        case DBNet_case_1
        solve( !Shk( $X, $Y, ~k ) ▶₂ #t6 )
          case ShkGen
          solve( Start( ~rB ) @ #t1 )
            case Ver1
            solve( Start( ~rA ) @ #t2 )
              case Prov1
              solve( Action( $X ) @ #t2 )
                case Prov1
                solve( Action( $X ) @ #t4 )
                  case DBAdv
                  solve( !KeyComp( $X ) ▶₁ #t4 )
                    case LtkReveal
                    solve( !KU( ~rA ) @ #vk.2 )
                      case DBNet
                      solve( !KU( ~alpha ) @ #vk.4 )
                        case Ver2
                        solve( !KU( ~rB ) @ #vk.7 )
                          case Ver1
                          solve( !KU( f(~alpha,
                                        <senc(~k, KDF(~k, <$X, $Y, ~rA, ~rB>)), KDF(~k, <$X, $Y, ~rA, ~rB>)>)
                                 ) @ #vk.5 )
                            case DBNet
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $X ) ]-> [ Out( k ), !KeyComp( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ] --[ !KeyComp( $Y ) ]-> [ Out( k ), !KeyComp( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBAdv:
   [ In( m ), !KeyComp( $X ) ] --[ Action( $X ) ]-> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBNet:
   [ Send( $X, m ) ]
  --[ Action( $Y ), Recv( $Y, m ) ]->
   [ Recv( $Y, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Shk( $A, B, s ) ▶₂ #i )
      case ShkGen
      solve( Start( ~rA ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~rB ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( !Shk( $A, B, s ) ▶₂ #i )
      case ShkGen
      solve( Start( ~rA ) @ #j )
        case Prov1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Ver1
    solve( Start( ~rB ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov2
  solve( ProverState1( A, B, x, c, k ) ▶₀ #j )
    case Prov1
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifyState2( A, B, rA, x, alpha ) ▶₀ #j )
    case Ver2
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma no_claim_before_fastphase:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifyState2( P, V, rA, rB, chal ) ▶₀ #l )
  case Ver2
  solve( Recv( $B,
               f(~alpha, <senc(s, KDF(s, <P, $B, rA, ~rB>)), KDF(s, <P, $B, rA, ~rB>)>)
         ) ▶₁ #l )
    case DBNet_case_1
    by contradiction /* from formulas */
  next
    case DBNet_case_2
    by contradiction /* from formulas */
  next
    case DBNet_case_3
    by contradiction /* from formulas */
  next
    case DBNet_case_4
    by contradiction /* from formulas */
  qed
qed

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ P2 #p #p2 #i #j #k.
        ((((((!KeyComp( P ) @ #p) ∧ (!KeyComp( P2 ) @ #p2)) ∧
            (Send( V, chal ) @ #i)) ∧
           (Action( P2 ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k))) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!KeyComp( P ) @ #p) ∧
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifyState2( P, V, rA, rB, chal ) ▶₀ #l )
  case Ver2
  solve( Recv( $B,
               f(~alpha, <senc(s, KDF(s, <P, $B, rA, ~rB>)), KDF(s, <P, $B, rA, ~rB>)>)
         ) ▶₁ #l )
    case DBNet_case_1
    solve( !Shk( $X, $B, ~k ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~alpha ) @ #vk.3 )
        case Ver2
        by contradiction /* cyclic */
      qed
    qed
  next
    case DBNet_case_2
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            solve( !KU( ~alpha ) @ #vk.7 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case DBNet_case_3
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            solve( !KU( ~alpha ) @ #vk.7 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case DBNet_case_4
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            solve( !KU( ~alpha ) @ #vk.7 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_honest_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (¬(∃ #j. !KeyComp( P ) @ #j))) ⇒
    ((∃ #i #j #k.
       ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #j. (!KeyComp( P ) @ #j) ⇒ ⊥) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifyState2( P, V, rA, rB, chal ) ▶₀ #l )
  case Ver2
  solve( Recv( $B,
               f(~alpha, <senc(s, KDF(s, <P, $B, rA, ~rB>)), KDF(s, <P, $B, rA, ~rB>)>)
         ) ▶₁ #l )
    case DBNet_case_1
    solve( !Shk( $X, $B, ~k ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~alpha ) @ #vk.3 )
        case Ver2
        by contradiction /* cyclic */
      qed
    qed
  next
    case DBNet_case_2
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case DBNet_case_3
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case DBNet_case_4
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KU( f(~alpha,
                    <senc(~k, KDF(~k, <$X, $B, rA, ~rB>)), KDF(~k, <$X, $B, rA, ~rB>)>)
             ) @ #vk.3 )
        case DBNet
        solve( !KU( ~alpha ) @ #vk.4 )
          case Ver2
          by contradiction /* cyclic */
        qed
      next
        case c_f
        solve( !KU( senc(~k, KDF(~k, <$X, $B, rA, ~rB>)) ) @ #vk.6 )
          case c_senc
          solve( !KU( ~k ) @ #vk.8 )
            case ShkRevealX
            by contradiction /* from formulas */
          next
            case ShkRevealY
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_on_compromised_prover:
  all-traces
  "∀ V P chal resp #l.
    ((DBSec( V, P, chal, resp ) @ #l) ∧ (∃ #j. !KeyComp( P ) @ #j)) ⇒
    ((∃ P2 #p2 #i #j #k.
       (((((!KeyComp( P2 ) @ #p2) ∧ (Send( V, chal ) @ #i)) ∧
          (Action( P2 ) @ #j)) ∧
         (Recv( V, resp ) @ #k)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∨
     (∃ #j. !KeyComp( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∃ #j. (!KeyComp( P ) @ #j)) ∧
  (∀ P2 #p2 #i #j #k.
    (!KeyComp( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!KeyComp( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifyState2( P, V, rA, rB, chal ) ▶₀ #l )
  case Ver2
  solve( Recv( $B,
               f(~alpha, <senc(s, KDF(s, <P, $B, rA, ~rB>)), KDF(s, <P, $B, rA, ~rB>)>)
         ) ▶₁ #l )
    case DBNet_case_1
    solve( !Shk( $X, $B, ~k ) ▶₂ #l )
      case ShkGen
      solve( !KeyComp( $X ) @ #j )
        case LtkReveal
        solve( !Ltk( $X, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( ~alpha ) @ #vk.3 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $X, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( ~alpha ) @ #vk.3 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $X.1, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( ~alpha ) @ #vk.3 )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case DBNet_case_2
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KeyComp( $X ) @ #j )
        case LtkReveal
        solve( !Ltk( $X, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $X, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $X.1, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X.1, $B, rA, ~rB>)), 
                         KDF(~k.1, <$X.1, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case DBNet_case_3
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KeyComp( $X ) @ #j )
        case LtkReveal
        solve( !Ltk( $X, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $X, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $X.1, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X.1, $B, rA, ~rB>)), 
                         KDF(~k.1, <$X.1, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case DBNet_case_4
    solve( !Shk( P, $B, s ) ▶₂ #l )
      case ShkGen
      solve( !KeyComp( $X ) @ #j )
        case LtkReveal
        solve( !Ltk( $X, k ) ▶₀ #j )
          case LtkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealX
        solve( !Shk( $X, $Y, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X, $B, rA, ~rB>)), KDF(~k.1, <$X, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case ShkRevealY
        solve( !Shk( $X, $X.1, k ) ▶₀ #j )
          case ShkGen
          solve( !KU( f(~alpha,
                        <senc(~k.1, KDF(~k.1, <$X.1, $B, rA, ~rB>)), 
                         KDF(~k.1, <$X.1, $B, rA, ~rB>)>)
                 ) @ #vk.3 )
            case DBNet
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          next
            case c_f
            solve( !KU( ~alpha ) @ #vk.4 )
              case Ver2
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: reid.spthy

  complete_trace_exists (exists-trace): verified (16 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (6 steps)
  no_claim_before_fastphase (all-traces): verified (7 steps)
  dbsec (all-traces): verified (33 steps)
  dbsec_on_honest_prover (all-traces): verified (30 steps)
  dbsec_on_compromised_prover (all-traces): verified (74 steps)

==============================================================================

real	0m2.538s
user	0m4.786s
sys	0m0.599s
