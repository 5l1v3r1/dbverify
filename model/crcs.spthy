/* Implementation of the CRCS protocol */
/* By Jorge Toro */

theory crcs

begin

builtins : asymmetric-encryption, signing, hashing 

functions: f/2

// -------------------- Protocol Rules -------------------- //
rule Prov1:				//prover sends a commit
		[ Fr(~m),
			!Ltk(P, ltk) ]
	--[ Start(~m),
			Action(P) ]->
		[ Send(P, sign(h(~m), ltk) ),
			ProverState1(P, ~m) ]

rule Ver1:				//verifier receives a commit
									//and sends a challenge
		[ Fr(~n),
			In(comm) ]
	--[ Start(~n),
			Send($V, ~n) ]->
		[ Out(~n),
			VerifierState1($V, ~n, comm) ]

rule Prov2:				//prover receives a challenge
									//and sends the response
		[ ProverState1(P, m),
			In(n) ]
	--[ Action(P) ]->
		[ Send(P, f(n, m)),
			ProverState2(P, m, n) ]

rule Ver2:				//verifier receives the response
		[ VerifierState1(V, n, comm),
			Recv(V, resp) ]
	-->
		[ VerifierState2(V, n, comm, resp) ]

rule Prov3:				//prover sends final message
		let s = <$V, m, n>
				signature = sign(s, ltk)
				msg = <s, signature>
		in
		[ ProverState2(P, m, n),
			!Ltk(P, ltk) ]
	--[ Action(P),
			End(m) ]->
		[ Send(P, msg) ]

rule Ver3:				//verifier receives the final message
						//checks signature and declares dbsec
		let s = <V, m, n>
				verif_initial_sig = verify(initial_sig, h(m), pkP) 
				verif_final_sig = verify(final_sig, s, pkP)
		in
		[ VerifierState2(V, n, initial_sig, f(n, m)),
			In(<s, final_sig>),
			!Pk(P, pkP) ]
	--[ Eq(verif_initial_sig, true),
			Eq(verif_final_sig, true),
			DBSec(V, P, n, f(n, m)),
			End(n) ]->
		[ ]

// -------------------- Reacgability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P m n #t1 #t2 #t3 #t4 #t5 #t6.
		
		//initial phase
		Start(m) @ t1 &
		Action(P) @ t1 &

		//fast phase
		Start(n) @ t2 &
		Send(V, n) @ t2 &
		Action(P) @ t3 &
		Recv(V, f(n,m)) @ t4 &

		//verification phase
		Action(P) @ t5 &
		DBSec(V, P, n, f(n,m) ) @ t6 &

		//oder check
		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6
	"
// -------------------- Restrictions --------------------------- //
// Only traces in which a = b holds whenever Eq(a, b) occurs 
restriction equals:
	"
	All a b #i. Eq(a,b) @ i ==> a = b
	"

//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ----------- Key Generation and Key Compromise -------- //
rule LtkGen:
	[ Fr(~k) ]--[ Once($X) ]->[	!Ltk($X, ~k), !Pk($X, pk(~k)), Out(pk(~k)) ]

rule ShkGen:
	[ Fr(~k) ]--[ Once(<$X, $Y>) ]->[ !Shk($X, $Y, ~k) ]

rule LtkReveal:
	[ !Ltk($X, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealX:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealY:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($Y) ]->[ Out(k), !KeyComp($Y) ]

// -------------- DB Network and Adversary  -------------//
rule DBAdv:
	[ In(m), !KeyComp($X) ]--[ Action($X) ]->[ Send($X, m) ]

rule DBNet:
	[ Send($X, m) ]--[ Action($Y), Recv($Y, m) ]->[ Recv($Y, m), Out(m) ]

// --------------- Sanity check & Restrictions ------------- //

// Each run id is unique
lemma unique_runid:
	"
	All x #i #j. (Start(x)@i & Start(x)@j) ==> #i=#j
	"

// Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x)@j ==> Ex #i. Start(x)@i & (#i=#j|i<j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. (Once(x)@i & Once(x)@j) ==> #i=#j
	"

/*
// Runs can always be completed
restriction completion:
	"
	All run #i. Start(run)@i ==> Ex #j. End(run)@j
	"
*/


// For each DBSec claim there was a fast phase before it
// *	Should this lemma fail, then the results for 
//		the security lemmas might be wrong
lemma no_claim_before_fastphase:
	"
	All V P chal resp #l. DBSec(V, P, chal, resp)@l ==>
		(Ex #i #j. Send(V, chal)@i & Recv(V, resp)@j & i<l & j<l)	|
		(Ex #j. !KeyComp(V)@j)		
	"


// -------------------- Security Lemmas ------------------------ //

// For each trace with a DBSec claim, it is the case
// that either the verifier is compromised, or the prover is not and he
// was active during the fast phase, or the prover is compromised and
// then there was a compromised prover active during the fast phase
lemma dbsec:
	"
	All V P chal resp #l. 
		DBSec(V, P, chal, resp)@l ==>
			(	//EITHER P is active in fast phase
				Ex #i #j #k.
					Send(V, chal)@i &
					Action(P)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) | 
			(	//OR (P is compromised AND there's a compromised 
				//agent active in fast phase)
				Ex P2 #p #p2 #i #j #k.
					!KeyComp(P)@p &
					!KeyComp(P2)@p2 &
					Send(V, chal)@i &
					Action(P2)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is not compromised
// *	If this lemma fails then there's a mafia fraud
lemma dbsec_on_honest_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & not (Ex #j. !KeyComp(P)@j)) ==>
			(Ex #i #j #k.
				Send(V, chal)@i &
				Action(P)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is compromised
// *	If this lemma fails then there's a distance fraud,
//		or a distance hijacking, or both
lemma dbsec_on_compromised_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & Ex #j. !KeyComp(P)@j) ==>
			(Ex P2 #p2 #i #j #k.
				!KeyComp(P2)@p2 &
				Send(V, chal)@i &
				Action(P2)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j) 
	"
end
