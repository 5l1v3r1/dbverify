/* Implementation of the Lookup protocol */
/* By Jorge Toro Pozo */

theory lookup

begin

builtins: asymmetric-encryption, symmetric-encryption

functions: g/3, f/2 

// -------------------- Protocol Rules -------------------- //
rule Ver1:
		[ Fr(~n) ]
	--[ Start(~n) ]->
		[ Out(~n),
			VerifSt1($V, ~n) ]

rule Prov1:
		[ Fr(~m),
			!Shk($V, $P, k),
			In(n) ]
	--[ Start(~m),
			Action($P) ]->
		[ Send($P,~m),
			ProvSt1($P, k, ~m, n) ]

rule Ver2:		//verifier sends challenge
		[ VerifSt1(V, n),
			Fr(~ch),
			In(m) ]
	--[ Send(V, ~ch) ]->
		[ VerifSt2(V, n, m, ~ch),
			Out(~ch) ]

rule Prov2:		//prover sends response
		let rp = f(ch, g(k, n, ~m))
		in
		[ ProvSt1(P, k, ~m, n),
			In(ch) ]
	--[ Action(P),
			End(~m) ]->
		[ Send(P, rp) ]

rule Ver3:		//verifier receives response
		let rp = f(ch, g(k,n,m))
		in 
		[ VerifSt2(V, n, m, ch),
			!Shk(V, $P, k),
			Recv(V, rp) ]
	--[ DBSec(V, $P, ch, rp),
			End(n) ]->
		[ ]

// -------------------- Reachability Lemmas ------------------ //
lemma complete_trace_exists:
	exists-trace
	"
	Ex V P m n k ch #t1 #t2 #t3 #t4 #t5 #t6.

		//intial phase
		Start(n) @ t1 &
		Start(m) @ t2 &
		Action(P) @ t2 &
		
		//fast phase
		Send(V, ch) @ t3 &			
		Action(P) @ t4 &
		Recv(V, f(ch, g(k,n,m))) @ t5 & 			

		//verification phase
		DBSec(V, P, ch, f(ch, g(k,n,m)) ) @ t6 &

		//order check
		t1 < t2 & t2 < t3 & t3 < t4 & t4 < t5 & t5 < t6
	"
//GENERIC CODE AFTER THIS LINE
//comment out whatever not needed

// ----------- Key Generation and Key Compromise -------- //
rule LtkGen:
	[ Fr(~k) ]--[ Once($X) ]->[	!Ltk($X, ~k), !Pk($X, pk(~k)), Out(pk(~k)) ]

rule ShkGen:
	[ Fr(~k) ]--[ Once(<$X, $Y>) ]->[ !Shk($X, $Y, ~k) ]

rule LtkReveal:
	[ !Ltk($X, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealX:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($X) ]->[ Out(k), !KeyComp($X) ]

rule ShkRevealY:
	[ !Shk($X, $Y, k) ]--[ !KeyComp($Y) ]->[ Out(k), !KeyComp($Y) ]

// -------------- DB Network and Adversary  -------------//
rule DBAdv:
	[ In(m), !KeyComp($X) ]--[ Action($X) ]->[ Send($X, m) ]

rule DBNet:
	[ Send($X, m) ]--[ Action($Y), Recv($Y, m) ]->[ Recv($Y, m), Out(m) ]

// --------------- Sanity check & Restrictions ------------- //

// Each run id is unique
lemma unique_runid:
	"
	All x #i #j. (Start(x)@i & Start(x)@j) ==> #i=#j
	"

// Each run ends after it starts
lemma end_after_start:
	"
	All x #j. End(x)@j ==> Ex #i. Start(x)@i & (#i=#j|i<j)
	"

// Only traces where Once(x) happened once
restriction once:
	"
	All x #i #j. (Once(x)@i & Once(x)@j) ==> #i=#j
	"

/*
// Runs can always be completed
restriction completion:
	"
	All run #i. Start(run)@i ==> Ex #j. End(run)@j
	"
*/


// For each DBSec claim there was a fast phase before it
// *	Should this lemma fail, then the results for 
//		the security lemmas might be wrong
lemma no_claim_before_fastphase:
	"
	All V P chal resp #l. DBSec(V, P, chal, resp)@l ==>
		(Ex #i #j. Send(V, chal)@i & Recv(V, resp)@j & i<l & j<l)	|
		(Ex #j. !KeyComp(V)@j)		
	"


// -------------------- Security Lemmas ------------------------ //

// For each trace with a DBSec claim, it is the case
// that either the verifier is compromised, or the prover is not and he
// was active during the fast phase, or the prover is compromised and
// then there was a compromised prover active during the fast phase
lemma dbsec:
	"
	All V P chal resp #l. 
		DBSec(V, P, chal, resp)@l ==>
			(	//EITHER P is active in fast phase
				Ex #i #j #k.
					Send(V, chal)@i &
					Action(P)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) | 
			(	//OR (P is compromised AND there's a compromised 
				//agent active in fast phase)
				Ex P2 #p #p2 #i #j #k.
					!KeyComp(P)@p &
					!KeyComp(P2)@p2 &
					Send(V, chal)@i &
					Action(P2)@j &
					Recv(V, resp)@k &
					i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is not compromised
// *	If this lemma fails then there's a mafia fraud
lemma dbsec_on_honest_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & not (Ex #j. !KeyComp(P)@j)) ==>
			(Ex #i #j #k.
				Send(V, chal)@i &
				Action(P)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j)
	"

// dbsec provided that prover is compromised
// *	If this lemma fails then there's a distance fraud,
//		or a distance hijacking, or both
lemma dbsec_on_compromised_prover:
	"
	All V P chal resp #l. 
		(DBSec(V, P, chal, resp)@l & Ex #j. !KeyComp(P)@j) ==>
			(Ex P2 #p2 #i #j #k.
				!KeyComp(P2)@p2 &
				Send(V, chal)@i &
				Action(P2)@j &
				Recv(V, resp)@k &
				i<j & j<k
			) |
			(Ex #j. !KeyComp(V)@j) 
	"
end
