theory PayPass_FixTF begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: MAC/4, adec/2, aenc/2, f/2, fst/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) InitCounter:
   [ ] --[ Once( <$R, $C, 'ATC'> ) ]-> [ CounterInReader( $R, $C, '0' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card1:
   [ Fr( ~nC ), Fr( ~ti ), !Shk( $R, $C, KM ) ]
  --[ Start( ~nC ) ]->
   [ CardState1( $C, $R, ~nC, (~nC⊕KM), ~ti ), MayLeak( $C, (~nC⊕KM) ) ]

  /*
  rule (modulo AC) Card1:
     [ Fr( ~nC ), Fr( ~ti ), !Shk( $R, $C, KM ) ]
    --[ Start( ~nC ) ]->
     [ CardState1( $C, $R, ~nC, z, ~ti ), MayLeak( $C, z ) ]
    variants (modulo AC)
    1. ~nC   = ~nC.7
       KM    = KM.7
       z     = (~nC.7⊕KM.7)
    
    2. ~nC   = ~nC.7
       KM    = zero
       z     = ~nC.7
    
    3. ~nC   = ~x.7
       KM    = ~x.7
       z     = zero
    
    4. ~nC   = ~x.7
       KM    = (~x.7⊕x.9)
       z     = x.9
  */

rule (modulo E) Reader1:
   [ Fr( ~UN ) ]
  --[ Start( ~UN ), Send( $R, <'ExchRelayResistData', ~UN> ) ]->
   [ ReaderState1( $R, ~UN ), Out( <'ExchRelayResistData', ~UN> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card2:
   [ CardState1( C, R, nC, xored, ti ), In( <'ExchRelayResistData', UN> ) ]
  -->
   [ CardState2( C, R, nC, ti, UN ), Send( C, <nC, ti, f(UN, xored)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader2:
   [ ReaderState1( R, UN ), Fr( ~Amount ), Recv( R, <nC, ti, msg> ) ]
  -->
   [
   ReaderState2( R, UN, nC, ti, msg, ~Amount ),
   Out( <'GenerateAC', UN, ~Amount, 'Currency'> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card3:
   [
   CardState2( C, R, nC, ti, UN ), !Shk( C, R, KM ), !Ltk( C, skC ),
   In( <'GenerateAC', UN, Amount, 'Currency'> ), In( <'AdvKnows_ATC', ATC> )
   ]
  --[ End( nC ) ]->
   [
   Send( C,
         <sign(<UN, MAC(senc(ATC, KM), Amount, ATC, UN)>, skC), 
          MAC(senc(ATC, KM), Amount, ATC, UN), ATC>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader3:
   [
   ReaderState2( R, UN, nC, ti, f(UN, (KM⊕nC)), Amount ),
   CounterInReader( R, $C, ATC2 ), !Pk( $C, pkC ), !Shk( R, $C, KM ),
   In( <SDAD, MAC(senc(ATC, KM), Amount, ATC, UN), ATC> )
   ]
  --[
  LessOrEqual( ATC2, ATC ),
  Eq( verify(SDAD, <UN, MAC(senc(ATC, KM), Amount, ATC, UN)>, pkC), true ),
  DBSec( R, $C, <'ExchRelayResistData', UN>, <nC, ti, f(UN, (KM⊕nC))> ),
  End( UN )
  ]->
   [ CounterInReader( R, $C, ('1'+ATC) ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Reader3:
     [
     ReaderState2( R, UN, nC, ti, f(UN, z), Amount ),
     CounterInReader( R, $C, ATC2 ), !Pk( $C, pkC ), !Shk( R, $C, KM ),
     In( <SDAD, MAC(senc(ATC, KM), Amount, ATC, UN), ATC> )
     ]
    --[
    LessOrEqual( ATC2, ATC ), Eq( z.1, true ),
    DBSec( R, $C, <'ExchRelayResistData', UN>, <nC, ti, f(UN, z)> ),
    End( UN )
    ]->
     [ CounterInReader( R, $C, ('1'+ATC) ) ]
    variants (modulo AC)
     1. ATC   = ATC.24
        Amount
              = Amount.26
        KM    = KM.27
        SDAD  = SDAD.29
        UN    = UN.30
        nC    = KM.27
        pkC   = pkC.32
        z     = zero
        z.1   = verify(SDAD.29,
                       <UN.30, MAC(senc(ATC.24, KM.27), Amount.26, ATC.24, UN.30)>, pkC.32)
    
     2. ATC   = ATC.24
        Amount
              = Amount.26
        KM    = KM.27
        SDAD  = SDAD.29
        UN    = UN.30
        nC    = nC.31
        pkC   = pkC.32
        z     = (KM.27⊕nC.31)
        z.1   = verify(SDAD.29,
                       <UN.30, MAC(senc(ATC.24, KM.27), Amount.26, ATC.24, UN.30)>, pkC.32)
    
     3. ATC   = ATC.24
        Amount
              = Amount.26
        KM    = KM.27
        SDAD  = SDAD.29
        UN    = UN.30
        nC    = zero
        pkC   = pkC.32
        z     = KM.27
        z.1   = verify(SDAD.29,
                       <UN.30, MAC(senc(ATC.24, KM.27), Amount.26, ATC.24, UN.30)>, pkC.32)
    
     4. ATC   = ATC.24
        Amount
              = Amount.26
        KM    = zero
        SDAD  = SDAD.29
        UN    = UN.30
        nC    = nC.31
        pkC   = pkC.32
        z     = nC.31
        z.1   = verify(SDAD.29,
                       <UN.30, MAC(senc(ATC.24, zero), Amount.26, ATC.24, UN.30)>, pkC.32)
    
     5. ATC   = ATC.26
        Amount
              = Amount.28
        KM    = KM.29
        SDAD  = SDAD.31
        UN    = UN.32
        nC    = (KM.29⊕z.36)
        pkC   = pkC.34
        z     = z.36
        z.1   = verify(SDAD.31,
                       <UN.32, MAC(senc(ATC.26, KM.29), Amount.28, ATC.26, UN.32)>, pkC.34)
    
     6. ATC   = ATC.26
        Amount
              = Amount.28
        KM    = (nC.33⊕z.36)
        SDAD  = SDAD.31
        UN    = UN.32
        nC    = nC.33
        pkC   = pkC.34
        z     = z.36
        z.1   = verify(SDAD.31,
                       <UN.32, MAC(senc(ATC.26, (nC.33⊕z.36)), Amount.28, ATC.26, UN.32)>,
                       pkC.34)
    
     7. ATC   = ATC.35
        Amount
              = Amount.37
        KM    = zero
        SDAD  = sign(<UN.41, MAC(senc(ATC.35, zero), Amount.37, ATC.35, UN.41)>,
                     x.67)
        UN    = UN.41
        nC    = nC.42
        pkC   = pk(x.67)
        z     = nC.42
        z.1   = true
    
     8. ATC   = ATC.35
        Amount
              = Amount.37
        KM    = (x.62⊕x.63)
        SDAD  = SDAD.40
        UN    = UN.41
        nC    = (x.62⊕x.67)
        pkC   = pkC.43
        z     = (x.63⊕x.67)
        z.1   = verify(SDAD.40,
                       <UN.41, MAC(senc(ATC.35, (x.62⊕x.63)), Amount.37, ATC.35, UN.41)>,
                       pkC.43)
    
     9. ATC   = ATC.36
        Amount
              = Amount.38
        KM    = KM.39
        SDAD  = sign(<UN.42, MAC(senc(ATC.36, KM.39), Amount.38, ATC.36, UN.42)>,
                     x.69)
        UN    = UN.42
        nC    = KM.39
        pkC   = pk(x.69)
        z     = zero
        z.1   = true
    
    10. ATC   = ATC.36
        Amount
              = Amount.38
        KM    = KM.39
        SDAD  = sign(<UN.42, MAC(senc(ATC.36, KM.39), Amount.38, ATC.36, UN.42)>,
                     x.69)
        UN    = UN.42
        nC    = nC.43
        pkC   = pk(x.69)
        z     = (KM.39⊕nC.43)
        z.1   = true
    
    11. ATC   = ATC.36
        Amount
              = Amount.38
        KM    = KM.39
        SDAD  = sign(<UN.42, MAC(senc(ATC.36, KM.39), Amount.38, ATC.36, UN.42)>,
                     x.69)
        UN    = UN.42
        nC    = zero
        pkC   = pk(x.69)
        z     = KM.39
        z.1   = true
    
    12. ATC   = ATC.36
        Amount
              = Amount.38
        KM    = KM.39
        SDAD  = sign(<UN.42, MAC(senc(ATC.36, KM.39), Amount.38, ATC.36, UN.42)>,
                     x.69)
        UN    = UN.42
        nC    = (KM.39⊕z.46)
        pkC   = pk(x.69)
        z     = z.46
        z.1   = true
    
    13. ATC   = ATC.37
        Amount
              = Amount.39
        KM    = (nC.44⊕z.47)
        SDAD  = sign(<UN.43, 
                      MAC(senc(ATC.37, (nC.44⊕z.47)), Amount.39, ATC.37, UN.43)>,
                     x.71)
        UN    = UN.43
        nC    = nC.44
        pkC   = pk(x.71)
        z     = z.47
        z.1   = true
    
    14. ATC   = ATC.38
        Amount
              = Amount.40
        KM    = (x.68⊕x.69)
        SDAD  = sign(<UN.44, 
                      MAC(senc(ATC.38, (x.68⊕x.69)), Amount.40, ATC.38, UN.44)>,
                     x.72)
        UN    = UN.44
        nC    = (x.68⊕x.73)
        pkC   = pk(x.72)
        z     = (x.69⊕x.73)
        z.1   = true
    // loop breaker: [1]
  */

restriction equal:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction less_or_equal:
  "∀ x y #i. (LessOrEqual( x, y ) @ #i) ⇒ ((x = y) ∨ (∃ z. (x+z) = y))"

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( Net( <nC, ti, f(UN, z)> ) ▶₀ #k )
    case DBSend_case_1
    solve( ReaderState2( $Y, UN, ~nC, ~ti, f(UN, z), Amount ) ▶₀ #l )
      case Reader2_case_1
      solve( !Pk( $C, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !Shk( $Y, $C, KM ) ▶₃ #l )
          case ShkGen
          solve( Send( $Y, <'ExchRelayResistData', ~UN> ) @ #i )
            case Reader1
            solve( Send( $C, <~nC, ~ti, f(~UN, z)> ) @ #j )
              case DBSend
              solve( Send( $C, <~nC, ~ti, f(~UN, z)> ) ▶₀ #j )
                case Card2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~Amount, ATC, ~UN)>, ~k.2)
                         ) @ #vk.1 )
                    case DBSend
                    solve( splitEqs(8) )
                      case split
                      solve( CounterInReader( $C, $C, ATC ) ▶₁ #l )
                        case InitCounter
                        solve( !KU( ~UN ) @ #vk.8 )
                          case Reader1
                          solve( !KU( ~Amount ) @ #vk.13 )
                            case Reader2
                            solve( !KU( MAC(senc('0', ~k), ~Amount, '0', ~UN) ) @ #vk.7 )
                              case DBSend
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Card1
    solve( !Shk( $R, $C, KM ) ▶₂ #i )
      case ShkGen
      solve( Start( ~nC ) @ #j )
        case Card1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Card1
    solve( !Shk( $R, $C, KM ) ▶₂ #i )
      case ShkGen
      solve( Start( ~nC ) @ #j )
        case Card1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Card3
  solve( CardState2( C, R, x, ti, UN ) ▶₀ #j )
    case Card2
    by contradiction /* from formulas */
  qed
next
  case Reader3
  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
    case case_1
    solve( ReaderState2( R, x, nC, ti, f(x, z), Amount ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    next
      case Reader2_case_5
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( ReaderState2( R, x, nC, ti, f(x, z), Amount ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    next
      case Reader2_case_5
      by contradiction /* from formulas */
    qed
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  next
    case Reader2_case_5
    by contradiction /* from formulas */
  qed
next
  case case_2
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  next
    case Reader2_case_5
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.7 )
            case Reader1
            by contradiction /* cyclic */
          next
            case Reader2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      by solve( !Shk( $R, $C, KM ) ▶₃ #l )
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.12 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k.1) ) @ #vk.13 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.15 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.13 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.12 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k.1) ) @ #vk.13 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.15 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.13 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_5
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.12 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.13 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k.1) ) @ #vk.13 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.15 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.13 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.9 )
            case Reader1
            by contradiction /* cyclic */
          next
            case Reader2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      by solve( !Shk( $R, $C, KM ) ▶₃ #l )
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)
                   ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.14 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z.1), ~k.1) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)
                   ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.14 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z.1), ~k.1) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_5
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)
                   ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split
                solve( !KU( f(~UN, z) ) @ #vk.14 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_f
                  solve( !KU( ~UN ) @ #vk.15 )
                    case Reader1
                    by contradiction /* cyclic */
                  next
                    case Reader2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z.1), ~k.1) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k.1 ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.7 )
            case Reader1
            by contradiction /* cyclic */
          next
            case Reader2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      by solve( !Shk( $R, $C, KM ) ▶₃ #l )
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_5
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.22 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.22 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.23 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.21 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.9 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.11 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.9 )
            case Reader1
            by contradiction /* cyclic */
          next
            case Reader2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      by solve( !Shk( $R, $C, KM ) ▶₃ #l )
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_5
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, 
                          MAC(senc((ATC2+z.1), ~k.1), ~Amount, (ATC2+z.1), ~UN)>,
                         ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            next
              case Reader2
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    next
                      case Reader2
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.11 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.23 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.25 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.20 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              solve( (#vr.24, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case Reader2
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                                case Reader1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case d_0_snd
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.24 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.25 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.21 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.26, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                next
                                  case d_0_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.21 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case Reader2
                            solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.22, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.21 )
                                  case Reader1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case d_0_snd
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.21 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.23 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.20 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            solve( (#vr.24, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.25, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case Reader2
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            solve( ReaderState1( R.1, UN.1 ) ▶₀ #vr.20 )
                              case Reader1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case d_0_snd
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~nC ) @ #vk.11 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( (~k⊕nC) ) @ #vk.23 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( ~z ) @ #vk.23 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.11 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.24 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.22, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case Reader2
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.15, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          solve( ReaderState1( R, UN.1 ) ▶₀ #vr.14 )
                            case Reader1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case d_0_snd
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₃ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.10 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.23 )
                          case Leak
                          solve( !KU( ~k ) @ #vk.24 )
                            case Leak
                            solve( !KU( ~nC.1 ) @ #vk.25 )
                              case DBSend
                              solve( !KU( ~nC.2 ) @ #vk.27 )
                                case DBSend
                                solve( CounterInReader( $C, $C, ATC ) ▶₁ #l )
                                  case InitCounter
                                  solve( !KU( ~UN ) @ #vk.19 )
                                    case Reader1
                                    solve( !KU( ~Amount ) @ #vk.22 )
                                      case Reader2
                                      solve( !KU( ~nC ) @ #vk.28 )
                                        case DBSend
                                        solve( !KU( MAC(senc('0', ~k.1), ~Amount, '0', ~UN) ) @ #vk.19 )
                                          case DBSend
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderState2( V, UN, nC, ti, f(UN, z), Amount ) ▶₀ #l )
    case Reader2_case_3
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₃ #l )
          case ShkGen
          solve( !KU( sign(<~UN, MAC(senc(ATC, ~k.1), ~Amount, ATC, ~UN)>, ~k)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nC.1 ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_2
                solve( splitEqs(2) )
                  case split
                  solve( !KU( f(~UN, z) ) @ #vk.10 )
                    case DBSend
                    solve( (¬(#vr.18 < #e))  ∥ (∃ #j. (End( ~nC.2 ) @ #j) ∧ #j < #e) )
                      case case_1
                      solve( splitEqs(4) )
                        case split
                        solve( splitEqs(1) )
                          case split_case_2
                          solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.9 )
                            case c_xor_case_1
                            solve( !KU( (~k⊕~k.1) ) @ #vk.21 )
                              case c_xor
                              solve( !KU( ~k.1 ) @ #vk.23 )
                                case Leak
                                solve( End( ~nC.2 ) @ #j )
                                  case Card3
                                  solve( CardState2( C, R, ~nC, ti, UN ) ▶₀ #j )
                                    case Card2
                                    solve( !Shk( $C, $C, KM ) ▶₁ #j )
                                      case ShkGen
                                      solve( !Ltk( $C, skC ) ▶₂ #j )
                                        case LtkGen
                                        solve( !KU( ~k.2 ) @ #vk.29 )
                                          case ShkRevealX
                                          solve( !KU( ~nC ) @ #vk.30 )
                                            case DBSend
                                            solve( CounterInReader( $C, $C, ATC.1 ) ▶₁ #l )
                                              case InitCounter
                                              solve( !KU( ~UN.1 ) @ #vk.19 )
                                                case Reader1
                                                solve( !KU( ~Amount.1 ) @ #vk.22 )
                                                  case Reader2
                                                  solve( !KU( ~nC.1 ) @ #vk.30 )
                                                    case DBSend
                                                    solve( !KU( MAC(senc('0', ~k), ~Amount.1, '0', ~UN.1)
                                                           ) @ #vk.18 )
                                                      case DBSend
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: PayPass_FixTF.spthy

  reachability (exists-trace): verified (17 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (17 steps)
  fast_before_claim (all-traces): verified (14 steps)
  dbsec (all-traces): verified (1556 steps)
  dbsec_hnst (all-traces): verified (1442 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (23 steps)
  dbsec_hnst_star (all-traces): falsified - found trace (29 steps)

==============================================================================

real	1m58.327s
user	11m51.263s
sys	0m59.330s
