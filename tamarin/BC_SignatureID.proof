theory BC_SignatureID begin

// Function signature and definition of the equational theory E

functions: XOR/2, adec/2, aenc/2, f/2, fst/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    XOR(x, XOR(x, y)) = y,
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Prov1:
   [ Fr( ~beta ), Fr( ~k ) ]
  --[ Start( ~beta ) ]->
   [
   Send( $P, senc(~beta, ~k) ), ProverState1( $P, ~beta, ~k ),
   MayLeak( $P, ~beta )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver1:
   [ Fr( ~alpha ), In( commit ) ]
  --[ Start( ~alpha ), Send( $V, ~alpha ) ]->
   [ Out( ~alpha ), VerifierState1( $V, ~alpha, commit ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProverState1( P, beta, k ), In( alpha ) ]
  -->
   [ Send( P, XOR(alpha, beta) ), ProverState2( P, beta, k, alpha ) ]

  /*
  rule (modulo AC) Prov2:
     [ ProverState1( P, beta, k ), In( alpha ) ]
    -->
     [ Send( P, z ), ProverState2( P, beta, k, alpha ) ]
    variants (modulo AC)
    1. alpha = alpha.6
       beta  = beta.6
       z     = XOR(alpha.6, beta.6)
    
    2. alpha = x.6
       beta  = XOR(x.6, x.7)
       z     = x.7
  */

rule (modulo E) Ver2:
   [ VerifierState1( V, alpha, commit ), Recv( V, resp ) ]
  -->
   [ VerifierState2( V, alpha, XOR(alpha, resp), commit ) ]

  /*
  rule (modulo AC) Ver2:
     [ VerifierState1( V, alpha, commit ), Recv( V, resp ) ]
    -->
     [ VerifierState2( V, alpha, z, commit ) ]
    variants (modulo AC)
    1. alpha = alpha.6
       resp  = resp.6
       z     = XOR(alpha.6, resp.6)
    
    2. alpha = x.6
       resp  = XOR(x.6, x.8)
       z     = x.8
  */

rule (modulo E) Prov3:
   [ ProverState2( P, beta, k, alpha ), !Ltk( P, skP ) ]
  --[ End( beta ) ]->
   [ Send( P, <k, sign(f(alpha, beta), skP)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver3:
   [
   VerifierState2( V, alpha, beta, senc(beta, k) ), In( <k, signature> ),
   !Pk( $P, pkP )
   ]
  --[
  Eq( verify(signature, f(alpha, beta), pkP), true ),
  DBSec( V, $P, alpha, XOR(alpha, beta) ), End( alpha )
  ]->
   [ ]

  /*
  rule (modulo AC) Ver3:
     [
     VerifierState2( V, alpha, beta, senc(beta, k) ), In( <k, signature> ),
     !Pk( $P, pkP )
     ]
    --[ Eq( z, true ), DBSec( V, $P, alpha, z.1 ), End( alpha ) ]->
     [ ]
    variants (modulo AC)
    1. alpha = alpha.10
       beta  = beta.10
       pkP   = pkP.10
       signature
             = signature.10
       z     = verify(signature.10, f(alpha.10, beta.10), pkP.10)
       z.1   = XOR(alpha.10, beta.10)
    
    2. alpha = x.10
       beta  = x.11
       pkP   = pk(x.13)
       signature
             = sign(f(x.10, x.11), x.13)
       z     = true
       z.1   = XOR(x.10, x.11)
    
    3. alpha = x.10
       beta  = XOR(x.10, x.11)
       pkP   = pkP.12
       signature
             = signature.12
       z     = verify(signature.12, f(x.10, XOR(x.10, x.11)), pkP.12)
       z.1   = x.11
    
    4. alpha = x.10
       beta  = XOR(x.10, x.11)
       pkP   = pk(x.13)
       signature
             = sign(f(x.10, XOR(x.10, x.11)), x.13)
       z     = true
       z.1   = x.11
  */

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( Net( resp ) ▶₀ #k )
  case DBSend_case_2
  solve( VerifierState2( $Y, chal, beta.1, senc(beta.1, k.1) ) ▶₀ #l )
    case Ver2_case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( Send( $Y, ~alpha.1 ) @ #i )
        case Ver1
        solve( Send( $P, XOR(alpha.1, ~beta.1) ) @ #j )
          case DBSend
          solve( Send( $P, XOR(alpha.1, ~beta.1) ) ▶₀ #j )
            case Prov2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( sign(f(~alpha, ~beta), ~k.1) ) @ #vk.2 )
                case DBSend
                solve( !KU( senc(~beta, k) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( ~alpha ) @ #vk.4 )
                    case Ver1
                    solve( !KU( ~k ) @ #vk.4 )
                      case DBSend
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~beta ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~alpha ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~beta ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~alpha ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov3
  solve( ProverState2( P, x, k, alpha ) ▶₀ #j )
    case Prov2
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifierState2( V, x, beta, senc(beta, k) ) ▶₀ #j )
    case Ver2_case_1
    by contradiction /* from formulas */
  next
    case Ver2_case_2
    by contradiction /* from formulas */
  next
    case Ver2_case_3
    by contradiction /* from formulas */
  next
    case Ver2_case_4
    by contradiction /* from formulas */
  next
    case Ver2_case_5
    by contradiction /* from formulas */
  next
    case Ver2_case_6
    by contradiction /* from formulas */
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, beta, senc(beta, k) ) ▶₀ #l )
  case Ver2_case_1
  by contradiction /* from formulas */
next
  case Ver2_case_2
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      by contradiction /* from formulas */
    next
      case split_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case Ver2_case_3
  by contradiction /* from formulas */
next
  case Ver2_case_4
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      by contradiction /* from formulas */
    next
      case split_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case Ver2_case_5
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      by contradiction /* from formulas */
    next
      case split_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case Ver2_case_6
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      by contradiction /* from formulas */
    next
      case split_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, beta, senc(beta, k) ) ▶₀ #l )
  case Ver2_case_2
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, ~beta), ~k.1) ) @ #vk.2 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          solve( !KU( f(~alpha, ~beta) ) @ #vk.6 )
            case c_f
            solve( !KU( ~beta ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                solve( !KU( senc(~beta, k) ) @ #vk.7 )
                  case DBSend
                  solve( !KU( ~alpha ) @ #vk.7 )
                    case Ver1
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, beta, senc(beta, k) ) ▶₀ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( sign(f(~alpha, XOR(~alpha, senc(~beta, ~k))), ~k.2)
           ) @ #vk.2 )
      case c_sign
      solve( !KU( ~k.2 ) @ #vk.5 )
        case LtkReveal
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, ~beta), ~k.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
          case case_1
          solve( !KU( ~alpha ) @ #vk.4 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( ~alpha ) @ #vk.4 )
            case Ver1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case split_case_2
      solve( !KU( sign(f(~alpha, XOR(~alpha, XOR(alpha.1, ~beta))), ~k.1)
             ) @ #vk.2 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( sign(f(~alpha,
                       XOR(~alpha, <~k, sign(f(alpha.1, ~beta), ~k.1)>)),
                     ~k.3)
           ) @ #vk.2 )
      case c_sign
      solve( !KU( ~k.3 ) @ #vk.6 )
        case LtkReveal
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_1
          solve( !KU( ~alpha ) @ #vk.5 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( senc(~beta, k) ) @ #vk.3 )
            case DBSend
            solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
              case DBSend
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case c_XOR
              solve( !KU( ~beta ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k ) @ #vk.5 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( ~beta ) @ #vk.6 )
              case DBSend_case_1
              solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                case DBSend
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_XOR
                solve( !KU( ~k.2 ) @ #vk.7 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              qed
            next
              case DBSend_case_2
              solve( !KU( ~alpha ) @ #vk.6 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case split_case_2
      solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_5
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_1
          solve( !KU( ~alpha ) @ #vk.5 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( senc(~beta, k) ) @ #vk.3 )
            case DBSend
            solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
              case DBSend
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case c_XOR
              solve( !KU( ~beta ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k ) @ #vk.5 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( ~beta ) @ #vk.6 )
              case DBSend_case_1
              solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                case DBSend
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_XOR
                solve( !KU( ~k.2 ) @ #vk.7 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              qed
            next
              case DBSend_case_2
              solve( !KU( ~alpha ) @ #vk.6 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case split_case_2
      solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_6
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_1
          solve( !KU( ~alpha ) @ #vk.5 )
            case Ver1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( senc(~beta, k) ) @ #vk.3 )
            case DBSend
            solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
              case DBSend
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case c_XOR
              solve( !KU( ~beta ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k ) @ #vk.5 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( ~beta ) @ #vk.6 )
              case DBSend_case_1
              solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                case DBSend
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_XOR
                solve( !KU( ~k.2 ) @ #vk.7 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              qed
            next
              case DBSend_case_2
              solve( !KU( ~alpha ) @ #vk.6 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case split_case_2
      solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
        case c_sign
        solve( !KU( ~k.1 ) @ #vk.6 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, beta, senc(beta, k) ) ▶₀ #l )
  case Ver2_case_4
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
          case case_2
          solve( !KU( senc(~beta, k) ) @ #vk.3 )
            case DBSend
            solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
              case c_XOR
              solve( !KU( ~beta ) @ #vk.6 )
                case Leak
                solve( !KU( ~alpha ) @ #vk.6 )
                  case Ver1
                  solve( !KU( ~k ) @ #vk.6 )
                    case DBSend
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, chal, beta, senc(beta, k) ) ▶₀ #l )
  case Ver2_case_1
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.4 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !KU( sign(f(~alpha, XOR(~alpha, senc(~beta, ~k))), ~k.2)
               ) @ #vk.2 )
          case c_sign
          solve( !KU( ~k.2 ) @ #vk.5 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~beta ) @ #j )
          case Prov3
          solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
            case Prov2
            solve( !Ltk( $X, skP ) ▶₁ #j )
              case LtkGen
              solve( !KU( sign(f(~alpha.1, XOR(~alpha.1, senc(~beta, ~k))), ~k.3)
                     ) @ #vk.2 )
                case c_sign
                solve( !KU( ~k.3 ) @ #vk.6 )
                  case LtkReveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.4 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~beta.1 ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( sign(f(~alpha, ~beta), ~k.1) ) @ #vk.2 )
            case DBSend
            solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
              case case_1
              solve( !KU( ~alpha ) @ #vk.4 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( ~alpha ) @ #vk.4 )
                case Ver1
                by contradiction /* cyclic */
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.6 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_2
          solve( !KU( sign(f(~alpha, XOR(~alpha, XOR(alpha.1, ~beta))), ~k.1)
                 ) @ #vk.2 )
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.6 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~beta.1 ) @ #j )
          case Prov3
          solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
            case Prov2
            solve( !Ltk( $X, skP ) ▶₁ #j )
              case LtkGen
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( sign(f(~alpha.1, XOR(~alpha.1, XOR(alpha, ~beta))), ~k.3)
                       ) @ #vk.2 )
                  case c_sign
                  solve( !KU( ~k.3 ) @ #vk.6 )
                    case LtkReveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case split_case_2
                solve( !KU( ~alpha ) @ #vk.4 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~beta.1 ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.7 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !KU( sign(f(~alpha,
                           XOR(~alpha, <~k, sign(f(alpha.1, ~beta), ~k.1)>)),
                         ~k.3)
               ) @ #vk.2 )
          case c_sign
          solve( !KU( ~k.3 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~beta ) @ #j )
          case Prov3
          solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
            case Prov2
            solve( !KU( sign(f(~alpha.1,
                               XOR(~alpha.1, <~k, sign(f(alpha, ~beta), ~k.1)>)),
                             ~k.3)
                   ) @ #vk.2 )
              case c_sign
              solve( !KU( ~k.3 ) @ #vk.6 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.7 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~alpha ) @ #j )
          case Prov3
          by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
          case DBSend
          solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
            case case_1
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( senc(~beta, k) ) @ #vk.3 )
                case DBSend
                solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_XOR
                  solve( !KU( ~beta ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k ) @ #vk.5 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~beta ) @ #vk.6 )
                  case DBSend_case_1
                  solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                    case DBSend
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_XOR
                    solve( !KU( ~k.2 ) @ #vk.7 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case DBSend_case_2
                  solve( !KU( ~alpha ) @ #vk.6 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            next
              case case_2
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      next
        case split_case_2
        solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~alpha ) @ #j )
        case Prov3
        by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Ver2_case_5
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
          case DBSend
          solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
            case case_1
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( senc(~beta, k) ) @ #vk.3 )
                case DBSend
                solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_XOR
                  solve( !KU( ~beta ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k ) @ #vk.5 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~beta ) @ #vk.6 )
                  case DBSend_case_1
                  solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                    case DBSend
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_XOR
                    solve( !KU( ~k.2 ) @ #vk.7 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case DBSend_case_2
                  solve( !KU( ~alpha ) @ #vk.6 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            next
              case case_2
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      next
        case split_case_2
        solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~alpha ) @ #j )
        case Prov3
        by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Ver2_case_6
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~alpha ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( sign(f(~alpha, beta), ~k.1) ) @ #vk.2 )
          case DBSend
          solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~beta ) @ #j) ∧ #j < #e) )
            case case_1
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( !KU( ~alpha ) @ #vk.5 )
                case Ver1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( !KU( senc(~beta, k) ) @ #vk.3 )
                case DBSend
                solve( !KU( XOR(~alpha, ~beta) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_XOR
                  solve( !KU( ~beta ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k ) @ #vk.5 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~beta ) @ #vk.6 )
                  case DBSend_case_1
                  solve( !KU( XOR(~alpha, ~beta) ) @ #vk.5 )
                    case DBSend
                    solve( !KU( ~alpha ) @ #vk.6 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_XOR
                    solve( !KU( ~k.2 ) @ #vk.7 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case DBSend_case_2
                  solve( !KU( ~alpha ) @ #vk.6 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
              case case_1
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            next
              case case_2
              solve( End( ~beta ) @ #j )
                case Prov3
                solve( ProverState2( P, ~beta, k, alpha ) ▶₀ #j )
                  case Prov2
                  solve( !KU( ~alpha ) @ #vk.5 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, ~beta, beta.1, senc(beta.1, k) ) ▶₀ #j )
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      next
        case split_case_2
        solve( !KU( sign(f(~alpha, XOR(~alpha, resp)), ~k.1) ) @ #vk.2 )
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.6 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~alpha ) @ #j )
        case Prov3
        by solve( ProverState2( P, ~alpha, k, alpha.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, ~alpha, beta, senc(beta, k) ) ▶₀ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: BC_SignatureID.spthy

  reachability (exists-trace): verified (13 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (11 steps)
  fast_before_claim (all-traces): verified (20 steps)
  dbsec (all-traces): falsified - found trace (12 steps)
  dbsec_hnst (all-traces): verified (113 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (12 steps)
  dbsec_hnst_star (all-traces): verified (232 steps)

==============================================================================

real	0m3.497s
user	0m19.138s
sys	0m1.813s
