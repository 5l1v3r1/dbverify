theory SwissKnife begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, f/2, fst/1, g/2, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Verif1:
   [ Fr( ~n ) ] --[ Start( ~n ) ]-> [ VerifState1( ~n ), Out( ~n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover1:
   [ In( n ), Fr( ~m ), !Shk( $V, $P, x ) ]
  --[ Start( ~m ) ]->
   [
   Send( $P, ~m ),
   ProverState1( $V, $P, n, ~m,
                 <f(x, <'hello', ~m>), (x⊕f(x, <'hello', ~m>))>
   ),
   MayLeak( $P, <f(x, <'hello', ~m>), x> )
   ]

  /*
  rule (modulo AC) Prover1:
     [ In( n ), Fr( ~m ), !Shk( $V, $P, x ) ]
    --[ Start( ~m ) ]->
     [
     Send( $P, ~m ), ProverState1( $V, $P, n, ~m, <f(x, <'hello', ~m>), z> ),
     MayLeak( $P, <f(x, <'hello', ~m>), x> )
     ]
    variants (modulo AC)
    1. ~m    = ~m.9
       x     = x.11
       z     = (x.11⊕f(x.11, <'hello', ~m.9>))
    
    2. ~m    = ~m.9
       x     = zero
       z     = f(zero, <'hello', ~m.9>)
  */

rule (modulo E) Verif2:
   [ VerifState1( n ), In( m ), Fr( ~c ) ]
  --[ Send( $V, ~c ) ]->
   [ VerifState2( $V, n, m, ~c ), Out( ~c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover2:
   [ ProverState1( V, P, n, m, compl ), In( c ), !Shk( V, P, x ) ]
  -->
   [ Send( P, g(c, compl) ), ProverState2( V, P, n, m, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verif3:
   [
   VerifState2( V, n, m, c ), !Shk( V, $P, x ),
   Recv( V, g(c, <f(x, <'hello', m>), (x⊕f(x, <'hello', m>))>) )
   ]
  -->
   [
   VerifState3( V, $P, n, m, c,
                g(c, <f(x, <'hello', m>), (x⊕f(x, <'hello', m>))>)
   )
   ]

  /*
  rule (modulo AC) Verif3:
     [
     VerifState2( V, n, m, c ), !Shk( V, $P, x ),
     Recv( V, g(c, <f(x, <'hello', m>), z>) )
     ]
    -->
     [ VerifState3( V, $P, n, m, c, g(c, <f(x, <'hello', m>), z>) ) ]
    variants (modulo AC)
    1. m     = m.10
       x     = x.12
       z     = (x.12⊕f(x.12, <'hello', m.10>))
    
    2. m     = m.10
       x     = zero
       z     = f(zero, <'hello', m.10>)
  */

rule (modulo E) Prover3:
   [ ProverState2( V, P, n, m, c ), !Shk( V, P, x ) ]
  -->
   [ Send( P, <f(x, <c, P, n, m>), c> ), ProverState3( V, P, n, m, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verif4:
   [
   VerifState3( V, P, n, m, c, resp ), In( <f(x, <c, P, n, m>), c> ),
   !Shk( V, P, x )
   ]
  --[ DBSec( V, P, c, resp ), End( n ) ]->
   [ Out( f(x, m) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prover4:
   [ ProverState3( V, P, n, m, c ), !Shk( V, P, x ), In( f(x, m) ) ]
  --[ End( m ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( Net( resp ) ▶₀ #k )
  case DBSend_case_2
  solve( Send( $Y, chal ) @ #i )
    case Verif2
    solve( VerifState3( $Y, P, n.1, m.2, ~c,
                        g(c.1, <f(~k.1, <'hello', ~m.1>), (~k.1⊕f(~k.1, <'hello', ~m.1>))>)
           ) ▶₀ #l )
      case Verif3_case_1
      solve( !Shk( $V, $X, x ) ▶₂ #l )
        case ShkGen
        solve( Send( $X,
                     g(~c, <f(~k.1, <'hello', ~m>), (~k.1⊕f(~k.1, <'hello', ~m>))>)
               ) @ #j )
          case DBSend
          solve( Send( $X, g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
                 ) ▶₀ #j )
            case Prover2
            solve( !KU( ~m ) @ #vk.4 )
              case DBSend
              solve( !KU( f(~k, <~c, $X, ~n, ~m>) ) @ #vk.2 )
                case DBSend
                solve( !KU( ~c ) @ #vk.3 )
                  case Verif2
                  solve( !KU( ~n ) @ #vk.4 )
                    case Verif1
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Shk( $V, $P, x ) ▶₂ #i )
      case ShkGen
      solve( Start( ~m ) @ #j )
        case Prover1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Verif1
    solve( Start( ~n ) @ #j )
      case Verif1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prover1
    solve( !Shk( $V, $P, x ) ▶₂ #i )
      case ShkGen
      solve( Start( ~m ) @ #j )
        case Prover1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Verif1
    solve( Start( ~n ) @ #j )
      case Verif1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prover4
  solve( ProverState3( V, P, n, x, c ) ▶₀ #j )
    case Prover3
    by contradiction /* from formulas */
  qed
next
  case Verif4
  solve( VerifState3( V, P, x, m, c, resp ) ▶₀ #j )
    case Verif3_case_1
    by contradiction /* from formulas */
  next
    case Verif3_case_2
    by contradiction /* from formulas */
  next
    case Verif3_case_3
    by contradiction /* from formulas */
  next
    case Verif3_case_4
    by contradiction /* from formulas */
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifState3( V, P, n, m, chal, resp ) ▶₀ #l )
  case Verif3_case_1
  by contradiction /* from formulas */
next
  case Verif3_case_2
  by contradiction /* from formulas */
next
  case Verif3_case_3
  by contradiction /* from formulas */
next
  case Verif3_case_4
  by contradiction /* from formulas */
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifState3( V, P, n, m, chal, resp ) ▶₀ #l )
  case Verif3_case_1
  solve( !KU( f(x, <~c, $P, ~n, ~m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k ) ▶₂ #l )
        case ShkGen
        solve( !KU( ~m ) @ #vk.3 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k ) ▶₂ #l )
        case ShkGen
        solve( !KU( ~m ) @ #vk.3 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verif3_case_2
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
               ) @ #vk.8 )
          case DBSend
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_3
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.4, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.4, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
               ) @ #vk.8 )
          case DBSend
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Verif3_case_4
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.4, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.4, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.8, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.8, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.8, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.8, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
               ) @ #vk.8 )
          case DBSend
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.4 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifState3( V, P, n, m, chal, resp ) ▶₀ #l )
  case Verif3_case_1
  solve( !KU( f(x, <~c, $P, ~n, ~m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k ) ▶₂ #l )
        case ShkGen
        solve( !KU( ~m ) @ #vk.3 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k ) ▶₂ #l )
        case ShkGen
        solve( !KU( ~m ) @ #vk.3 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~m ) @ #vk.4 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Verif3_case_2
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verif3_case_3
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.2, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.2, $Y.2, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.3, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.3, $Y.3, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.4, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.4, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.4, $Y.4, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.4, $Y.4, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Verif3_case_4
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_1
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case DBSend
          solve( !KU( ~c ) @ #vk.3 )
            case Verif2
            by contradiction /* cyclic */
          qed
        next
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              by contradiction /* from formulas */
            next
              case Verif4_case_1
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_2
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.3, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.3, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.3, $Y.1, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case Verif4_case_3
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                  case c_xor
                  solve( !KU( ~k ) @ #vk.15 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~k⊕f(~k, <'hello', ~m>)) ) ▶₀ #vk.5 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( Send( $X.4, t ) ▶₀ #vr.24 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prover1
                        by contradiction /* impossible chain */
                      next
                        case Prover2
                        by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                      next
                        case Prover3
                        solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                          case d_0_fst
                          solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m>) ) @ #vk.11 )
                            case Verif4_case_1
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          next
                            case c_f
                            by solve( (#vr.29, 0) ~~> (#vk.5, 0) )
                          qed
                        next
                          case d_0_snd
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Ltk( $X.4, t ) ▶₀ #vr.24 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealX
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case ShkRevealY
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.24 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Verif1
                    by contradiction /* impossible chain */
                  next
                    case Verif2
                    by contradiction /* impossible chain */
                  next
                    case Verif4
                    solve( !KU( ~n ) @ #vk.9 )
                      case Verif1
                      by solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case c_f
              solve( !KU( ~c ) @ #vk.6 )
                case Verif2
                solve( !KU( ~k ) @ #vk.10 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_1
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_2
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.4, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.4, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.4, $Y.2, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.5, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.5, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.5, $Y.3, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case Verif4_case_3
    solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
      case ShkGen
      solve( !KU( g(~c, <f(~k, <'hello', m>), (~k⊕f(~k, <'hello', m>))>)
             ) @ #vk.7 )
        case DBSend
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          by contradiction /* cyclic */
        qed
      next
        case c_g
        solve( !KU( ~c ) @ #vk.3 )
          case Verif2
          solve( !KU( f(~k, <~c.1, $P, ~n.1, ~c, $P, ~n, m>) ) @ #vk.9 )
            case Verif4_case_1
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_2
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.5, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.5, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.5, $Y.1, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.6, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.6, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.6, $Y.2, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case Verif4_case_3
            solve( !KU( g(~c.1,
                          <f(~k, <'hello', ~c, $P, ~n, m>), (~k⊕f(~k, <'hello', ~c, $P, ~n, m>))>)
                   ) @ #vk.13 )
              case c_g
              solve( !KU( ~c.1 ) @ #vk.13 )
                case Verif2
                solve( !KU( f(~k, <'hello', m>) ) @ #vk.18 )
                  case DBSend
                  solve( !KU( ~m ) @ #vk.31 )
                    case DBSend
                    solve( !KU( ~n ) @ #vk.19 )
                      case Verif1
                      solve( !KU( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) @ #vk.21 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.32 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕f(~k, <'hello', $P, n.1, ~m>)) ) ▶₀ #vk.9 )
                          case DBSend
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_2
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case Verif4_case_3
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.47, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_f
                            solve( Send( $X.6, t ) ▶₀ #vr.33 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prover1
                              by contradiction /* impossible chain */
                            next
                              case Prover2
                              by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                            next
                              case Prover3
                              solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                                case d_0_fst
                                solve( !KU( ~c.3 ) @ #vk.27 )
                                  case Verif2
                                  by solve( (#vr.38, 0) ~~> (#vk.9, 0) )
                                qed
                              next
                                case d_0_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Ltk( $X.6, t ) ▶₀ #vr.33 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealX
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case ShkRevealY
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_2
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Verif4_case_3
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case c_f
                            solve( !Shk( $X.6, $Y, t ) ▶₀ #vr.33 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case Verif1
                          by contradiction /* impossible chain */
                        next
                          case Verif2
                          by contradiction /* impossible chain */
                        next
                          case Verif4
                          solve( !KU( f(~k,
                                        <~c.2, $P, ~n.3, ~c.1, $P, ~n.2, ~c, $P, ~n, $P, n.1, ~m>)
                                 ) @ #vk.23 )
                            case Verif4_case_1
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          next
                            case c_f
                            by solve( (#vl.7, 0) ~~> (#vk.9, 0) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case Verif4_case_1
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_2
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.7, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.7, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.7, $Y.1, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case Verif4_case_3
                  solve( !KU( (~k⊕f(~k, <'hello', m>)) ) @ #vk.20 )
                    case c_xor
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KU( ~k ) @ #vk.34 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KU( ~n ) @ #vk.20 )
                      case Verif1
                      solve( !KD( (~k⊕f(~k, <'hello', m>)) ) ▶₀ #vk.7 )
                        case DBSend
                        solve( Send( $X.8, t ) ▶₀ #vr.36 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prover1
                          by contradiction /* impossible chain */
                        next
                          case Prover2
                          solve( !KU( f(~k, <~c.3, $P, ~n.2, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_2
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case Verif4_case_3
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          next
                            case c_f
                            by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                          qed
                        next
                          case Prover3
                          solve( !KU( f(~k, <~c.3, $P, ~n.3, ~c.1, $P, ~n.1, ~c, $P, ~n, m>)
                                 ) @ #vk.22 )
                            case Verif4_case_1
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_2
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case Verif4_case_3
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.50, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_f
                            solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                              case d_0_fst
                              by solve( (#vr.41, 0) ~~> (#vk.7, 0) )
                            next
                              case d_0_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.8, t ) ▶₀ #vr.36 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.8, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.8, $Y, t ) ▶₀ #vr.36 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Verif1
                        by contradiction /* impossible chain */
                      next
                        case Verif2
                        by contradiction /* impossible chain */
                      next
                        case Verif4
                        by solve( (#vl.6, 0) ~~> (#vk.7, 0) )
                      qed
                    qed
                  qed
                next
                  case c_f
                  solve( !KU( ~k ) @ #vk.29 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_f
            solve( !KU( ~k ) @ #vk.20 )
              case Leak
              by contradiction /* from formulas */
            next
              case ShkRevealX
              by contradiction /* from formulas */
            next
              case ShkRevealY
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case c_f
    solve( !Shk( $V, $P, x ) ▶₂ #l )
      case ShkGen
      solve( !KU( ~k ) @ #vk.8 )
        case Leak
        by contradiction /* from formulas */
      next
        case ShkRevealX
        by contradiction /* from formulas */
      next
        case ShkRevealY
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifState3( V, P, n, m, chal, resp ) ▶₀ #l )
  case Verif3_case_2
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
      case case_2
      solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
        case ShkGen
        solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
               ) @ #vk.4 )
          case c_g
          solve( !KU( ~m ) @ #vk.4 )
            case DBSend
            solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
              case Leak
              solve( !KU( ~c ) @ #vk.5 )
                case Verif2
                solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~n ) @ #vk.8 )
                    case Verif1
                    solve( !KU( ~k ) @ #vk.9 )
                      case Leak
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifState3( V, P, n, m, chal, resp ) ▶₀ #l )
  case Verif3_case_2
  solve( !KU( f(x, <~c, $P, ~n, m>) ) @ #vk.1 )
    case DBSend
    solve( (¬(#vr.4 < #e))  ∥ (∃ #j. (End( ~n ) @ #j) ∧ #j < #e) )
      case case_1
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.3)) )
        case case_2
        solve( !Shk( $V, $P, ~k.1 ) ▶₂ #l )
          case ShkGen
          solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~m ) @ #j) ∧ #j < #e) )
            case case_1
            solve( !KU( ~m ) @ #vk.3 )
              case DBSend
              solve( !KU( g(~c, <f(~k, <'hello', ~m>), (~k⊕f(~k, <'hello', ~m>))>)
                     ) @ #vk.4 )
                case c_g
                solve( !KU( f(~k, <'hello', ~m>) ) @ #vk.7 )
                  case Verif4_case_1
                  solve( (¬(#vr.19 < #e))  ∥ (∃ #j. (End( ~n.1 ) @ #j) ∧ #j < #e) )
                    case case_1
                    solve( !KU( ~c ) @ #vk.7 )
                      case Verif2
                      solve( !KU( (~k⊕f(~k, <'hello', ~m>)) ) @ #vk.9 )
                        case c_xor
                        solve( !KU( ~k ) @ #vk.15 )
                          case Leak
                          solve( !KU( ~n ) @ #vk.10 )
                            case Verif1
                            solve( End( ~m.1 ) @ #j )
                              case Prover4
                              solve( ProverState3( V, P, n, ~m, c ) ▶₀ #j )
                                case Prover3
                                solve( !KU( f(~k, <~c.2, $P, ~n.2, 'hello', ~m.1>) ) @ #vk.12 )
                                  case c_f
                                  solve( !Shk( $V, $P, x ) ▶₁ #j )
                                    case ShkGen
                                    solve( !KU( g(~c.2,
                                                  <f(~k, <'hello', 'hello', ~m.1>), 
                                                   (~k⊕f(~k, <'hello', 'hello', ~m.1>))>)
                                           ) @ #vk.17 )
                                      case c_g
                                      solve( !KU( ~c.2 ) @ #vk.17 )
                                        case Verif2
                                        solve( !KU( f(~k, ~m) ) @ #vk.20 )
                                          case c_f
                                          solve( !KU( ~m ) @ #vk.27 )
                                            case DBSend
                                            solve( !KU( ~n.2 ) @ #vk.24 )
                                              case Verif1
                                              solve( !KU( f(~k, <'hello', 'hello', ~m.1>) ) @ #vk.26 )
                                                case c_f
                                                solve( !KU( (~k⊕f(~k, <'hello', 'hello', ~m.1>)) ) @ #vk.28 )
                                                  case c_xor
                                                  SOLVED // trace found
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: SwissKnife.spthy

  reachability (exists-trace): verified (12 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (9 steps)
  fast_before_claim (all-traces): verified (6 steps)
  dbsec (all-traces): verified (6442 steps)
  dbsec_hnst (all-traces): verified (6430 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (13 steps)
  dbsec_hnst_star (all-traces): falsified - found trace (27 steps)

==============================================================================

real	6m5.695s
user	37m17.968s
sys	2m49.942s
