theory BC_FiatShamirID begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, check/2, fst/1, mul/2, pair/2, pk/1, pow/2,
           sdec/2, senc/2, snd/1, sq/1, true/0
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check(sq(mul(pow(x, y), r)), mul(pow(pk(x), y), sq(r))) = true,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Prov1:
   [ Fr( ~r ), Fr( ~k ), Fr( ~b ) ]
  --[ Start( ~b ) ]->
   [
   Send( $P, <sq(~r), senc(~b, ~k)> ), ProverState1( $P, ~r, ~b, ~k ),
   MayLeak( $P, ~b )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver1:
   [ In( <r_squared, sealed_commit> ), Fr( ~a ) ]
  --[ Start( ~a ), Send( $V, ~a ) ]->
   [ Out( ~a ), VerifierState1( $V, r_squared, sealed_commit, ~a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov2:
   [ ProverState1( P, r, b, k ), In( a ) ]
  -->
   [ Send( P, b ), ProverState2( P, r, b, k, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ver2:
   [ VerifierState1( V, r_squared, sealed_commit, a ), Recv( V, b ) ]
  -->
   [ VerifierState2( V, r_squared, sealed_commit, a, b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov3:
   [ ProverState2( P, r, b, k, a ), !Ltk( P, x ) ]
  --[ End( b ) ]->
   [ Send( P, <k, mul(pow(x, (a⊕b)), r)> ) ]

  /*
  rule (modulo AC) Prov3:
     [ ProverState2( P, r, b, k, a ), !Ltk( P, x ) ]
    --[ End( b ) ]->
     [ Send( P, <k, mul(pow(x, z), r)> ) ]
    variants (modulo AC)
    1. a     = a.8
       b     = b.8
       z     = (a.8⊕b.8)
    
    2. a     = a.8
       b     = zero
       z     = a.8
    
    3. a     = x.8
       b     = x.8
       z     = zero
    
    4. a     = x.8
       b     = (x.8⊕x.9)
       z     = x.9
    
    5. a     = zero
       b     = b.8
       z     = b.8
    
    6. a     = (x.8⊕x.9)
       b     = x.8
       z     = x.9
    
    7. a     = (x.8⊕x.9)
       b     = (x.8⊕x.10)
       z     = (x.9⊕x.10)
  */

rule (modulo E) Ver3:
   [
   In( <k, s> ), VerifierState2( V, r_squared, senc(b, k), a, b ),
   !Pk( $P, pkP )
   ]
  --[
  Eq( check(sq(s), mul(pow(pkP, (a⊕b)), r_squared)), true ),
  DBSec( V, $P, a, b ), End( a )
  ]->
   [ ]

  /*
  rule (modulo AC) Ver3:
     [
     In( <k, s> ), VerifierState2( V, r_squared, senc(b, k), a, b ),
     !Pk( $P, pkP )
     ]
    --[ Eq( z, true ), DBSec( V, $P, a, b ), End( a ) ]->
     [ ]
    variants (modulo AC)
     1. a     = a.10
        b     = b.10
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, (a.10⊕b.10)), r_squared.10))
    
     2. a     = a.10
        b     = zero
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, a.10), r_squared.10))
    
     3. a     = x.10
        b     = x.10
        pkP   = pkP.11
        r_squared
              = r_squared.11
        s     = s.11
        z     = check(sq(s.11), mul(pow(pkP.11, zero), r_squared.11))
    
     4. a     = x.10
        b     = x.10
        pkP   = pk(x.12)
        r_squared
              = sq(x.13)
        s     = mul(pow(x.12, zero), x.13)
        z     = true
    
     5. a     = x.10
        b     = x.11
        pkP   = pk(x.13)
        r_squared
              = sq(x.14)
        s     = mul(pow(x.13, (x.10⊕x.11)), x.14)
        z     = true
    
     6. a     = x.10
        b     = zero
        pkP   = pk(x.12)
        r_squared
              = sq(x.13)
        s     = mul(pow(x.12, x.10), x.13)
        z     = true
    
     7. a     = x.10
        b     = (x.10⊕x.11)
        pkP   = pkP.12
        r_squared
              = r_squared.12
        s     = s.12
        z     = check(sq(s.12), mul(pow(pkP.12, x.11), r_squared.12))
    
     8. a     = x.10
        b     = (x.10⊕x.11)
        pkP   = pk(x.13)
        r_squared
              = sq(x.14)
        s     = mul(pow(x.13, x.11), x.14)
        z     = true
    
     9. a     = zero
        b     = b.10
        pkP   = pkP.10
        r_squared
              = r_squared.10
        s     = s.10
        z     = check(sq(s.10), mul(pow(pkP.10, b.10), r_squared.10))
    
    10. a     = zero
        b     = x.10
        pkP   = pk(x.12)
        r_squared
              = sq(x.13)
        s     = mul(pow(x.12, x.10), x.13)
        z     = true
    
    11. a     = (x.10⊕x.11)
        b     = x.10
        pkP   = pkP.12
        r_squared
              = r_squared.12
        s     = s.12
        z     = check(sq(s.12), mul(pow(pkP.12, x.11), r_squared.12))
    
    12. a     = (x.10⊕x.11)
        b     = x.10
        pkP   = pk(x.13)
        r_squared
              = sq(x.14)
        s     = mul(pow(x.13, x.11), x.14)
        z     = true
    
    13. a     = (x.10⊕x.11)
        b     = (x.10⊕x.12)
        pkP   = pkP.13
        r_squared
              = r_squared.13
        s     = s.13
        z     = check(sq(s.13), mul(pow(pkP.13, (x.11⊕x.12)), r_squared.13))
    
    14. a     = (x.10⊕x.11)
        b     = (x.10⊕x.12)
        pkP   = pk(x.14)
        r_squared
              = sq(x.15)
        s     = mul(pow(x.14, (x.11⊕x.12)), x.15)
        z     = true
  */

restriction equals:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( Net( resp ) ▶₀ #k )
  case DBSend_case_2
  solve( VerifierState2( $Y, sq(x.2), senc(~b, k.1), chal, ~b ) ▶₁ #l )
    case Ver2_case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( Send( $Y, ~a ) @ #i )
        case Ver1
        solve( Send( $P, ~b ) @ #j )
          case DBSend
          solve( Send( $P, ~b ) ▶₀ #j )
            case Prov2
            solve( splitEqs(1) )
              case split
              solve( !KU( mul(pow(~k.1, (~a⊕~b)), x) ) @ #vk.2 )
                case DBSend
                solve( splitEqs(5) )
                  case split_case_1
                  solve( !KU( sq(~r) ) @ #vk.5 )
                    case DBSend
                    solve( !KU( senc(~b, k) ) @ #vk.6 )
                      case DBSend
                      solve( !KU( ~a ) @ #vk.6 )
                        case Ver1
                        solve( !KU( ~k ) @ #vk.6 )
                          case DBSend
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~b ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~a ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Prov1
    solve( Start( ~b ) @ #j )
      case Prov1
      by contradiction /* cyclic */
    qed
  next
    case Ver1
    solve( Start( ~a ) @ #j )
      case Ver1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Prov3
  solve( ProverState2( P, r, x, k, a ) ▶₀ #j )
    case Prov2
    by contradiction /* from formulas */
  qed
next
  case Ver3
  solve( VerifierState2( V, sq(x.2), senc(b, k), x.3, b ) ▶₁ #j )
    case Ver2_case_1
    by contradiction /* from formulas */
  next
    case Ver2_case_2
    by contradiction /* from formulas */
  next
    case Ver2_case_3
    by contradiction /* from formulas */
  next
    case Ver2_case_4
    by contradiction /* from formulas */
  next
    case Ver2_case_5
    by contradiction /* from formulas */
  next
    case Ver2_case_6
    by contradiction /* from formulas */
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, k), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  by contradiction /* from formulas */
next
  case Ver2_case_2
  by contradiction /* from formulas */
next
  case Ver2_case_3
  by contradiction /* from formulas */
next
  case Ver2_case_4
  by contradiction /* from formulas */
next
  case Ver2_case_5
  by contradiction /* from formulas */
next
  case Ver2_case_6
  by contradiction /* from formulas */
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, k), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)), x) ) @ #vk.2 )
      case c_mul
      solve( !KU( pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)) ) @ #vk.6 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.8 )
          case LtkReveal
          solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.7 )
            case c_senc
            solve( !KU( (~a⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.9 )
              case c_xor
              solve( !KU( sq(x) ) @ #vk.8 )
                case c_sq
                solve( !KU( ~a ) @ #vk.13 )
                  case Ver1
                  solve( !KU( sq(~r) ) @ #vk.12 )
                    case DBSend
                    solve( !KU( senc(~b, ~k.2) ) @ #vk.13 )
                      case DBSend
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, k), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)), x) ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.6))  ∥ (¬(#vr.6 < #vr.2)) )
        case case_1
        solve( splitEqs(1) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBSend
            solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( ~b.1 ) @ #vk.11 )
                  case DBSend_case_1
                  solve( !KU( ~k.3 ) @ #vk.12 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.11 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                  case c_xor
                  solve( !KU( ~b.1 ) @ #vk.11 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.12 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.13 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.3 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.13 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.7 )
          qed
        qed
      next
        case case_2
        solve( splitEqs(1) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBSend
            solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( ~b.1 ) @ #vk.11 )
                  case DBSend_case_1
                  solve( !KU( ~k.3 ) @ #vk.12 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( (~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.10 )
                  case c_xor
                  solve( !KU( ~b.1 ) @ #vk.12 )
                    case DBSend_case_1
                    solve( !KU( ~k.3 ) @ #vk.13 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.13 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                  case c_xor
                  solve( !KU( ~b.1 ) @ #vk.11 )
                    case DBSend_case_1
                    solve( !KU( ~k.3 ) @ #vk.13 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.13 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.3 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.13 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.7 )
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)) ) @ #vk.6 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.8 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( splitEqs(0) )
      case split
      solve( !KU( mul(pow(~k.1, (~a⊕~b)), x) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
          case case_1
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( ~a ) @ #vk.6 )
              case Ver1
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( !KU( senc(~b, k) ) @ #vk.5 )
                case DBSend
                solve( !KU( ~k ) @ #vk.5 )
                  case DBSend
                  solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.11 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.20 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~b.1 ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.20 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~b.1 ) @ #vk.10 )
                      case DBSend_case_1
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~a ) @ #vk.10 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~b.1 ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( ~a ) @ #vk.6 )
              case Ver1
              by contradiction /* cyclic */
            qed
          next
            case split_case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( !KU( senc(~b, k) ) @ #vk.5 )
                case DBSend
                solve( !KU( ~k ) @ #vk.5 )
                  case DBSend
                  solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.12 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.20 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕~b.1) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b.1 ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.12 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.20 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( ~b.1 ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.20 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~b.1 ) @ #vk.10 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.12 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( (~b⊕~b.1) ) @ #vk.9 )
                    case c_xor
                    solve( !KU( ~b.1 ) @ #vk.11 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.12 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~b.1 ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        qed
      next
        case c_mul
        solve( !KU( pow(~k.1, (~a⊕~b)) ) @ #vk.7 )
          case c_pow
          solve( !KU( ~k.1 ) @ #vk.9 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, (~a⊕<~k.2, mul(pow(~k.3, z), ~r)>)), x)
           ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
        case case_1
        solve( splitEqs(2) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBSend
            solve( !KU( senc(<~k.2, mul(pow(~k.3, z), ~r)>, k) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.12 )
                  case DBSend_case_1
                  solve( !KU( ~k.4 ) @ #vk.13 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.12 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.11 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.12 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.13 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.16 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.3 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.16 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.8 )
          qed
        qed
      next
        case case_2
        solve( splitEqs(2) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBSend
            solve( !KU( senc(<~k.2, mul(pow(~k.3, z), ~r)>, k) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.12 )
                  case DBSend_case_1
                  solve( !KU( ~k.4 ) @ #vk.13 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( (~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.11 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.13 )
                    case DBSend_case_1
                    solve( !KU( ~k.4 ) @ #vk.14 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.16 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.11 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.12 )
                    case DBSend_case_1
                    solve( !KU( ~k.4 ) @ #vk.14 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.16 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.3 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.16 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case c_sq
            by solve( !KU( ~r.1 ) @ #vk.8 )
          qed
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k.1, (~a⊕<~k.2, mul(pow(~k.3, z), ~r)>)) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k.2 ) @ #vk.8 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( (~b⊕resp) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.10 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k.1, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_5
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k.2 ) @ #vk.8 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( (~b⊕resp) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.10 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k.1, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Ver2_case_6
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
        case case_1
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( ~a ) @ #vk.9 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.10 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.2, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.2, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.17 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.17 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      next
        case case_2
        solve( !KU( sq(~r) ) @ #vk.4 )
          case DBSend
          solve( splitEqs(0) )
            case split_case_1
            solve( !KU( ~b ) @ #vk.7 )
              case DBSend_case_1
              solve( !KU( ~k.2 ) @ #vk.8 )
                case DBSend
                by contradiction /* cyclic */
              qed
            next
              case DBSend_case_2
              by contradiction /* cyclic */
            next
              case Leak
              by contradiction /* from formulas */
            qed
          next
            case split_case_2
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( ~b ) @ #vk.6 )
                case DBSend_case_1
                solve( !KU( ~k.2 ) @ #vk.8 )
                  case DBSend
                  by contradiction /* cyclic */
                qed
              next
                case DBSend_case_2
                solve( !KU( ~a ) @ #vk.7 )
                  case Ver1
                  by contradiction /* cyclic */
                qed
              next
                case Leak
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (~a⊕x) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                case c_xor_case_1
                solve( !KU( ~b ) @ #vk.9 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case c_xor_case_2
                solve( !KU( (~b⊕resp) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.10 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case c_xor_case_3
                solve( !KU( (~a⊕~b) ) @ #vk.8 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.11 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    by contradiction /* cyclic */
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.2, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_3
            solve( splitEqs(1) )
              case split
              solve( !KU( (~a⊕~b) ) @ #vk.7 )
                case c_xor
                solve( !KU( ~b ) @ #vk.8 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.10 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* from formulas */
                qed
              next
                case coerce
                solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                  case DBSend
                  solve( Send( $X.2, t ) ▶₀ #vr.15 )
                    case DBInject_case_1
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_2
                    by contradiction /* cyclic */
                  next
                    case DBInject_case_3
                    by contradiction /* cyclic */
                  next
                    case Prov1
                    by contradiction /* impossible chain */
                  next
                    case Prov2
                    by contradiction /* impossible chain */
                  next
                    case Prov3
                    solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                    qed
                  qed
                next
                  case Leak
                  by contradiction /* from formulas */
                next
                  case LtkGen
                  by contradiction /* impossible chain */
                next
                  case LtkReveal
                  solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                    case LtkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealX
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case ShkRevealY
                  solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                    case ShkGen
                    by contradiction /* impossible chain */
                  qed
                next
                  case Ver1
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case split_case_4
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕~b) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~b ) @ #vk.8 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~a⊕x) ) @ #vk.6 )
                  case c_xor
                  solve( !KU( ~a ) @ #vk.9 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case split_case_3
              solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                case c_senc
                solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                    case c_xor
                    solve( !KU( ~a.1 ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                next
                  case c_xor_case_2
                  solve( !KU( ~b ) @ #vk.9 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.10 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                      case c_xor
                      solve( !KU( ~a.1 ) @ #vk.10 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  qed
                next
                  case c_xor_case_3
                  solve( !KU( ~a.1 ) @ #vk.8 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case coerce
                  solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                    case DBSend
                    solve( Send( $X.2, t ) ▶₀ #vr.15 )
                      case DBInject_case_1
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_2
                      by contradiction /* cyclic */
                    next
                      case DBInject_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov1
                      by contradiction /* impossible chain */
                    next
                      case Prov2
                      by contradiction /* impossible chain */
                    next
                      case Prov3
                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case LtkGen
                    by contradiction /* impossible chain */
                  next
                    case LtkReveal
                    solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                      case LtkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealX
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case ShkRevealY
                    solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                      case ShkGen
                      by contradiction /* impossible chain */
                    qed
                  next
                    case Ver1
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sq
          by solve( !KU( ~r ) @ #vk.8 )
        qed
      qed
    next
      case c_mul
      solve( !KU( pow(~k.1, x) ) @ #vk.7 )
        case c_pow
        solve( !KU( ~k.1 ) @ #vk.9 )
          case LtkReveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, k), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( !Pk( $P, pk(x) ) ▶₂ #l )
    case LtkGen
    solve( !KU( mul(pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)), x) ) @ #vk.2 )
      case DBSend
      solve( (¬(#vr.1 < #vr.6))  ∥ (¬(#vr.6 < #vr.2)) )
        case case_2
        solve( splitEqs(1) )
          case split
          solve( !KU( sq(~r.1) ) @ #vk.4 )
            case DBSend
            solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.5 )
              case c_senc
              solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( ~b.1 ) @ #vk.11 )
                  case Leak
                  solve( (¬(#vr.1 < #vr.13))  ∥ (¬(#vr.13 < #vr.2)) )
                    case case_1
                    solve( !KU( (~a⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.11 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.12 )
                        case Ver1
                        solve( !KU( sq(~r) ) @ #vk.11 )
                          case DBSend
                          solve( !KU( senc(~b, ~k.2) ) @ #vk.12 )
                            case DBSend
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( VerifierState2( V, sq(x.2), senc(resp, k), chal, resp ) ▶₁ #l )
  case Ver2_case_1
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.4 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !KU( mul(pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)), x) ) @ #vk.2 )
          case DBSend
          solve( (¬(#vr.10 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
            case case_1
            solve( (¬(#vr.1 < #vr.6))  ∥ (¬(#vr.6 < #vr.2)) )
              case case_1
              solve( splitEqs(2) )
                case split
                solve( !KU( sq(~r.1) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( ~b.1 ) @ #vk.11 )
                        case DBSend_case_1
                        solve( !KU( ~k.3 ) @ #vk.12 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~a ) @ #vk.11 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.11 )
                          case DBSend_case_1
                          solve( !KU( ~a ) @ #vk.12 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.13 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r.1 ) @ #vk.7 )
                qed
              qed
            next
              case case_2
              solve( splitEqs(2) )
                case split
                solve( !KU( sq(~r.1) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( senc(<sq(~r), senc(~b, ~k.2)>, k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( ~b.1 ) @ #vk.11 )
                        case DBSend_case_1
                        solve( !KU( ~k.3 ) @ #vk.12 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( (~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) @ #vk.10 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.12 )
                          case DBSend_case_1
                          solve( !KU( ~k.3 ) @ #vk.13 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                        case c_xor
                        solve( !KU( ~b.1 ) @ #vk.11 )
                          case DBSend_case_1
                          solve( !KU( ~k.3 ) @ #vk.13 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.13 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.18, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b.1⊕<sq(~r), senc(~b, ~k.2)>) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.13 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r.1 ) @ #vk.7 )
                qed
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.6))  ∥ (¬(#vr.6 < #vr.2)) )
              case case_1
              solve( End( ~b.1 ) @ #j )
                case Prov3
                solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                  case Prov2
                  solve( splitEqs(2) )
                    case split
                    solve( !KU( sq(~r) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<sq(~r.1), senc(~b.1, ~k.1)>, k.3) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( ~b ) @ #vk.11 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.12 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( (~a⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) @ #vk.11 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.12 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.13 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.18, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( sq(~r.1) ) @ #vk.8 )
                            case DBSend
                            by contradiction /* cyclic */
                          next
                            case c_sq
                            by solve( !KU( ~r.1 ) @ #vk.11 )
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.12 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.12 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.12 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.12 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r ) @ #vk.7 )
                    qed
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
              qed
            next
              case case_2
              solve( End( ~b.1 ) @ #j )
                case Prov3
                solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                  case Prov2
                  solve( splitEqs(2) )
                    case split
                    solve( !KU( sq(~r) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<sq(~r.1), senc(~b.1, ~k.1)>, k.3) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( ~b ) @ #vk.11 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.12 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( (~a⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) @ #vk.11 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.12 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.13 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.18, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( sq(~r.1) ) @ #vk.8 )
                            case DBSend
                            by contradiction /* cyclic */
                          next
                            case c_sq
                            by solve( !KU( ~r.1 ) @ #vk.11 )
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕<sq(~r.1), senc(~b.1, ~k.1)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.12 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.17, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.12 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.12 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.12 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.12 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r ) @ #vk.7 )
                    qed
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
              qed
            qed
          qed
        next
          case c_mul
          solve( !KU( pow(~k.1, (~a⊕<sq(~r), senc(~b, ~k.2)>)) ) @ #vk.6 )
            case c_pow
            solve( !KU( ~k.1 ) @ #vk.8 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~b ) @ #j )
          case Prov3
          solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
            case Prov2
            solve( !Ltk( $X, x ) ▶₁ #j )
              case LtkGen
              solve( !KU( mul(pow(~k.3, (~a.1⊕<sq(~r), senc(~b, ~k)>)), x) ) @ #vk.2 )
                case DBSend
                solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
                  case case_1
                  solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                    case case_1
                    solve( splitEqs(3) )
                      case split
                      solve( !KU( sq(~r.1) ) @ #vk.4 )
                        case DBSend
                        solve( !KU( senc(<sq(~r), senc(~b, ~k)>, k.2) ) @ #vk.5 )
                          case c_senc
                          solve( !KU( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.7 )
                            case c_xor_case_1
                            solve( !KU( ~b.1 ) @ #vk.12 )
                              case DBSend_case_1
                              solve( !KU( ~k.4 ) @ #vk.13 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_xor_case_2
                            solve( !KU( ~a.1 ) @ #vk.12 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_xor_case_3
                            solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                              case c_xor
                              solve( !KU( ~b.1 ) @ #vk.12 )
                                case DBSend_case_1
                                solve( !KU( ~a.1 ) @ #vk.13 )
                                  case Ver1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case coerce
                            solve( !KD( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.3 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_sq
                        by solve( !KU( ~r.1 ) @ #vk.8 )
                      qed
                    qed
                  next
                    case case_2
                    solve( splitEqs(3) )
                      case split
                      solve( !KU( sq(~r.1) ) @ #vk.4 )
                        case DBSend
                        solve( !KU( senc(<sq(~r), senc(~b, ~k)>, k.2) ) @ #vk.5 )
                          case c_senc
                          solve( !KU( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.7 )
                            case c_xor_case_1
                            solve( !KU( ~b.1 ) @ #vk.12 )
                              case DBSend_case_1
                              solve( !KU( ~k.4 ) @ #vk.13 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_xor_case_2
                            solve( !KU( (~b.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.11 )
                              case c_xor
                              solve( !KU( ~b.1 ) @ #vk.13 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.14 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~b.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.4 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case c_xor_case_3
                            solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                              case c_xor
                              solve( !KU( ~b.1 ) @ #vk.12 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.14 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case coerce
                            solve( !KD( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.3 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_sq
                        by solve( !KU( ~r.1 ) @ #vk.8 )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                    case case_1
                    solve( End( ~b.1 ) @ #j.1 )
                      case Prov3
                      solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                        case Prov2
                        solve( splitEqs(3) )
                          case split
                          solve( !KU( sq(~r.1) ) @ #vk.4 )
                            case DBSend
                            solve( !KU( senc(<sq(~r), senc(~b, ~k)>, k.2) ) @ #vk.5 )
                              case c_senc
                              solve( !KU( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.7 )
                                case c_xor_case_1
                                solve( !KU( ~b.1 ) @ #vk.12 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.4 ) @ #vk.13 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  solve( !KU( (~a.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.12 )
                                    case c_xor
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~a.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.5 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                solve( !KU( ~a.1 ) @ #vk.12 )
                                  case Ver1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_xor_case_3
                                solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.12 )
                                    case DBSend_case_1
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.3 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_sq
                            by solve( !KU( ~r.1 ) @ #vk.8 )
                          qed
                        qed
                      qed
                    next
                      case Ver3
                      by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                                ) ▶₁ #j.1 )
                    qed
                  next
                    case case_2
                    solve( End( ~b.1 ) @ #j.1 )
                      case Prov3
                      solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                        case Prov2
                        solve( splitEqs(3) )
                          case split
                          solve( !KU( sq(~r.1) ) @ #vk.4 )
                            case DBSend
                            solve( !KU( senc(<sq(~r), senc(~b, ~k)>, k.2) ) @ #vk.5 )
                              case c_senc
                              solve( !KU( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.7 )
                                case c_xor_case_1
                                solve( !KU( ~b.1 ) @ #vk.12 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.4 ) @ #vk.13 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  solve( !KU( (~a.1⊕<sq(~r), senc(~b, ~k)>) ) @ #vk.12 )
                                    case c_xor
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~a.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.5 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                solve( !KU( ~a.1 ) @ #vk.12 )
                                  case Ver1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_xor_case_3
                                solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.12 )
                                    case DBSend_case_1
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    solve( !KU( ~a.1 ) @ #vk.13 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1⊕<sq(~r), senc(~b, ~k)>) ) ▶₀ #vk.3 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_sq
                            by solve( !KU( ~r.1 ) @ #vk.8 )
                          qed
                        qed
                      qed
                    next
                      case Ver3
                      by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                                ) ▶₁ #j.1 )
                    qed
                  qed
                qed
              next
                case c_mul
                solve( !KU( pow(~k.3, (~a.1⊕<sq(~r), senc(~b, ~k)>)) ) @ #vk.7 )
                  case c_pow
                  solve( !KU( ~k.3 ) @ #vk.9 )
                    case LtkReveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.4 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_2
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( splitEqs(1) )
          case split
          solve( !KU( mul(pow(~k.1, (~a⊕~b)), x) ) @ #vk.2 )
            case DBSend
            solve( (¬(#vr.11 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
                case case_1
                solve( splitEqs(3) )
                  case split_case_1
                  solve( !KU( ~a ) @ #vk.6 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( sq(~r) ) @ #vk.4 )
                    case DBSend
                    solve( !KU( senc(~b, k) ) @ #vk.5 )
                      case DBSend
                      solve( !KU( ~k ) @ #vk.5 )
                        case DBSend
                        solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.10 )
                              case DBSend_case_1
                              solve( !KU( ~a ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.20 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~b.1 ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~k.2 ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.20 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.11 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( ~b.1 ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k.2 ) @ #vk.11 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_sq
                    by solve( !KU( ~r ) @ #vk.8 )
                  qed
                qed
              next
                case case_2
                solve( splitEqs(3) )
                  case split_case_1
                  solve( !KU( ~a ) @ #vk.6 )
                    case Ver1
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( sq(~r) ) @ #vk.4 )
                    case DBSend
                    solve( !KU( senc(~b, k) ) @ #vk.5 )
                      case DBSend
                      solve( !KU( ~k ) @ #vk.5 )
                        case DBSend
                        solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( (~a⊕~b.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.10 )
                              case DBSend_case_1
                              solve( !KU( ~k.2 ) @ #vk.12 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.20 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( (~b⊕~b.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.10 )
                              case DBSend_case_1
                              solve( !KU( ~k.2 ) @ #vk.12 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.5 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.20 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.25, 0) ~~> (#vk.5, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~b.1 ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~k.2 ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.20 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.25, 0) ~~> (#vk.4, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.10 )
                            case DBSend_case_1
                            solve( !KU( ~k.2 ) @ #vk.12 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( (~b⊕~b.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~b.1 ) @ #vk.11 )
                            case DBSend_case_1
                            solve( !KU( ~k.2 ) @ #vk.12 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( ~b.1 ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k.2 ) @ #vk.11 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case c_sq
                    by solve( !KU( ~r ) @ #vk.8 )
                  qed
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.7))  ∥ (¬(#vr.7 < #vr.2)) )
                case case_1
                solve( End( ~b.1 ) @ #j )
                  case Prov3
                  solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                    case Prov2
                    solve( splitEqs(3) )
                      case split_case_1
                      by contradiction /* cyclic */
                    next
                      case split_case_2
                      solve( !KU( sq(~r) ) @ #vk.4 )
                        case DBSend
                        solve( !KU( senc(~b.1, k.2) ) @ #vk.5 )
                          case DBSend
                          solve( !KU( ~k.2 ) @ #vk.5 )
                            case DBSend
                            solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( ~b ) @ #vk.9 )
                                case DBSend_case_1
                                solve( !KU( ~k ) @ #vk.10 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.10 )
                                    case DBSend_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.6 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.20 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.5, 0) ~~> (#vk.6, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.25, 0) ~~> (#vk.6, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( ~a ) @ #vk.9 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( ~b.1 ) @ #vk.8 )
                                case DBSend_case_1
                                by contradiction /* cyclic */
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_senc
                          solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                            case c_xor_case_1
                            solve( !KU( ~b ) @ #vk.10 )
                              case DBSend_case_1
                              solve( !KU( ~k ) @ #vk.11 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.10 )
                                  case DBSend_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.5, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_xor_case_3
                            solve( !KU( ~b.1 ) @ #vk.8 )
                              case DBSend_case_1
                              by contradiction /* cyclic */
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.13 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_sq
                        by solve( !KU( ~r ) @ #vk.8 )
                      qed
                    qed
                  qed
                next
                  case Ver3
                  by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
                qed
              next
                case case_2
                solve( End( ~b.1 ) @ #j )
                  case Prov3
                  solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                    case Prov2
                    solve( splitEqs(3) )
                      case split_case_1
                      by contradiction /* cyclic */
                    next
                      case split_case_2
                      solve( !KU( sq(~r) ) @ #vk.4 )
                        case DBSend
                        solve( !KU( senc(~b.1, k.2) ) @ #vk.5 )
                          case DBSend
                          solve( !KU( ~k.2 ) @ #vk.5 )
                            case DBSend
                            solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( ~b ) @ #vk.9 )
                                case DBSend_case_1
                                solve( !KU( ~k ) @ #vk.10 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                solve( !KU( (~a⊕~b.1) ) @ #vk.9 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.10 )
                                    case DBSend_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.6 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.20 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.5, 0) ~~> (#vk.6, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.25, 0) ~~> (#vk.6, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.20 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.20 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.20 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( ~a ) @ #vk.9 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( ~b.1 ) @ #vk.8 )
                                case DBSend_case_1
                                by contradiction /* cyclic */
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.4 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_senc
                          solve( !KU( (~a⊕~b⊕~b.1) ) @ #vk.7 )
                            case c_xor_case_1
                            solve( !KU( ~b ) @ #vk.10 )
                              case DBSend_case_1
                              solve( !KU( ~k ) @ #vk.11 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              solve( !KU( (~a⊕~b.1) ) @ #vk.10 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.10 )
                                  case DBSend_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~a⊕~b.1) ) ▶₀ #vk.5 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.5, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_xor_case_3
                            solve( !KU( ~b.1 ) @ #vk.8 )
                              case DBSend_case_1
                              by contradiction /* cyclic */
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕~b⊕~b.1) ) ▶₀ #vk.3 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.13 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.18, 0) ~~> (#vk.3, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.13 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.13 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.13 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_sq
                        by solve( !KU( ~r ) @ #vk.8 )
                      qed
                    qed
                  qed
                next
                  case Ver3
                  by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
                qed
              qed
            qed
          next
            case c_mul
            solve( !KU( pow(~k.1, (~a⊕~b)) ) @ #vk.7 )
              case c_pow
              solve( !KU( ~k.1 ) @ #vk.9 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~b ) @ #j )
          case Prov3
          solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
            case Prov2
            solve( !Ltk( $X, x ) ▶₁ #j )
              case LtkGen
              solve( splitEqs(1) )
                case split
                solve( !KU( mul(pow(~k.3, (~b⊕~a.1)), x) ) @ #vk.2 )
                  case DBSend
                  solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
                    case case_1
                    solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                      case case_1
                      solve( splitEqs(4) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( sq(~r.1) ) @ #vk.4 )
                          case DBSend
                          solve( !KU( senc(~b, k.2) ) @ #vk.5 )
                            case DBSend
                            solve( !KU( ~k ) @ #vk.5 )
                              case DBSend
                              solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                case c_xor_case_1
                                solve( !KU( ~a.1 ) @ #vk.9 )
                                  case Ver1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_xor_case_2
                                solve( !KU( (~a.1⊕~b.1) ) @ #vk.8 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.10 )
                                    case DBSend_case_1
                                    solve( !KU( ~a.1 ) @ #vk.11 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.5 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                solve( !KU( ~b.1 ) @ #vk.8 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.3 ) @ #vk.10 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_senc
                            solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( (~a.1⊕~b.1) ) @ #vk.9 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.10 )
                                  case DBSend_case_1
                                  solve( !KU( ~a.1 ) @ #vk.11 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( ~b.1 ) @ #vk.9 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.11 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.3 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_sq
                          by solve( !KU( ~r.1 ) @ #vk.8 )
                        qed
                      qed
                    next
                      case case_2
                      solve( splitEqs(4) )
                        case split_case_1
                        by contradiction /* cyclic */
                      next
                        case split_case_2
                        solve( !KU( sq(~r.1) ) @ #vk.4 )
                          case DBSend
                          solve( !KU( senc(~b, k.2) ) @ #vk.5 )
                            case DBSend
                            solve( !KU( ~k ) @ #vk.5 )
                              case DBSend
                              solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                case c_xor_case_1
                                solve( !KU( (~b⊕~b.1) ) @ #vk.8 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.10 )
                                    case DBSend_case_1
                                    solve( !KU( ~k.3 ) @ #vk.12 )
                                      case DBSend
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.5 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                solve( !KU( (~a.1⊕~b.1) ) @ #vk.8 )
                                  case c_xor
                                  solve( !KU( ~b.1 ) @ #vk.10 )
                                    case DBSend_case_1
                                    solve( !KU( ~k.3 ) @ #vk.12 )
                                      case DBSend
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.5 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.24, 0) ~~> (#vk.5, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                solve( !KU( ~b.1 ) @ #vk.8 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.3 ) @ #vk.10 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.24, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            qed
                          next
                            case c_senc
                            solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( (~b⊕~b.1) ) @ #vk.9 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.11 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.4 ) @ #vk.12 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~b⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( (~a.1⊕~b.1) ) @ #vk.9 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.10 )
                                  case DBSend_case_1
                                  solve( !KU( ~k.4 ) @ #vk.12 )
                                    case DBSend
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  by contradiction /* cyclic */
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( ~b.1 ) @ #vk.9 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.11 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.3 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_sq
                          by solve( !KU( ~r.1 ) @ #vk.8 )
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                      case case_1
                      solve( End( ~b.1 ) @ #j.1 )
                        case Prov3
                        solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                          case Prov2
                          solve( splitEqs(4) )
                            case split_case_1
                            solve( !KU( ~a ) @ #vk.6 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case split_case_2
                            solve( !KU( sq(~r.1) ) @ #vk.4 )
                              case DBSend
                              solve( !KU( senc(~b, k.2) ) @ #vk.5 )
                                case DBSend
                                solve( !KU( ~k ) @ #vk.5 )
                                  case DBSend
                                  solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                    case c_xor_case_1
                                    solve( !KU( ~a.1 ) @ #vk.9 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_xor_case_2
                                    solve( !KU( (~a.1⊕~b.1) ) @ #vk.8 )
                                      case c_xor
                                      solve( !KU( ~b.1 ) @ #vk.10 )
                                        case DBSend_case_1
                                        solve( !KU( ~a.1 ) @ #vk.11 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case DBSend_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case Leak
                                        solve( !KU( ~a.1 ) @ #vk.11 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    next
                                      case coerce
                                      solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.5 )
                                        case DBSend
                                        solve( Send( $X.1, t ) ▶₀ #vr.18 )
                                          case DBInject_case_1
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_2
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_3
                                          by contradiction /* cyclic */
                                        next
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov2
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov3
                                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                            case d_0_fst
                                            by contradiction /* impossible chain */
                                          next
                                            case d_0_snd
                                            by solve( (#vr.23, 0) ~~> (#vk.5, 0) )
                                          qed
                                        qed
                                      next
                                        case Leak
                                        solve( MayLeak( $X.1, t ) ▶₀ #vr.18 )
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      next
                                        case LtkReveal
                                        solve( !Ltk( $X.1, t ) ▶₀ #vr.18 )
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealX
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealY
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case Ver1
                                        by contradiction /* impossible chain */
                                      qed
                                    qed
                                  next
                                    case c_xor_case_3
                                    solve( !KU( ~b.1 ) @ #vk.8 )
                                      case DBSend_case_1
                                      solve( !KU( ~k.3 ) @ #vk.10 )
                                        case DBSend
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case DBSend_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Leak
                                      solve( !KU( (~b⊕~a.1) ) @ #vk.9 )
                                        case c_xor
                                        solve( !KU( ~a.1 ) @ #vk.10 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case coerce
                                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.6 )
                                          case DBSend
                                          solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                            case DBInject_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case DBInject_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case DBInject_case_3
                                            by contradiction /* cyclic */
                                          next
                                            case Prov1
                                            by contradiction /* impossible chain */
                                          next
                                            case Prov2
                                            by contradiction /* impossible chain */
                                          next
                                            case Prov3
                                            solve( (#vl.5, 0) ~~> (#vk.6, 0) )
                                              case d_0_fst
                                              by contradiction /* impossible chain */
                                            next
                                              case d_0_snd
                                              by solve( (#vr.24, 0) ~~> (#vk.6, 0) )
                                            qed
                                          qed
                                        next
                                          case Leak
                                          solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                            case Prov1
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        next
                                          case LtkReveal
                                          solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                            case LtkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case ShkRevealX
                                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                            case ShkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case ShkRevealY
                                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                            case ShkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case Ver1
                                          by contradiction /* impossible chain */
                                        qed
                                      qed
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.18 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.23, 0) ~~> (#vk.4, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.18 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.18 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              next
                                case c_senc
                                solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                  case c_xor_case_1
                                  solve( !KU( ~a.1 ) @ #vk.10 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_xor_case_2
                                  solve( !KU( (~a.1⊕~b.1) ) @ #vk.9 )
                                    case c_xor
                                    solve( !KU( ~b.1 ) @ #vk.10 )
                                      case DBSend_case_1
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case DBSend_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Leak
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                next
                                  case c_xor_case_3
                                  solve( !KU( ~b.1 ) @ #vk.9 )
                                    case DBSend_case_1
                                    solve( !KU( ~k.4 ) @ #vk.11 )
                                      case DBSend
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    solve( !KU( (~b⊕~a.1) ) @ #vk.10 )
                                      case c_xor
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case coerce
                                      solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.5 )
                                        case DBSend
                                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                          case DBInject_case_1
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_2
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_3
                                          by contradiction /* cyclic */
                                        next
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov2
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov3
                                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                            case d_0_fst
                                            by contradiction /* impossible chain */
                                          next
                                            case d_0_snd
                                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                          qed
                                        qed
                                      next
                                        case Leak
                                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      next
                                        case LtkReveal
                                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealX
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealY
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case Ver1
                                        by contradiction /* impossible chain */
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.3 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_sq
                              by solve( !KU( ~r.1 ) @ #vk.8 )
                            qed
                          qed
                        qed
                      next
                        case Ver3
                        by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                                  ) ▶₁ #j.1 )
                      qed
                    next
                      case case_2
                      solve( End( ~b.1 ) @ #j.1 )
                        case Prov3
                        solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                          case Prov2
                          solve( splitEqs(4) )
                            case split_case_1
                            solve( !KU( ~a ) @ #vk.6 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case split_case_2
                            solve( !KU( sq(~r.1) ) @ #vk.4 )
                              case DBSend
                              solve( !KU( senc(~b, k.2) ) @ #vk.5 )
                                case DBSend
                                solve( !KU( ~k ) @ #vk.5 )
                                  case DBSend
                                  solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                    case c_xor_case_1
                                    solve( !KU( ~a.1 ) @ #vk.9 )
                                      case Ver1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_xor_case_2
                                    solve( !KU( (~a.1⊕~b.1) ) @ #vk.8 )
                                      case c_xor
                                      solve( !KU( ~b.1 ) @ #vk.10 )
                                        case DBSend_case_1
                                        solve( !KU( ~a.1 ) @ #vk.11 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case DBSend_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case Leak
                                        solve( !KU( ~a.1 ) @ #vk.11 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    next
                                      case coerce
                                      solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.5 )
                                        case DBSend
                                        solve( Send( $X.1, t ) ▶₀ #vr.18 )
                                          case DBInject_case_1
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_2
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_3
                                          by contradiction /* cyclic */
                                        next
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov2
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov3
                                          solve( (#vl.4, 0) ~~> (#vk.5, 0) )
                                            case d_0_fst
                                            by contradiction /* impossible chain */
                                          next
                                            case d_0_snd
                                            by solve( (#vr.23, 0) ~~> (#vk.5, 0) )
                                          qed
                                        qed
                                      next
                                        case Leak
                                        solve( MayLeak( $X.1, t ) ▶₀ #vr.18 )
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      next
                                        case LtkReveal
                                        solve( !Ltk( $X.1, t ) ▶₀ #vr.18 )
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealX
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealY
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case Ver1
                                        by contradiction /* impossible chain */
                                      qed
                                    qed
                                  next
                                    case c_xor_case_3
                                    solve( !KU( ~b.1 ) @ #vk.8 )
                                      case DBSend_case_1
                                      solve( !KU( ~k.3 ) @ #vk.10 )
                                        case DBSend
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case DBSend_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Leak
                                      solve( !KU( (~b⊕~a.1) ) @ #vk.9 )
                                        case c_xor
                                        solve( !KU( ~a.1 ) @ #vk.10 )
                                          case Ver1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case coerce
                                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.6 )
                                          case DBSend
                                          solve( Send( $X.1, t ) ▶₀ #vr.19 )
                                            case DBInject_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case DBInject_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case DBInject_case_3
                                            by contradiction /* cyclic */
                                          next
                                            case Prov1
                                            by contradiction /* impossible chain */
                                          next
                                            case Prov2
                                            by contradiction /* impossible chain */
                                          next
                                            case Prov3
                                            solve( (#vl.5, 0) ~~> (#vk.6, 0) )
                                              case d_0_fst
                                              by contradiction /* impossible chain */
                                            next
                                              case d_0_snd
                                              by solve( (#vr.24, 0) ~~> (#vk.6, 0) )
                                            qed
                                          qed
                                        next
                                          case Leak
                                          solve( MayLeak( $X.1, t ) ▶₀ #vr.19 )
                                            case Prov1
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        next
                                          case LtkReveal
                                          solve( !Ltk( $X.1, t ) ▶₀ #vr.19 )
                                            case LtkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case ShkRevealX
                                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                            case ShkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case ShkRevealY
                                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.19 )
                                            case ShkGen
                                            by contradiction /* impossible chain */
                                          qed
                                        next
                                          case Ver1
                                          by contradiction /* impossible chain */
                                        qed
                                      qed
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.18 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.4, 0) ~~> (#vk.4, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.23, 0) ~~> (#vk.4, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.18 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.18 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.18 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                qed
                              next
                                case c_senc
                                solve( !KU( (~b⊕~a.1⊕~b.1) ) @ #vk.7 )
                                  case c_xor_case_1
                                  solve( !KU( ~a.1 ) @ #vk.10 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_xor_case_2
                                  solve( !KU( (~a.1⊕~b.1) ) @ #vk.9 )
                                    case c_xor
                                    solve( !KU( ~b.1 ) @ #vk.10 )
                                      case DBSend_case_1
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case DBSend_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Leak
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  next
                                    case coerce
                                    solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                      case DBSend
                                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                        case DBInject_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case DBInject_case_3
                                        by contradiction /* cyclic */
                                      next
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov2
                                        by contradiction /* impossible chain */
                                      next
                                        case Prov3
                                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                          case d_0_fst
                                          by contradiction /* impossible chain */
                                        next
                                          case d_0_snd
                                          by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                        qed
                                      qed
                                    next
                                      case Leak
                                      solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                        case Prov1
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    next
                                      case LtkReveal
                                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealX
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case ShkRevealY
                                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                        case ShkGen
                                        by contradiction /* impossible chain */
                                      qed
                                    next
                                      case Ver1
                                      by contradiction /* impossible chain */
                                    qed
                                  qed
                                next
                                  case c_xor_case_3
                                  solve( !KU( ~b.1 ) @ #vk.9 )
                                    case DBSend_case_1
                                    solve( !KU( ~k.4 ) @ #vk.11 )
                                      case DBSend
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case DBSend_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case Leak
                                    solve( !KU( (~b⊕~a.1) ) @ #vk.10 )
                                      case c_xor
                                      solve( !KU( ~a.1 ) @ #vk.11 )
                                        case Ver1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case coerce
                                      solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.5 )
                                        case DBSend
                                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                          case DBInject_case_1
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_2
                                          by contradiction /* cyclic */
                                        next
                                          case DBInject_case_3
                                          by contradiction /* cyclic */
                                        next
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov2
                                          by contradiction /* impossible chain */
                                        next
                                          case Prov3
                                          solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                            case d_0_fst
                                            by contradiction /* impossible chain */
                                          next
                                            case d_0_snd
                                            by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                          qed
                                        qed
                                      next
                                        case Leak
                                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                          case Prov1
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case LtkGen
                                        by contradiction /* impossible chain */
                                      next
                                        case LtkReveal
                                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                          case LtkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealX
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case ShkRevealY
                                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                          case ShkGen
                                          by contradiction /* impossible chain */
                                        qed
                                      next
                                        case Ver1
                                        by contradiction /* impossible chain */
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~b⊕~a.1⊕~b.1) ) ▶₀ #vk.3 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_sq
                              by solve( !KU( ~r.1 ) @ #vk.8 )
                            qed
                          qed
                        qed
                      next
                        case Ver3
                        by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                                  ) ▶₁ #j.1 )
                      qed
                    qed
                  qed
                next
                  case c_mul
                  solve( !KU( pow(~k.3, (~b⊕~a.1)) ) @ #vk.7 )
                    case c_pow
                    solve( !KU( ~k.3 ) @ #vk.9 )
                      case LtkReveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_3
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( (¬(#vr.7 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( !KU( mul(pow(~k.1, (~a⊕<~k.2, mul(pow(~k.3, z), ~r)>)), x)
               ) @ #vk.2 )
          case DBSend
          solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
            case case_1
            solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
              case case_1
              solve( splitEqs(3) )
                case split
                solve( !KU( sq(~r.1) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( senc(<~k.2, mul(pow(~k.3, z), ~r)>, k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( ~b ) @ #vk.12 )
                        case DBSend_case_1
                        solve( !KU( ~k.4 ) @ #vk.13 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~a ) @ #vk.12 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( (~a⊕~b) ) @ #vk.11 )
                        case c_xor
                        solve( !KU( ~b ) @ #vk.12 )
                          case DBSend_case_1
                          solve( !KU( ~a ) @ #vk.13 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.16 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r.1 ) @ #vk.8 )
                qed
              qed
            next
              case case_2
              solve( splitEqs(3) )
                case split
                solve( !KU( sq(~r.1) ) @ #vk.4 )
                  case DBSend
                  solve( !KU( senc(<~k.2, mul(pow(~k.3, z), ~r)>, k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( ~b ) @ #vk.12 )
                        case DBSend_case_1
                        solve( !KU( ~k.4 ) @ #vk.13 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( (~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) @ #vk.11 )
                        case c_xor
                        solve( !KU( ~b ) @ #vk.13 )
                          case DBSend_case_1
                          solve( !KU( ~k.4 ) @ #vk.14 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.16 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( (~a⊕~b) ) @ #vk.11 )
                        case c_xor
                        solve( !KU( ~b ) @ #vk.12 )
                          case DBSend_case_1
                          solve( !KU( ~k.4 ) @ #vk.14 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.16 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.21, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b⊕<~k.2, mul(pow(~k.3, z), ~r)>) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.16 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.21, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r.1 ) @ #vk.8 )
                qed
              qed
            qed
          next
            case case_2
            solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
              case case_1
              solve( End( ~b.1 ) @ #j )
                case Prov3
                solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                  case Prov2
                  solve( splitEqs(3) )
                    case split
                    solve( !KU( sq(~r) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<~k.1, mul(pow(~k.2, z), ~r.1)>, k.4) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( ~b ) @ #vk.12 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.13 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( (~a⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) @ #vk.12 )
                              case c_xor
                              solve( !KU( ~k.1 ) @ #vk.11 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a ) @ #vk.12 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~k.1 ) @ #vk.9 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.15 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r ) @ #vk.8 )
                    qed
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
              qed
            next
              case case_2
              solve( End( ~b.1 ) @ #j )
                case Prov3
                solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                  case Prov2
                  solve( splitEqs(3) )
                    case split
                    solve( !KU( sq(~r) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<~k.1, mul(pow(~k.2, z), ~r.1)>, k.4) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( ~b ) @ #vk.12 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.13 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( (~a⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) @ #vk.12 )
                              case c_xor
                              solve( !KU( ~k.1 ) @ #vk.11 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a ) @ #vk.12 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~k.1 ) @ #vk.9 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b⊕<~k.1, mul(pow(~k.2, z), ~r.1)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.15 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r ) @ #vk.8 )
                    qed
                  qed
                qed
              next
                case Ver3
                by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
              qed
            qed
          qed
        next
          case c_mul
          solve( !KU( pow(~k.1, (~a⊕<~k.2, mul(pow(~k.3, z), ~r)>)) ) @ #vk.7 )
            case c_pow
            solve( !KU( ~k.1 ) @ #vk.9 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~b ) @ #j )
          case Prov3
          solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
            case Prov2
            solve( !KU( mul(pow(~k.3, (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>)), x)
                   ) @ #vk.2 )
              case DBSend
              solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b.1 ) @ #j) ∧ #j < #e) )
                case case_1
                solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                  case case_1
                  solve( splitEqs(4) )
                    case split
                    solve( !KU( sq(~r.1) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<~k, mul(pow(~k.1, z), ~r)>, k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( ~b.1 ) @ #vk.12 )
                            case DBSend_case_1
                            solve( !KU( ~k.4 ) @ #vk.13 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~a.1 ) @ #vk.12 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.12 )
                              case DBSend_case_1
                              solve( !KU( ~a.1 ) @ #vk.13 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.15 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r.1 ) @ #vk.8 )
                    qed
                  qed
                next
                  case case_2
                  solve( splitEqs(4) )
                    case split
                    solve( !KU( sq(~r.1) ) @ #vk.4 )
                      case DBSend
                      solve( !KU( senc(<~k, mul(pow(~k.1, z), ~r)>, k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                          case c_xor_case_1
                          solve( !KU( ~b.1 ) @ #vk.12 )
                            case DBSend_case_1
                            solve( !KU( ~k.4 ) @ #vk.13 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( (~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.11 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.13 )
                              case DBSend_case_1
                              solve( !KU( ~k.4 ) @ #vk.14 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                            case c_xor
                            solve( !KU( ~b.1 ) @ #vk.12 )
                              case DBSend_case_1
                              solve( !KU( ~k.4 ) @ #vk.14 )
                                case DBSend
                                by contradiction /* cyclic */
                              qed
                            next
                              case DBSend_case_2
                              by contradiction /* cyclic */
                            next
                              case Leak
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.15 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_sq
                      by solve( !KU( ~r.1 ) @ #vk.8 )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                  case case_1
                  solve( End( ~b.1 ) @ #j.1 )
                    case Prov3
                    solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                      case Prov2
                      solve( splitEqs(4) )
                        case split
                        solve( !KU( sq(~r.1) ) @ #vk.4 )
                          case DBSend
                          solve( !KU( senc(<~k, mul(pow(~k.1, z), ~r)>, k.2) ) @ #vk.5 )
                            case c_senc
                            solve( !KU( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( ~b.1 ) @ #vk.12 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.13 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                solve( !KU( (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.12 )
                                  case c_xor
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.5 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( ~a.1 ) @ #vk.12 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.12 )
                                  case DBSend_case_1
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            next
                              case coerce
                              solve( !KD( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_sq
                          by solve( !KU( ~r.1 ) @ #vk.8 )
                        qed
                      qed
                    qed
                  next
                    case Ver3
                    by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                              ) ▶₁ #j.1 )
                  qed
                next
                  case case_2
                  solve( End( ~b.1 ) @ #j.1 )
                    case Prov3
                    solve( ProverState2( P.1, r.2, ~b.1, k.5, a.2 ) ▶₀ #j.1 )
                      case Prov2
                      solve( splitEqs(4) )
                        case split
                        solve( !KU( sq(~r.1) ) @ #vk.4 )
                          case DBSend
                          solve( !KU( senc(<~k, mul(pow(~k.1, z), ~r)>, k.2) ) @ #vk.5 )
                            case c_senc
                            solve( !KU( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.7 )
                              case c_xor_case_1
                              solve( !KU( ~b.1 ) @ #vk.12 )
                                case DBSend_case_1
                                solve( !KU( ~k.4 ) @ #vk.13 )
                                  case DBSend
                                  by contradiction /* cyclic */
                                qed
                              next
                                case DBSend_case_2
                                by contradiction /* cyclic */
                              next
                                case Leak
                                solve( !KU( (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) @ #vk.12 )
                                  case c_xor
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case coerce
                                  solve( !KD( (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.5 )
                                    case DBSend
                                    solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                      case DBInject_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case DBInject_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov2
                                      by contradiction /* impossible chain */
                                    next
                                      case Prov3
                                      solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                        case d_0_fst
                                        by contradiction /* impossible chain */
                                      next
                                        case d_0_snd
                                        by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                      qed
                                    qed
                                  next
                                    case Leak
                                    solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                      case Prov1
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  next
                                    case LtkReveal
                                    solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                      case LtkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealX
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case ShkRevealY
                                    solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                      case ShkGen
                                      by contradiction /* impossible chain */
                                    qed
                                  next
                                    case Ver1
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case c_xor_case_2
                              solve( !KU( ~a.1 ) @ #vk.12 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_xor_case_3
                              solve( !KU( (~a.1⊕~b.1) ) @ #vk.11 )
                                case c_xor
                                solve( !KU( ~b.1 ) @ #vk.12 )
                                  case DBSend_case_1
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case DBSend_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Leak
                                  solve( !KU( ~a.1 ) @ #vk.13 )
                                    case Ver1
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case coerce
                                solve( !KD( (~a.1⊕~b.1) ) ▶₀ #vk.4 )
                                  case DBSend
                                  solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                    case DBInject_case_1
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_2
                                    by contradiction /* cyclic */
                                  next
                                    case DBInject_case_3
                                    by contradiction /* cyclic */
                                  next
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov2
                                    by contradiction /* impossible chain */
                                  next
                                    case Prov3
                                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                next
                                  case Leak
                                  solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                    case Prov1
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                next
                                  case LtkReveal
                                  solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                    case LtkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealX
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case ShkRevealY
                                  solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                    case ShkGen
                                    by contradiction /* impossible chain */
                                  qed
                                next
                                  case Ver1
                                  by contradiction /* impossible chain */
                                qed
                              qed
                            next
                              case coerce
                              solve( !KD( (~a.1⊕~b.1⊕<~k, mul(pow(~k.1, z), ~r)>) ) ▶₀ #vk.3 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_sq
                          by solve( !KU( ~r.1 ) @ #vk.8 )
                        qed
                      qed
                    qed
                  next
                    case Ver3
                    by solve( VerifierState2( V.1, sq(x.2), senc(b.1, k.5), ~b.2, b.1
                              ) ▶₁ #j.1 )
                  qed
                qed
              qed
            next
              case c_mul
              solve( !KU( pow(~k.3, (~a.1⊕<~k, mul(pow(~k.1, z), ~r)>)) ) @ #vk.7 )
                case c_pow
                solve( !KU( ~k.3 ) @ #vk.9 )
                  case LtkReveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case Ver3
          by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
        qed
      qed
    qed
  next
    case case_2
    solve( (¬(#vr.7 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $P, pk(x) ) ▶₂ #l )
        case LtkGen
        solve( End( ~a ) @ #j )
          case Prov3
          by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
        next
          case Ver3
          solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
            case Ver2
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case Ver2_case_4
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
          case case_1
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.8 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          next
            case case_2
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          qed
        qed
      next
        case c_mul
        solve( !KU( pow(~k.1, x) ) @ #vk.7 )
          case c_pow
          solve( !KU( ~k.1 ) @ #vk.9 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~a ) @ #j )
        case Prov3
        by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Ver2_case_5
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
          case case_1
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.8 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.1, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          next
            case case_2
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.1, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.1, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.1, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.1, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.1, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.1, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.1, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          qed
        qed
      next
        case c_mul
        solve( !KU( pow(~k.1, x) ) @ #vk.7 )
          case c_pow
          solve( !KU( ~k.1 ) @ #vk.9 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~a ) @ #j )
        case Prov3
        by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case Ver2_case_6
  solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~a ) @ #j) ∧ #j < #e) )
    case case_1
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( !KU( mul(pow(~k.1, x), x.1) ) @ #vk.2 )
        case DBSend
        solve( (¬(#vr.12 < #e))  ∥ (∃ #j. (End( ~b ) @ #j) ∧ #j < #e) )
          case case_1
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( ~a ) @ #vk.9 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.10 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.11 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.17 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.22, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.17 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.17 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.17 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          next
            case case_2
            solve( !KU( sq(~r) ) @ #vk.4 )
              case DBSend
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( ~b ) @ #vk.7 )
                  case DBSend_case_1
                  solve( !KU( ~k.2 ) @ #vk.8 )
                    case DBSend
                    by contradiction /* cyclic */
                  qed
                next
                  case DBSend_case_2
                  by contradiction /* cyclic */
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              next
                case split_case_2
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( ~b ) @ #vk.6 )
                    case DBSend_case_1
                    solve( !KU( ~k.2 ) @ #vk.8 )
                      case DBSend
                      by contradiction /* cyclic */
                    qed
                  next
                    case DBSend_case_2
                    solve( !KU( ~a ) @ #vk.7 )
                      case Ver1
                      by contradiction /* cyclic */
                    qed
                  next
                    case Leak
                    by contradiction /* cyclic */
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~b⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (~a⊕x) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( ~b ) @ #vk.9 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_xor_case_2
                    solve( !KU( (~b⊕resp) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.10 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕resp) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case c_xor_case_3
                    solve( !KU( (~a⊕~b) ) @ #vk.8 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.11 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        by contradiction /* cyclic */
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( splitEqs(2) )
                  case split
                  solve( !KU( (~a⊕~b) ) @ #vk.7 )
                    case c_xor
                    solve( !KU( ~b ) @ #vk.8 )
                      case DBSend_case_1
                      solve( !KU( ~k.2 ) @ #vk.10 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      by contradiction /* cyclic */
                    qed
                  next
                    case coerce
                    solve( !KD( (~a⊕~b) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.15 )
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      next
                        case Prov1
                        by contradiction /* impossible chain */
                      next
                        case Prov2
                        by contradiction /* impossible chain */
                      next
                        case Prov3
                        solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      qed
                    next
                      case Leak
                      solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                        case Prov1
                        by contradiction /* impossible chain */
                      qed
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Ver1
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( splitEqs(2) )
                  case split_case_1
                  solve( !KU( senc((~a⊕~b), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕~b) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~b ) @ #vk.8 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( senc((~a⊕x), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~a⊕x) ) @ #vk.6 )
                      case c_xor
                      solve( !KU( ~a ) @ #vk.9 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~a⊕x) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( senc((~b⊕a⊕~a.1), k) ) @ #vk.5 )
                    case c_senc
                    solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                      case c_xor_case_1
                      solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                        case c_xor
                        solve( !KU( ~a.1 ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.15 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~b ) @ #vk.9 )
                        case DBSend_case_1
                        solve( !KU( ~k.2 ) @ #vk.10 )
                          case DBSend
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                          case c_xor
                          solve( !KU( ~a.1 ) @ #vk.10 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.16 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case Leak
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~a.1 ) @ #vk.8 )
                        case Ver1
                        by contradiction /* cyclic */
                      qed
                    next
                      case coerce
                      solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.15 )
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        next
                          case Prov1
                          by contradiction /* impossible chain */
                        next
                          case Prov2
                          by contradiction /* impossible chain */
                        next
                          case Prov3
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.20, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      next
                        case Leak
                        solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                          case Prov1
                          by contradiction /* impossible chain */
                        qed
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Ver1
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_sq
              by solve( !KU( ~r ) @ #vk.8 )
            qed
          qed
        next
          case case_2
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.2, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.11 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.16 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.21, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.16 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.16 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.16 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          next
            case case_2
            solve( End( ~b ) @ #j )
              case Prov3
              solve( ProverState2( P, r, ~b, k, a ) ▶₀ #j )
                case Prov2
                solve( !KU( sq(~r) ) @ #vk.4 )
                  case DBSend
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( ~b ) @ #vk.7 )
                      case DBSend_case_1
                      solve( !KU( ~k ) @ #vk.8 )
                        case DBSend
                        by contradiction /* cyclic */
                      qed
                    next
                      case DBSend_case_2
                      by contradiction /* cyclic */
                    next
                      case Leak
                      solve( !KU( senc(~resp, k.2) ) @ #vk.6 )
                        case c_senc
                        solve( !KU( ~resp ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( (~a⊕~b⊕resp) ) @ #vk.7 )
                        case c_xor_case_1
                        solve( !KU( ~b ) @ #vk.9 )
                          case DBSend_case_1
                          solve( !KU( ~k ) @ #vk.10 )
                            case DBSend
                            by contradiction /* cyclic */
                          qed
                        next
                          case DBSend_case_2
                          by contradiction /* cyclic */
                        next
                          case Leak
                          solve( !KU( (~a⊕resp) ) @ #vk.9 )
                            case c_xor
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~a⊕resp) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.20, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case c_xor_case_2
                        solve( !KU( ~a ) @ #vk.9 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_xor_case_3
                        solve( !KU( (~a⊕~b) ) @ #vk.8 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            by contradiction /* cyclic */
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.10 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~a⊕~b⊕resp) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( ~b ) @ #vk.6 )
                        case DBSend_case_1
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case DBSend_case_2
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        solve( !KU( ~a ) @ #vk.7 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~b⊕x), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕x) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (~a⊕x) ) @ #vk.8 )
                              case c_xor
                              solve( !KU( ~a ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (~a⊕x) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕x) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    solve( splitEqs(2) )
                      case split
                      solve( !KU( (~b⊕~z) ) @ #vk.7 )
                        case c_xor
                        solve( !KU( ~z ) @ #vk.8 )
                          case Ver1
                          by contradiction /* cyclic */
                        qed
                      next
                        case coerce
                        solve( !KD( (~b⊕~z) ) ▶₀ #vk.2 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.14 )
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov1
                            by contradiction /* impossible chain */
                          next
                            case Prov2
                            by contradiction /* impossible chain */
                          next
                            case Prov3
                            solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                            qed
                          qed
                        next
                          case Leak
                          solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                            case Prov1
                            by contradiction /* impossible chain */
                          qed
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Ver1
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case split_case_4
                    solve( splitEqs(2) )
                      case split_case_1
                      solve( !KU( senc((~b⊕a⊕~a.1), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~b⊕a⊕~a.1) ) @ #vk.6 )
                          case c_xor_case_1
                          solve( !KU( (~b⊕~a.1) ) @ #vk.8 )
                            case c_xor
                            solve( !KU( ~a.1 ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case coerce
                            solve( !KD( (~b⊕~a.1) ) ▶₀ #vk.4 )
                              case DBSend
                              solve( Send( $X.2, t ) ▶₀ #vr.14 )
                                case DBInject_case_1
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_2
                                by contradiction /* cyclic */
                              next
                                case DBInject_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov1
                                by contradiction /* impossible chain */
                              next
                                case Prov2
                                by contradiction /* impossible chain */
                              next
                                case Prov3
                                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.19, 0) ~~> (#vk.4, 0) )
                                qed
                              qed
                            next
                              case Leak
                              solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                                case Prov1
                                by contradiction /* impossible chain */
                              qed
                            next
                              case LtkGen
                              by contradiction /* impossible chain */
                            next
                              case LtkReveal
                              solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                                case LtkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealX
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case ShkRevealY
                              solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                                case ShkGen
                                by contradiction /* impossible chain */
                              qed
                            next
                              case Ver1
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case c_xor_case_2
                          solve( !KU( ~b ) @ #vk.9 )
                            case DBSend_case_1
                            solve( !KU( ~k ) @ #vk.10 )
                              case DBSend
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          next
                            case Leak
                            solve( !KU( (a⊕~a.1) ) @ #vk.9 )
                              case c_xor
                              solve( !KU( ~a.1 ) @ #vk.10 )
                                case Ver1
                                by contradiction /* cyclic */
                              qed
                            next
                              case coerce
                              solve( !KD( (a⊕~a.1) ) ▶₀ #vk.5 )
                                case DBSend
                                solve( Send( $X.2, t ) ▶₀ #vr.15 )
                                  case DBInject_case_1
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_2
                                  by contradiction /* cyclic */
                                next
                                  case DBInject_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Prov1
                                  by contradiction /* impossible chain */
                                next
                                  case Prov2
                                  by contradiction /* impossible chain */
                                next
                                  case Prov3
                                  solve( (#vl.3, 0) ~~> (#vk.5, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.20, 0) ~~> (#vk.5, 0) )
                                  qed
                                qed
                              next
                                case Leak
                                solve( MayLeak( $X.2, t ) ▶₀ #vr.15 )
                                  case Prov1
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case LtkGen
                                by contradiction /* impossible chain */
                              next
                                case LtkReveal
                                solve( !Ltk( $X.2, t ) ▶₀ #vr.15 )
                                  case LtkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealX
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case ShkRevealY
                                solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.15 )
                                  case ShkGen
                                  by contradiction /* impossible chain */
                                qed
                              next
                                case Ver1
                                by contradiction /* impossible chain */
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          solve( !KU( ~a.1 ) @ #vk.8 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~b⊕a⊕~a.1) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_2
                      solve( !KU( senc((~a⊕~b), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕~b) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~b ) @ #vk.8 )
                            case DBSend_case_1
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case DBSend_case_2
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            solve( !KU( ~a ) @ #vk.9 )
                              case Ver1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕~b) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case split_case_3
                      solve( !KU( senc((~a⊕z), k.2) ) @ #vk.5 )
                        case c_senc
                        solve( !KU( (~a⊕z) ) @ #vk.6 )
                          case c_xor
                          solve( !KU( ~a ) @ #vk.9 )
                            case Ver1
                            by contradiction /* cyclic */
                          qed
                        next
                          case coerce
                          solve( !KD( (~a⊕z) ) ▶₀ #vk.3 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.14 )
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov1
                              by contradiction /* impossible chain */
                            next
                              case Prov2
                              by contradiction /* impossible chain */
                            next
                              case Prov3
                              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.19, 0) ~~> (#vk.3, 0) )
                              qed
                            qed
                          next
                            case Leak
                            solve( MayLeak( $X.2, t ) ▶₀ #vr.14 )
                              case Prov1
                              by contradiction /* impossible chain */
                            qed
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Ver1
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sq
                  by solve( !KU( ~r ) @ #vk.8 )
                qed
              qed
            next
              case Ver3
              by solve( VerifierState2( V, sq(x.2), senc(b, k), ~b.1, b ) ▶₁ #j )
            qed
          qed
        qed
      next
        case c_mul
        solve( !KU( pow(~k.1, x) ) @ #vk.7 )
          case c_pow
          solve( !KU( ~k.1 ) @ #vk.9 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !Pk( $P, pk(x) ) ▶₂ #l )
      case LtkGen
      solve( End( ~a ) @ #j )
        case Prov3
        by solve( ProverState2( P, r, ~a, k, a.1 ) ▶₀ #j )
      next
        case Ver3
        solve( VerifierState2( V, sq(x.2), senc(b, k), ~a, b ) ▶₁ #j )
          case Ver2
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: BC_FiatShamirID.spthy

  reachability (exists-trace): verified (15 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (11 steps)
  fast_before_claim (all-traces): verified (8 steps)
  dbsec (all-traces): falsified - found trace (13 steps)
  dbsec_hnst (all-traces): verified (2338 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (16 steps)
  dbsec_hnst_star (all-traces): verified (6416 steps)

==============================================================================

real	0m55.829s
user	4m38.939s
sys	0m33.222s
