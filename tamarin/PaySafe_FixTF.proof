theory PaySafe_FixTF begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: MAC/4, adec/2, aenc/2, f/2, fst/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) InitCounter:
   [ ] --[ Once( <$R, $C, 'ATC'> ) ]-> [ CounterInReader( $R, $C, '0' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card1:
   [ Fr( ~nC ), !Shk( $R, $C, KM ), In( <'AdvKnows_ATC', ATC> ) ]
  --[ Start( ~nC ) ]->
   [ CardSt1( $C, $R, ATC, ~nC, (~nC⊕KM) ), MayLeak( $C, (~nC⊕KM) ) ]

  /*
  rule (modulo AC) Card1:
     [ Fr( ~nC ), !Shk( $R, $C, KM ), In( <'AdvKnows_ATC', ATC> ) ]
    --[ Start( ~nC ) ]->
     [ CardSt1( $C, $R, ATC, ~nC, z ), MayLeak( $C, z ) ]
    variants (modulo AC)
    1. ~nC   = ~nC.9
       KM    = ~nC.9
       z     = zero
    
    2. ~nC   = ~nC.9
       KM    = KM.11
       z     = (~nC.9⊕KM.11)
    
    3. ~nC   = ~nC.9
       KM    = zero
       z     = ~nC.9
    
    4. ~nC   = ~nC.11
       KM    = (~nC.11⊕z.15)
       z     = z.15
  */

rule (modulo E) Reader1:
   [ Fr( ~UN ), Fr( ~amount ) ]
  --[ Start( ~UN ), Send( $R, <'GetProcessingOpts', ~UN, ~amount> ) ]->
   [
   Out( <'GetProcessingOpts', ~UN, ~amount> ), ReaderSt1( $R, ~UN, ~amount )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card2:
   [
   CardSt1( C, R, ATC, nC, xored ), In( <'GetProcessingOpts', UN, amount> )
   ]
  -->
   [
   Send( C, <'AIP', 'AFL', ATC, nC, f(UN, xored)> ),
   CardSt2( C, R, nC, ATC, UN, amount )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader2:
   [ ReaderSt1( R, UN, amount ), Recv( R, <'AIP', 'AFL', ATC, nC, msg> ) ]
  -->
   [ ReaderSt2( R, UN, ATC, amount, nC, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card3:
   [ CardSt2( C, R, nC, ATC, UN, amount ), !Ltk( C, ltkC ), !Shk( R, C, KM )
   ]
  --[ End( nC ) ]->
   [
   Send( C,
         <sign(<UN, MAC(senc(ATC, KM), amount, ATC, UN)>, ltkC), 
          MAC(senc(ATC, KM), amount, ATC, UN)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader3:
   [
   ReaderSt2( R, UN, ATC, amount, nC, f(UN, (KM⊕nC)) ),
   CounterInReader( R, $C, ATC2 ),
   In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( $C, pkC ),
   !Shk( R, $C, KM )
   ]
  --[
  LessOrEqual( ATC2, ATC ),
  Eq( verify(SDAD, <UN, MAC(senc(ATC, KM), amount, ATC, UN)>, pkC), true ),
  DBSec( R, $C, <'GetProcessingOpts', UN, amount>,
         <'AIP', 'AFL', ATC, nC, f(UN, (KM⊕nC))>
  ),
  End( UN )
  ]->
   [ CounterInReader( R, $C, ('1'+ATC) ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Reader3:
     [
     ReaderSt2( R, UN, ATC, amount, nC, f(UN, z) ),
     CounterInReader( R, $C, ATC2 ),
     In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( $C, pkC ),
     !Shk( R, $C, KM )
     ]
    --[
    LessOrEqual( ATC2, ATC ), Eq( z.1, true ),
    DBSec( R, $C, <'GetProcessingOpts', UN, amount>,
           <'AIP', 'AFL', ATC, nC, f(UN, z)>
    ),
    End( UN )
    ]->
     [ CounterInReader( R, $C, ('1'+ATC) ) ]
    variants (modulo AC)
     1. ATC   = ATC.23
        KM    = KM.25
        SDAD  = SDAD.27
        UN    = UN.28
        amount
              = amount.29
        nC    = KM.25
        pkC   = pkC.31
        z     = zero
        z.1   = verify(SDAD.27,
                       <UN.28, MAC(senc(ATC.23, KM.25), amount.29, ATC.23, UN.28)>, pkC.31)
    
     2. ATC   = ATC.23
        KM    = KM.25
        SDAD  = SDAD.27
        UN    = UN.28
        amount
              = amount.29
        nC    = nC.30
        pkC   = pkC.31
        z     = (KM.25⊕nC.30)
        z.1   = verify(SDAD.27,
                       <UN.28, MAC(senc(ATC.23, KM.25), amount.29, ATC.23, UN.28)>, pkC.31)
    
     3. ATC   = ATC.23
        KM    = KM.25
        SDAD  = SDAD.27
        UN    = UN.28
        amount
              = amount.29
        nC    = zero
        pkC   = pkC.31
        z     = KM.25
        z.1   = verify(SDAD.27,
                       <UN.28, MAC(senc(ATC.23, KM.25), amount.29, ATC.23, UN.28)>, pkC.31)
    
     4. ATC   = ATC.23
        KM    = zero
        SDAD  = SDAD.27
        UN    = UN.28
        amount
              = amount.29
        nC    = nC.30
        pkC   = pkC.31
        z     = nC.30
        z.1   = verify(SDAD.27,
                       <UN.28, MAC(senc(ATC.23, zero), amount.29, ATC.23, UN.28)>, pkC.31)
    
     5. ATC   = ATC.24
        KM    = KM.26
        SDAD  = SDAD.28
        UN    = UN.29
        amount
              = amount.30
        nC    = (KM.26⊕z.33)
        pkC   = pkC.32
        z     = z.33
        z.1   = verify(SDAD.28,
                       <UN.29, MAC(senc(ATC.24, KM.26), amount.30, ATC.24, UN.29)>, pkC.32)
    
     6. ATC   = ATC.24
        KM    = (nC.31⊕z.33)
        SDAD  = SDAD.28
        UN    = UN.29
        amount
              = amount.30
        nC    = nC.31
        pkC   = pkC.32
        z     = z.33
        z.1   = verify(SDAD.28,
                       <UN.29, MAC(senc(ATC.24, (nC.31⊕z.33)), amount.30, ATC.24, UN.29)>,
                       pkC.32)
    
     7. ATC   = ATC.65
        KM    = zero
        SDAD  = sign(<UN.70, MAC(senc(ATC.65, zero), amount.71, ATC.65, UN.70)>,
                     x.127)
        UN    = UN.70
        amount
              = amount.71
        nC    = nC.72
        pkC   = pk(x.127)
        z     = nC.72
        z.1   = true
    
     8. ATC   = ATC.66
        KM    = KM.68
        SDAD  = sign(<UN.71, MAC(senc(ATC.66, KM.68), amount.72, ATC.66, UN.71)>,
                     x.129)
        UN    = UN.71
        amount
              = amount.72
        nC    = KM.68
        pkC   = pk(x.129)
        z     = zero
        z.1   = true
    
     9. ATC   = ATC.66
        KM    = KM.68
        SDAD  = sign(<UN.71, MAC(senc(ATC.66, KM.68), amount.72, ATC.66, UN.71)>,
                     x.129)
        UN    = UN.71
        amount
              = amount.72
        nC    = nC.73
        pkC   = pk(x.129)
        z     = (KM.68⊕nC.73)
        z.1   = true
    
    10. ATC   = ATC.66
        KM    = KM.68
        SDAD  = sign(<UN.71, MAC(senc(ATC.66, KM.68), amount.72, ATC.66, UN.71)>,
                     x.129)
        UN    = UN.71
        amount
              = amount.72
        nC    = zero
        pkC   = pk(x.129)
        z     = KM.68
        z.1   = true
    
    11. ATC   = ATC.66
        KM    = KM.68
        SDAD  = sign(<UN.71, MAC(senc(ATC.66, KM.68), amount.72, ATC.66, UN.71)>,
                     x.129)
        UN    = UN.71
        amount
              = amount.72
        nC    = (KM.68⊕z.75)
        pkC   = pk(x.129)
        z     = z.75
        z.1   = true
    
    12. ATC   = ATC.66
        KM    = (x.123⊕x.124)
        SDAD  = SDAD.70
        UN    = UN.71
        amount
              = amount.72
        nC    = (x.123⊕x.129)
        pkC   = pkC.74
        z     = (x.124⊕x.129)
        z.1   = verify(SDAD.70,
                       <UN.71, MAC(senc(ATC.66, (x.123⊕x.124)), amount.72, ATC.66, UN.71)>,
                       pkC.74)
    
    13. ATC   = ATC.67
        KM    = (nC.74⊕z.76)
        SDAD  = sign(<UN.72, 
                      MAC(senc(ATC.67, (nC.74⊕z.76)), amount.73, ATC.67, UN.72)>,
                     x.131)
        UN    = UN.72
        amount
              = amount.73
        nC    = nC.74
        pkC   = pk(x.131)
        z     = z.76
        z.1   = true
    
    14. ATC   = ATC.68
        KM    = (x.127⊕x.128)
        SDAD  = sign(<UN.73, 
                      MAC(senc(ATC.68, (x.127⊕x.128)), amount.74, ATC.68, UN.73)>,
                     x.132)
        UN    = UN.73
        amount
              = amount.74
        nC    = (x.127⊕x.133)
        pkC   = pk(x.132)
        z     = (x.128⊕x.133)
        z.1   = true
    // loop breaker: [1]
  */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction less_or_equal:
  "∀ x y #i. (LessOrEqual( x, y ) @ #i) ⇒ ((x = y) ∨ (∃ z. (x+z) = y))"

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( Net( <'AIP', 'AFL', ATC, nC, f(UN, z)> ) ▶₀ #k )
    case DBSend_case_1
    solve( ReaderSt2( $Y, UN, ATC, amount, ~nC, f(UN, z) ) ▶₀ #l )
      case Reader2_case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $Y, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( Send( $Y, <'GetProcessingOpts', ~UN, ~amount> ) @ #i )
            case Reader1
            solve( Send( $C, <'AIP', 'AFL', ATC, ~nC, f(~UN, z)> ) @ #j )
              case DBSend
              solve( Send( $C, <'AIP', 'AFL', ATC, ~nC, f(~UN, z)> ) ▶₀ #j )
                case Card2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.2)
                         ) @ #vk.1 )
                    case DBSend
                    solve( splitEqs(8) )
                      case split
                      solve( CounterInReader( $R, $C, ATC ) ▶₁ #l )
                        case InitCounter
                        solve( !KU( ~UN ) @ #vk.7 )
                          case Reader1
                          solve( !KU( ~amount ) @ #vk.13 )
                            case Reader1
                            solve( !KU( MAC(senc('0', ~k), ~amount, '0', ~UN) ) @ #vk.7 )
                              case DBSend
                              SOLVED // trace found
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Card1
    solve( !Shk( $R, $C, KM ) ▶₁ #i )
      case ShkGen
      solve( Start( ~nC ) @ #j )
        case Card1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Card1
    solve( !Shk( $R, $C, KM ) ▶₁ #i )
      case ShkGen
      solve( Start( ~nC ) @ #j )
        case Card1
        by contradiction /* cyclic */
      qed
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Card3
  solve( CardSt2( C, R, x, ATC, UN, amount ) ▶₀ #j )
    case Card2
    by contradiction /* from formulas */
  qed
next
  case Reader3
  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
    case case_1
    solve( ReaderSt2( R, x, ATC, amount, nC, f(x, z) ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( ReaderSt2( R, x, (ATC2+z), amount, nC, f(x, z.1) ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    qed
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nC, f(UN, z) ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nC, f(UN, z.1) ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nC, f(UN, z) ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.19 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.18 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.18 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.17 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k), ~amount, ATC, ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.15 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.19 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.18 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.18 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.17 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k), ~amount, ATC, ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.15 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.19 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.20 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.18 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.18 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.17 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k), ~amount, ATC, ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.15 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.15 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc(ATC, ~k) ) @ #vk.15 )
                case c_senc
                solve( !KU( ~k ) @ #vk.17 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nC, f(UN, z.1) ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.21 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.20 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.19 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.20 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.17 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z.1) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z), ~k) ) @ #vk.17 )
                case c_senc
                solve( !KU( ~k ) @ #vk.19 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z.1) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.21 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.20 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.19 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.20 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.17 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z.1) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z), ~k) ) @ #vk.17 )
                case c_senc
                solve( !KU( ~k ) @ #vk.19 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z.1) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          solve( !KU( ~UN ) @ #vk.21 )
                            case Reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            solve( !KU( ~UN ) @ #vk.22 )
                              case Reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        solve( !KU( ~UN ) @ #vk.20 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.19 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      solve( !KU( ~UN ) @ #vk.20 )
                        case Reader1
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            solve( !KU( MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.10))  ∥ (¬(#vr.10 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.17 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( splitEqs(1) )
                  case split
                  solve( !KU( f(~UN, z.1) ) @ #vk.14 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_MAC
              solve( !KU( senc((ATC2+z), ~k) ) @ #vk.17 )
                case c_senc
                solve( !KU( ~k ) @ #vk.19 )
                  case Leak
                  by contradiction /* from formulas */
                next
                  case ShkRevealX
                  by contradiction /* from formulas */
                next
                  case ShkRevealY
                  solve( !KU( f(~UN, z.1) ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_f
                    solve( !KU( ~UN ) @ #vk.18 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nC, f(UN, z) ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.17 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.25 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.25 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.26 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.24 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.19 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕nC) ) @ #vk.19 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕z) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.20 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nC, f(UN, z.1) ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( splitEqs(0) )
          case split
          solve( !KU( ~UN ) @ #vk.6 )
            case Reader1
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.2, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.2, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.2, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.2, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.2, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.2, $Y.1, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.1, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.1, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.1, $Y.1, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.18 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z.1) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_1
                    solve( !KU( ~UN ) @ #vk.19 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  next
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.26 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.28 )
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case ShkRevealX
                          by contradiction /* from formulas */
                        next
                          case ShkRevealY
                          by contradiction /* from formulas */
                        qed
                      next
                        case coerce
                        solve( !KD( (~k⊕~k.1) ) ▶₀ #vk.3 )
                          case DBSend
                          solve( Send( $X.3, t ) ▶₀ #vr.22 )
                            case Card2
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.26, 0) ~~> (#vk.3, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.3, 0) )
                                  case d_0_fst
                                  by contradiction /* cyclic */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                                    case d_0_fst
                                    by contradiction /* impossible chain */
                                  next
                                    case d_0_snd
                                    by solve( (#vr.29, 0) ~~> (#vk.3, 0) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Card3
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            next
                              case d_0_snd
                              by solve( (#vr.28, 0) ~~> (#vk.3, 0) )
                            qed
                          next
                            case DBInject_case_1
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_2
                            by contradiction /* cyclic */
                          next
                            case DBInject_case_3
                            by contradiction /* cyclic */
                          qed
                        next
                          case Leak
                          by contradiction /* from formulas */
                        next
                          case LtkGen
                          by contradiction /* impossible chain */
                        next
                          case LtkReveal
                          solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                            case LtkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case Reader1
                          by contradiction /* impossible chain */
                        next
                          case ShkRevealX
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        next
                          case ShkRevealY
                          solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                            case ShkGen
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      solve( !KU( ~k ) @ #vk.27 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case ShkRevealY
                        solve( !KU( (~nC⊕~k.1) ) @ #vk.27 )
                          case c_xor
                          solve( !KU( ~k.1 ) @ #vk.28 )
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case ShkRevealX
                            by contradiction /* from formulas */
                          next
                            case ShkRevealY
                            by contradiction /* from formulas */
                          qed
                        next
                          case coerce
                          solve( !KD( (~nC⊕~k.1) ) ▶₀ #vk.4 )
                            case DBSend
                            solve( Send( $X.3, t ) ▶₀ #vr.23 )
                              case Card2
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by contradiction /* forbidden KD-fact */
                              next
                                case d_0_snd
                                solve( (#vr.27, 0) ~~> (#vk.4, 0) )
                                  case d_0_fst
                                  by contradiction /* forbidden KD-fact */
                                next
                                  case d_0_snd
                                  solve( (#vr.28, 0) ~~> (#vk.4, 0) )
                                    case d_0_fst
                                    by contradiction /* cyclic */
                                  next
                                    case d_0_snd
                                    solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                                      case d_0_fst
                                      by contradiction /* impossible chain */
                                    next
                                      case d_0_snd
                                      by solve( (#vr.30, 0) ~~> (#vk.4, 0) )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Card3
                              solve( (#vl.3, 0) ~~> (#vk.4, 0) )
                                case d_0_fst
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              next
                                case d_0_snd
                                by solve( (#vr.29, 0) ~~> (#vk.4, 0) )
                              qed
                            next
                              case DBInject_case_1
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_2
                              by contradiction /* cyclic */
                            next
                              case DBInject_case_3
                              by contradiction /* cyclic */
                            qed
                          next
                            case Leak
                            by contradiction /* from formulas */
                          next
                            case LtkGen
                            by contradiction /* impossible chain */
                          next
                            case LtkReveal
                            solve( !Ltk( $X.3, t ) ▶₀ #vr.23 )
                              case LtkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case Reader1
                            by contradiction /* impossible chain */
                          next
                            case ShkRevealX
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          next
                            case ShkRevealY
                            solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.23 )
                              case ShkGen
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      solve( !KU( ~k.1 ) @ #vk.26 )
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case ShkRevealX
                        by contradiction /* from formulas */
                      next
                        case ShkRevealY
                        by contradiction /* from formulas */
                      qed
                    next
                      case coerce
                      solve( !KD( (~k⊕~nC⊕~k.1) ) ▶₀ #vk.2 )
                        case DBSend
                        solve( Send( $X.3, t ) ▶₀ #vr.22 )
                          case Card2
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.26, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* forbidden KD-fact */
                            next
                              case d_0_snd
                              solve( (#vr.27, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* cyclic */
                              next
                                case d_0_snd
                                solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                                  case d_0_fst
                                  by contradiction /* impossible chain */
                                next
                                  case d_0_snd
                                  by solve( (#vr.29, 0) ~~> (#vk.2, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case Card3
                          solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          next
                            case d_0_snd
                            by solve( (#vr.28, 0) ~~> (#vk.2, 0) )
                          qed
                        next
                          case DBInject_case_1
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_2
                          by contradiction /* cyclic */
                        next
                          case DBInject_case_3
                          by contradiction /* cyclic */
                        qed
                      next
                        case Leak
                        by contradiction /* from formulas */
                      next
                        case LtkGen
                        by contradiction /* impossible chain */
                      next
                        case LtkReveal
                        solve( !Ltk( $X.3, t ) ▶₀ #vr.22 )
                          case LtkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case Reader1
                        by contradiction /* impossible chain */
                      next
                        case ShkRevealX
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      next
                        case ShkRevealY
                        solve( !Shk( $X.3, $Y, t ) ▶₀ #vr.22 )
                          case ShkGen
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_f
                solve( splitEqs(0) )
                  case split_case_1
                  solve( !KU( ~k ) @ #vk.12 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_2
                  solve( !KU( ~k ) @ #vk.21 )
                    case Leak
                    by contradiction /* from formulas */
                  next
                    case ShkRevealX
                    by contradiction /* from formulas */
                  next
                    case ShkRevealY
                    by contradiction /* from formulas */
                  qed
                next
                  case split_case_3
                  solve( !KU( (~k⊕z.1) ) @ #vk.12 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕z.1) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  solve( !KU( (~k⊕nC) ) @ #vk.21 )
                    case c_xor
                    solve( !KU( ~k ) @ #vk.22 )
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case ShkRevealX
                      by contradiction /* from formulas */
                    next
                      case ShkRevealY
                      by contradiction /* from formulas */
                    qed
                  next
                    case coerce
                    solve( !KD( (~k⊕nC) ) ▶₀ #vk.2 )
                      case DBSend
                      solve( Send( $X.2, t ) ▶₀ #vr.14 )
                        case Card2
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* forbidden KD-fact */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* forbidden KD-fact */
                          next
                            case d_0_snd
                            solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              by contradiction /* cyclic */
                            next
                              case d_0_snd
                              solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                                case d_0_fst
                                by contradiction /* impossible chain */
                              next
                                case d_0_snd
                                by solve( (#vr.21, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case Card3
                        solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        next
                          case d_0_snd
                          by solve( (#vr.20, 0) ~~> (#vk.2, 0) )
                        qed
                      next
                        case DBInject_case_1
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_2
                        by contradiction /* cyclic */
                      next
                        case DBInject_case_3
                        by contradiction /* cyclic */
                      qed
                    next
                      case Leak
                      by contradiction /* from formulas */
                    next
                      case LtkGen
                      by contradiction /* impossible chain */
                    next
                      case LtkReveal
                      solve( !Ltk( $X.2, t ) ▶₀ #vr.14 )
                        case LtkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case Reader1
                      by contradiction /* impossible chain */
                    next
                      case ShkRevealX
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    next
                      case ShkRevealY
                      solve( !Shk( $X.2, $Y, t ) ▶₀ #vr.14 )
                        case ShkGen
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nC, f(UN, z) ) ▶₀ #l )
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_2
            solve( splitEqs(1) )
              case split
              solve( !KU( f(~UN, z) ) @ #vk.12 )
                case DBSend
                solve( splitEqs(3) )
                  case split
                  solve( splitEqs(0) )
                    case split_case_2
                    solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                        case c_xor
                        solve( !KU( ~k.1 ) @ #vk.26 )
                          case Leak
                          solve( !KU( ~k ) @ #vk.28 )
                            case Leak
                            solve( !KU( ~nC.1 ) @ #vk.31 )
                              case DBSend
                              solve( !KU( ~nC.2 ) @ #vk.34 )
                                case DBSend
                                solve( CounterInReader( $R, $C, ATC ) ▶₁ #l )
                                  case InitCounter
                                  solve( !KU( ~UN ) @ #vk.24 )
                                    case Reader1
                                    solve( !KU( ~amount ) @ #vk.26 )
                                      case Reader1
                                      solve( !KU( ~nC ) @ #vk.33 )
                                        case DBSend
                                        solve( !KU( MAC(senc('0', ~k.1), ~amount, '0', ~UN) ) @ #vk.20 )
                                          case DBSend
                                          SOLVED // trace found
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nC, f(UN, z) ) ▶₀ #l )
    case Reader2_case_2
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nC.1 ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_2
                solve( splitEqs(2) )
                  case split
                  solve( !KU( f(~UN, z) ) @ #vk.12 )
                    case DBSend
                    solve( (¬(#vr.20 < #e))  ∥ (∃ #j. (End( ~nC.2 ) @ #j) ∧ #j < #e) )
                      case case_1
                      solve( splitEqs(4) )
                        case split
                        solve( splitEqs(1) )
                          case split_case_2
                          solve( !KU( (~k⊕~nC⊕~k.1) ) @ #vk.12 )
                            case c_xor_case_1
                            solve( !KU( (~k⊕~k.1) ) @ #vk.24 )
                              case c_xor
                              solve( !KU( ~k.1 ) @ #vk.26 )
                                case Leak
                                solve( End( ~nC.2 ) @ #j )
                                  case Card3
                                  solve( CardSt2( C, R, ~nC, ATC, UN, amount ) ▶₀ #j )
                                    case Card2
                                    solve( !Ltk( $C, ltkC ) ▶₁ #j )
                                      case LtkGen
                                      solve( !Shk( $R, $C, KM ) ▶₂ #j )
                                        case ShkGen
                                        solve( !KU( ~k.2 ) @ #vk.29 )
                                          case ShkRevealX
                                          solve( !KU( ~nC ) @ #vk.31 )
                                            case DBSend
                                            solve( CounterInReader( $R, $C, ATC.1 ) ▶₁ #l )
                                              case InitCounter
                                              solve( !KU( ~UN.1 ) @ #vk.22 )
                                                case Reader1
                                                solve( !KU( ~amount.1 ) @ #vk.24 )
                                                  case Reader1
                                                  solve( !KU( ~nC.1 ) @ #vk.30 )
                                                    case DBSend
                                                    solve( !KU( MAC(senc('0', ~k.1), ~amount.1, '0', ~UN.1)
                                                           ) @ #vk.19 )
                                                      case DBSend
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: PaySafe_FixTF.spthy

  reachability (exists-trace): verified (17 steps)
  unique_runid (all-traces): verified (14 steps)
  end_after_start (all-traces): verified (15 steps)
  fast_before_claim (all-traces): verified (12 steps)
  dbsec (all-traces): verified (1436 steps)
  dbsec_hnst (all-traces): verified (1280 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (23 steps)
  dbsec_hnst_star (all-traces): falsified - found trace (29 steps)

==============================================================================

real	1m34.010s
user	9m16.313s
sys	0m46.649s
