theory PaySafe begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: MAC/4, adec/2, aenc/2, fst/1, pair/2, pk/1, sdec/2, senc/2,
           sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) InitCounter:
   [ ] --[ Once( <$R, $C, 'ATC'> ) ]-> [ CounterInReader( $R, $C, '0' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card1:
   [ Fr( ~nc ), In( <'AdvKnows_ATC', ATC> ) ]
  --[ Start( ~nc ) ]->
   [ CardSt1( $C, $R, ATC, ~nc ), MayLeak( $C, ~nc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader1:
   [ Fr( ~UN ), Fr( ~amount ) ]
  --[ Start( ~UN ), Send( $R, <'GetProcessingOpts', ~UN, ~amount> ) ]->
   [
   Out( <'GetProcessingOpts', ~UN, ~amount> ), ReaderSt1( $R, ~UN, ~amount )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card2:
   [ CardSt1( C, R, ATC, nc ), In( <'GetProcessingOpts', UN, amount> ) ]
  -->
   [
   Send( C, <'AIP', 'AFL', ATC, nc> ), CardSt2( C, R, nc, ATC, UN, amount )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader2:
   [ ReaderSt1( R, UN, amount ), Recv( R, <'AIP', 'AFL', ATC, nc> ) ]
  -->
   [ ReaderSt2( R, UN, ATC, amount, nc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Card3:
   [ CardSt2( C, R, nc, ATC, UN, amount ), !Ltk( C, ltkC ), !Shk( R, C, KM )
   ]
  --[ End( nc ) ]->
   [
   Send( C,
         <sign(<nc, UN, MAC(senc(ATC, KM), amount, ATC, UN)>, ltkC), 
          MAC(senc(ATC, KM), amount, ATC, UN)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reader3:
   [
   ReaderSt2( R, UN, ATC, amount, nc ), CounterInReader( R, $C, ATC2 ),
   In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( $C, pkC ),
   !Shk( R, $C, KM )
   ]
  --[
  LessOrEqual( ATC2, ATC ),
  Eq( verify(SDAD, <nc, UN, MAC(senc(ATC, KM), amount, ATC, UN)>, pkC),
      true
  ),
  DBSec( R, $C, <'GetProcessingOpts', UN, amount>, <'AIP', 'AFL', ATC, nc>
  ),
  End( UN )
  ]->
   [ CounterInReader( R, $C, ('1'+ATC) ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) Reader3:
     [
     ReaderSt2( R, UN, ATC, amount, nc ), CounterInReader( R, $C, ATC2 ),
     In( <SDAD, MAC(senc(ATC, KM), amount, ATC, UN)> ), !Pk( $C, pkC ),
     !Shk( R, $C, KM )
     ]
    --[
    LessOrEqual( ATC2, ATC ), Eq( z, true ),
    DBSec( R, $C, <'GetProcessingOpts', UN, amount>, <'AIP', 'AFL', ATC, nc>
    ),
    End( UN )
    ]->
     [ CounterInReader( R, $C, ('1'+ATC) ) ]
    variants (modulo AC)
    1. ATC   = ATC.22
       KM    = KM.24
       SDAD  = SDAD.26
       UN    = UN.27
       amount
             = amount.28
       nc    = nc.29
       pkC   = pkC.30
       z     = verify(SDAD.26,
                      <nc.29, UN.27, MAC(senc(ATC.22, KM.24), amount.28, ATC.22, UN.27)>,
                      pkC.30)
    
    2. ATC   = ATC.63
       KM    = KM.65
       SDAD  = sign(<nc.70, UN.68, 
                     MAC(senc(ATC.63, KM.65), amount.69, ATC.63, UN.68)>,
                    x.123)
       UN    = UN.68
       amount
             = amount.69
       nc    = nc.70
       pkC   = pk(x.123)
       z     = true
    // loop breaker: [1]
  */

restriction equal:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction less_or_equal:
  "∀ x y #i. (LessOrEqual( x, y ) @ #i) ⇒ ((x = y) ∨ (∃ z. (x+z) = y))"

rule (modulo E) LtkGen:
   [ Fr( ~k ) ]
  --[ Once( $X ) ]->
   [ !Ltk( $X, ~k ), !Pk( $X, pk(~k) ), Out( pk(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkGen:
   [ Fr( ~k ) ] --[ Once( <$X, $Y> ) ]-> [ !Shk( $X, $Y, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LtkReveal:
   [ !Ltk( $X, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealX:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $X ) ]->
   [ Out( k ), !Compromise( $X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ShkRevealY:
   [ !Shk( $X, $Y, k ) ]
  --[ !Compromise( $Y ) ]->
   [ Out( k ), !Compromise( $Y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBInject:
   [ In( m ), !Compromise( $X ) ] --> [ Send( $X, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBSend:
   [ Send( $X, m ) ]
  --[ Send( $X, m ), Action( $X ) ]->
   [ Net( m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DBRecv:
   [ Net( m ) ] --[ Action( $Y ), Recv( $Y, m ) ]-> [ Recv( $Y, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Leak:
   [ MayLeak( $X, m ) ] --[ Action( $X ), Collusion( ) ]-> [ Out( m ) ]

  /* has exactly the trivial AC variant */

lemma reachability:
  exists-trace
  "∃ V P chal resp #i #j #k #l.
    ((((((((Send( V, chal ) @ #i) ∧ (Send( P, resp ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (DBSec( V, P, chal, resp ) @ #l)) ∧
        (#i < #j)) ∧
       (#j < #k)) ∧
      (#k < #l)) ∧
     (¬(∃ C #r. !Compromise( C ) @ #r))) ∧
    (¬(∃ #c. Collusion( ) @ #c))"
/*
guarded formula characterizing all satisfying traces:
"∃ V P chal resp #i #j #k #l.
  (Send( V, chal ) @ #i) ∧
  (Send( P, resp ) @ #j) ∧
  (Recv( V, resp ) @ #k) ∧
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (#i < #j) ∧
  (#j < #k) ∧
  (#k < #l) ∧
  (∀ C #r. (!Compromise( C ) @ #r) ⇒ ⊥) ∧
  (∀ #c. (Collusion( ) @ #c) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( Net( <'AIP', 'AFL', ATC, nc> ) ▶₀ #k )
    case DBSend_case_1
    solve( ReaderSt2( $Y, UN, ATC, amount, ~nc ) ▶₀ #l )
      case Reader2_case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $Y, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( Send( $Y, <'GetProcessingOpts', ~UN, ~amount> ) @ #i )
            case Reader1
            solve( Send( $C, <'AIP', 'AFL', ATC, ~nc> ) @ #j )
              case DBSend
              solve( Send( $C, <'AIP', 'AFL', ATC, ~nc> ) ▶₀ #j )
                case Card2
                solve( !KU( sign(<~nc, ~UN, MAC(senc(ATC, ~k.1), ~amount, ATC, ~UN)>,
                                 ~k.2)
                       ) @ #vk.1 )
                  case DBSend
                  solve( CounterInReader( $R, $C, ATC ) ▶₁ #l )
                    case InitCounter
                    solve( !KU( ~UN ) @ #vk.6 )
                      case Reader1
                      solve( !KU( ~amount ) @ #vk.7 )
                        case Reader1
                        solve( !KU( MAC(senc('0', ~k.1), ~amount, '0', ~UN) ) @ #vk.6 )
                          case DBSend
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma unique_runid:
  all-traces
  "∀ x #i #j. ((Start( x ) @ #i) ∧ (Start( x ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Start( x ) @ #i) ∧ (Start( x ) @ #j) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( Start( x ) @ #i )
    case Card1
    solve( Start( ~nc ) @ #j )
      case Card1
      by contradiction /* cyclic */
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( Start( x ) @ #i )
    case Card1
    solve( Start( ~nc ) @ #j )
      case Card1
      by contradiction /* cyclic */
    qed
  next
    case Reader1
    solve( Start( ~UN ) @ #j )
      case Reader1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma end_after_start:
  all-traces
  "∀ x #j.
    (End( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ ((#i = #j) ∨ (#i < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (End( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ (¬(#i = #j)) ∧ (¬(#i < #j))"
*/
simplify
solve( End( x ) @ #j )
  case Card3
  solve( CardSt2( C, R, x, ATC, UN, amount ) ▶₀ #j )
    case Card2
    by contradiction /* from formulas */
  qed
next
  case Reader3
  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
    case case_1
    solve( ReaderSt2( R, x, ATC, amount, nc ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( ReaderSt2( R, x, (ATC2+z), amount, nc ) ▶₀ #j )
      case Reader2_case_1
      by contradiction /* from formulas */
    next
      case Reader2_case_2
      by contradiction /* from formulas */
    next
      case Reader2_case_3
      by contradiction /* from formulas */
    next
      case Reader2_case_4
      by contradiction /* from formulas */
    qed
  qed
qed

lemma fast_before_claim:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((∃ #i #j.
       (((Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)) ∧ (#i < #l)) ∧
       (#j < #l)) ∨
     (∃ #j. !Compromise( V ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j.
    (Send( V, chal ) @ #i) ∧ (Recv( V, resp ) @ #j)
   ⇒
    ((¬(#i < #l)) ∨ (¬(#j < #l)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nc ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nc ) ▶₀ #l )
    case Reader2_case_1
    by contradiction /* from formulas */
  next
    case Reader2_case_2
    by contradiction /* from formulas */
  next
    case Reader2_case_3
    by contradiction /* from formulas */
  next
    case Reader2_case_4
    by contradiction /* from formulas */
  qed
qed

restriction once:
  "∀ x #i #j. ((Once( x ) @ #i) ∧ (Once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SetExpiry:
   [ ] --[ Expiry( ), Once( 'expiry' ) ]-> [ ]

  /* has exactly the trivial AC variant */

restriction no_collusion_after_expiry:
  "∀ #i #j. ((Expiry( ) @ #i) ∧ (Collusion( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

restriction sessions_complete_before_expiry:
  "∀ x #i #e.
    (((Start( x ) @ #i) ∧ (Expiry( ) @ #e)) ∧ (#i < #e)) ⇒
    (∃ #j. (End( x ) @ #j) ∧ (#j < #e))"

lemma dbsec:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ P2 #p #p2 #i #j #k.
         ((((((!Compromise( P ) @ #p) ∧ (!Compromise( P2 ) @ #p2)) ∧
             (Send( V, chal ) @ #i)) ∧
            (Action( P2 ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k))) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ P2 #p #p2 #i #j #k.
    (!Compromise( P ) @ #p) ∧
    (!Compromise( P2 ) @ #p2) ∧
    (Send( V, chal ) @ #i) ∧
    (Action( P2 ) @ #j) ∧
    (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nc ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            solve( !KU( MAC(senc(ATC, ~k), ~amount, ATC, ~UN) ) @ #vk.3 )
              case DBSend
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_2
                solve( CounterInReader( $R, $C, ATC ) ▶₁ #l )
                  case InitCounter
                  solve( !KU( ~nc ) @ #vk.15 )
                    case DBSend
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      solve( !KU( ~amount ) @ #vk.18 )
                        case Reader1
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    ((((∃ #i #j #k.
         ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
           (Recv( V, resp ) @ #k)) ∧
          (#i < #j)) ∧
         (#j < #k)) ∨
       (∃ #j. !Compromise( V ) @ #j)) ∨
      (∃ #j. !Compromise( P ) @ #j)) ∨
     (∃ #j. Collusion( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Collusion( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nc ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.6 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~UN ) @ #vk.6 )
              case Reader1
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.13 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.14 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.12 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.14 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.12 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.14 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.14 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.12 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nc ) ▶₀ #l )
    case Reader2_case_1
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<~nc, ~UN, 
                          MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.6 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~UN ) @ #vk.6 )
              case Reader1
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.15 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, 
                          MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.16 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.14 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, 
                          MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.16 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.14 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, 
                          MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                         ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_1
            solve( !KU( ~UN ) @ #vk.16 )
              case Reader1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case DBSend
              solve( !KU( ~UN ) @ #vk.16 )
                case Reader1
                by contradiction /* cyclic */
              qed
            next
              case Leak
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_sign
          solve( !KU( ~k.1 ) @ #vk.14 )
            case LtkReveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_collusion:
  all-traces
  "∀ V P chal resp #l.
    (DBSec( V, P, chal, resp ) @ #l) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #l.
  (DBSec( V, P, chal, resp ) @ #l)
 ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nc ) ▶₀ #l )
    case Reader2_case_2
    solve( !Pk( $C, pk(x) ) ▶₃ #l )
      case LtkGen
      solve( !Shk( $R, $C, KM ) ▶₄ #l )
        case ShkGen
        solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
               ) @ #vk.1 )
          case DBSend
          solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
            case case_2
            solve( !KU( ~nc ) @ #vk.10 )
              case Leak
              solve( CounterInReader( $R, $C, ATC ) ▶₁ #l )
                case InitCounter
                solve( !KU( ~UN ) @ #vk.14 )
                  case Reader1
                  solve( !KU( ~amount ) @ #vk.15 )
                    case Reader1
                    solve( !KU( MAC(senc('0', ~k), ~amount, '0', ~UN) ) @ #vk.10 )
                      case DBSend
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma dbsec_hnst_star:
  all-traces
  "∀ V P chal resp #e #l.
    (((DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)) ∧ (#e < #l)) ⇒
    (((∃ #i #j #k.
        ((((Send( V, chal ) @ #i) ∧ (Action( P ) @ #j)) ∧
          (Recv( V, resp ) @ #k)) ∧
         (#i < #j)) ∧
        (#j < #k)) ∨
      (∃ #j. !Compromise( V ) @ #j)) ∨
     (∃ #j. !Compromise( P ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ V P chal resp #e #l.
  (DBSec( V, P, chal, resp ) @ #l) ∧ (Expiry( ) @ #e)
 ∧
  (#e < #l) ∧
  (∀ #i #j #k.
    (Send( V, chal ) @ #i) ∧ (Action( P ) @ #j) ∧ (Recv( V, resp ) @ #k)
   ⇒
    ((¬(#i < #j)) ∨ (¬(#j < #k)))) ∧
  (∀ #j. (!Compromise( V ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (!Compromise( P ) @ #j) ⇒ ⊥)"
*/
simplify
solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
  case case_1
  solve( ReaderSt2( V, UN, ATC, amount, nc ) ▶₀ #l )
    case Reader2_case_1
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
        case case_1
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( !KU( sign(<~nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
                   ) @ #vk.1 )
              case DBSend
              solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.6 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~UN ) @ #vk.6 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k.1 ) @ #vk.13 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~nc ) @ #j )
              case Card3
              solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                case Card2
                solve( !Ltk( $X, ltkC ) ▶₁ #j )
                  case LtkGen
                  solve( !Shk( $R, $X, KM ) ▶₂ #j )
                    case ShkGen
                    solve( !KU( sign(<~nc, ~UN.1, MAC(senc(ATC, ~k.2), ~amount.1, ATC, ~UN.1)
                                     >,
                                     ~k.3)
                           ) @ #vk.1 )
                      case DBSend
                      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                        case case_1
                        solve( !KU( ~UN ) @ #vk.6 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( !KU( ~UN ) @ #vk.6 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~k.3 ) @ #vk.13 )
                        case LtkReveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
              next
                case case_2
                by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
        case case_1
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~UN ) @ #j )
              case Card3
              by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
                  case Reader2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                by solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~UN ) @ #j )
              case Card3
              by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
                  case Reader2
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                by solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.14 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.14 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.12 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              by solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.14 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.14 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.12 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              by solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, MAC(senc(ATC, ~k), ~amount, ATC, ~UN)>, ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.14 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.14 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.14 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.12 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            next
              case case_2
              by solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ReaderSt2( V, UN, (ATC2+z), amount, nc ) ▶₀ #l )
    case Reader2_case_1
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
        case case_1
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( !KU( sign(<~nc, ~UN, 
                              MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                             ~k.1)
                   ) @ #vk.1 )
              case DBSend
              solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.6 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~UN ) @ #vk.6 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~k.1 ) @ #vk.15 )
                case LtkReveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~nc ) @ #j )
              case Card3
              solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                case Card2
                solve( !Ltk( $X, ltkC ) ▶₁ #j )
                  case LtkGen
                  solve( !Shk( $R, $X, KM ) ▶₂ #j )
                    case ShkGen
                    solve( !KU( sign(<~nc, ~UN.1, 
                                      MAC(senc((ATC2+z), ~k.2), ~amount.1, (ATC2+z), ~UN.1)>,
                                     ~k.3)
                           ) @ #vk.1 )
                      case DBSend
                      solve( (¬(#vr.1 < #vr.8))  ∥ (¬(#vr.8 < #vr.2)) )
                        case case_1
                        solve( !KU( ~UN ) @ #vk.6 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_2
                        solve( !KU( ~UN ) @ #vk.6 )
                          case Reader1
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~k.3 ) @ #vk.15 )
                        case LtkReveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
              next
                case case_2
                by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (¬(#vr.5 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
        case case_1
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~UN ) @ #j )
              case Card3
              by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                by solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
              next
                case case_2
                solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
                  case Reader2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !Pk( $C, pk(x) ) ▶₃ #l )
          case LtkGen
          solve( !Shk( $R, $C, KM ) ▶₄ #l )
            case ShkGen
            solve( End( ~UN ) @ #j )
              case Card3
              by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
            next
              case Reader3
              solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                case case_1
                by solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
              next
                case case_2
                solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
                  case Reader2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_2
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, 
                            MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                           ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.16 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.16 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.14 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              by solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
            next
              case case_2
              solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_3
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, 
                            MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                           ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.16 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.16 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.14 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              by solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
            next
              case case_2
              solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Reader2_case_4
    solve( (¬(#vr.1 < #e))  ∥ (∃ #j. (End( ~UN ) @ #j) ∧ #j < #e) )
      case case_1
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( !KU( sign(<nc, ~UN, 
                            MAC(senc((ATC2+z), ~k), ~amount, (ATC2+z), ~UN)>,
                           ~k.1)
                 ) @ #vk.1 )
            case DBSend
            solve( (¬(#vr.13 < #e))  ∥ (∃ #j. (End( ~nc ) @ #j) ∧ #j < #e) )
              case case_1
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( !KU( ~UN ) @ #vk.16 )
                  case Reader1
                  by contradiction /* cyclic */
                qed
              next
                case case_2
                solve( !KU( ~nc ) @ #vk.10 )
                  case DBSend
                  solve( !KU( ~UN ) @ #vk.16 )
                    case Reader1
                    by contradiction /* cyclic */
                  qed
                next
                  case Leak
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( (¬(#vr.1 < #vr.9))  ∥ (¬(#vr.9 < #vr.2)) )
                case case_1
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              next
                case case_2
                solve( End( ~nc ) @ #j )
                  case Card3
                  solve( CardSt2( C, R, ~nc, ATC, UN, amount ) ▶₀ #j )
                    case Card2
                    solve( !KU( ~UN ) @ #vk.16 )
                      case Reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Reader3
                  solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
                    case case_1
                    by solve( ReaderSt2( R, ~nc, ATC, amount, nc.1 ) ▶₀ #j )
                  next
                    case case_2
                    by solve( ReaderSt2( R, ~nc, (ATC2+z), amount, nc.1 ) ▶₀ #j )
                  qed
                qed
              qed
            qed
          next
            case c_sign
            solve( !KU( ~k.1 ) @ #vk.14 )
              case LtkReveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !Pk( $C, pk(x) ) ▶₃ #l )
        case LtkGen
        solve( !Shk( $R, $C, KM ) ▶₄ #l )
          case ShkGen
          solve( End( ~UN ) @ #j )
            case Card3
            by solve( CardSt2( C, R, ~UN, ATC, UN.1, amount ) ▶₀ #j )
          next
            case Reader3
            solve( (ATC2 = ATC)  ∥ (∃ z. ((ATC2+z) = ATC)) )
              case case_1
              by solve( ReaderSt2( R, ~UN, ATC, amount, nc ) ▶₀ #j )
            next
              case case_2
              solve( ReaderSt2( R, ~UN, (ATC2+z), amount, nc ) ▶₀ #j )
                case Reader2
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: PaySafe.spthy

  reachability (exists-trace): verified (15 steps)
  unique_runid (all-traces): verified (12 steps)
  end_after_start (all-traces): verified (15 steps)
  fast_before_claim (all-traces): verified (12 steps)
  dbsec (all-traces): falsified - found trace (14 steps)
  dbsec_hnst (all-traces): verified (96 steps)
  dbsec_hnst_collusion (all-traces): falsified - found trace (13 steps)
  dbsec_hnst_star (all-traces): verified (318 steps)

==============================================================================

real	0m6.683s
user	0m37.778s
sys	0m3.385s
